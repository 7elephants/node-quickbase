{
  "version": 3,
  "sources": ["../node_modules/deepmerge/dist/cjs.js", "../node_modules/debug/node_modules/ms/index.js", "../node_modules/debug/src/common.js", "../node_modules/debug/src/browser.js", "../node_modules/generic-throttle/dist/throttle.js", "../node_modules/axios/lib/helpers/bind.js", "../node_modules/axios/lib/utils.js", "../node_modules/axios/lib/core/AxiosError.js", "../node_modules/axios/lib/helpers/null.js", "../node_modules/axios/lib/helpers/toFormData.js", "../node_modules/axios/lib/helpers/AxiosURLSearchParams.js", "../node_modules/axios/lib/helpers/buildURL.js", "../node_modules/axios/lib/core/InterceptorManager.js", "../node_modules/axios/lib/defaults/transitional.js", "../node_modules/axios/lib/platform/browser/classes/URLSearchParams.js", "../node_modules/axios/lib/platform/browser/classes/FormData.js", "../node_modules/axios/lib/platform/browser/classes/Blob.js", "../node_modules/axios/lib/platform/browser/index.js", "../node_modules/axios/lib/platform/common/utils.js", "../node_modules/axios/lib/platform/index.js", "../node_modules/axios/lib/helpers/toURLEncodedForm.js", "../node_modules/axios/lib/helpers/formDataToJSON.js", "../node_modules/axios/lib/defaults/index.js", "../node_modules/axios/lib/helpers/parseHeaders.js", "../node_modules/axios/lib/core/AxiosHeaders.js", "../node_modules/axios/lib/core/transformData.js", "../node_modules/axios/lib/cancel/isCancel.js", "../node_modules/axios/lib/cancel/CanceledError.js", "../node_modules/axios/lib/core/settle.js", "../node_modules/axios/lib/helpers/cookies.js", "../node_modules/axios/lib/helpers/isAbsoluteURL.js", "../node_modules/axios/lib/helpers/combineURLs.js", "../node_modules/axios/lib/core/buildFullPath.js", "../node_modules/axios/lib/helpers/isURLSameOrigin.js", "../node_modules/axios/lib/helpers/parseProtocol.js", "../node_modules/axios/lib/helpers/speedometer.js", "../node_modules/axios/lib/adapters/xhr.js", "../node_modules/axios/lib/adapters/adapters.js", "../node_modules/axios/lib/core/dispatchRequest.js", "../node_modules/axios/lib/core/mergeConfig.js", "../node_modules/axios/lib/env/data.js", "../node_modules/axios/lib/helpers/validator.js", "../node_modules/axios/lib/core/Axios.js", "../node_modules/axios/lib/cancel/CancelToken.js", "../node_modules/axios/lib/helpers/spread.js", "../node_modules/axios/lib/helpers/isAxiosError.js", "../node_modules/axios/lib/helpers/HttpStatusCode.js", "../node_modules/axios/lib/axios.js", "../package.json", "../src/quickbase.ts"],
  "sourcesContent": ["'use strict';\n\nvar isMergeableObject = function isMergeableObject(value) {\n\treturn isNonNullObject(value)\n\t\t&& !isSpecial(value)\n};\n\nfunction isNonNullObject(value) {\n\treturn !!value && typeof value === 'object'\n}\n\nfunction isSpecial(value) {\n\tvar stringValue = Object.prototype.toString.call(value);\n\n\treturn stringValue === '[object RegExp]'\n\t\t|| stringValue === '[object Date]'\n\t\t|| isReactElement(value)\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n\treturn value.$$typeof === REACT_ELEMENT_TYPE\n}\n\nfunction emptyTarget(val) {\n\treturn Array.isArray(val) ? [] : {}\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n\treturn (options.clone !== false && options.isMergeableObject(value))\n\t\t? deepmerge(emptyTarget(value), value, options)\n\t\t: value\n}\n\nfunction defaultArrayMerge(target, source, options) {\n\treturn target.concat(source).map(function(element) {\n\t\treturn cloneUnlessOtherwiseSpecified(element, options)\n\t})\n}\n\nfunction getMergeFunction(key, options) {\n\tif (!options.customMerge) {\n\t\treturn deepmerge\n\t}\n\tvar customMerge = options.customMerge(key);\n\treturn typeof customMerge === 'function' ? customMerge : deepmerge\n}\n\nfunction getEnumerableOwnPropertySymbols(target) {\n\treturn Object.getOwnPropertySymbols\n\t\t? Object.getOwnPropertySymbols(target).filter(function(symbol) {\n\t\t\treturn Object.propertyIsEnumerable.call(target, symbol)\n\t\t})\n\t\t: []\n}\n\nfunction getKeys(target) {\n\treturn Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))\n}\n\nfunction propertyIsOnObject(object, property) {\n\ttry {\n\t\treturn property in object\n\t} catch(_) {\n\t\treturn false\n\t}\n}\n\n// Protects from prototype poisoning and unexpected merging up the prototype chain.\nfunction propertyIsUnsafe(target, key) {\n\treturn propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,\n\t\t&& !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,\n\t\t\t&& Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.\n}\n\nfunction mergeObject(target, source, options) {\n\tvar destination = {};\n\tif (options.isMergeableObject(target)) {\n\t\tgetKeys(target).forEach(function(key) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n\t\t});\n\t}\n\tgetKeys(source).forEach(function(key) {\n\t\tif (propertyIsUnsafe(target, key)) {\n\t\t\treturn\n\t\t}\n\n\t\tif (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {\n\t\t\tdestination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n\t\t} else {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n\t\t}\n\t});\n\treturn destination\n}\n\nfunction deepmerge(target, source, options) {\n\toptions = options || {};\n\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\n\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\n\t// cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()\n\t// implementations can use it. The caller may not replace it.\n\toptions.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;\n\n\tvar sourceIsArray = Array.isArray(source);\n\tvar targetIsArray = Array.isArray(target);\n\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\tif (!sourceAndTargetTypesMatch) {\n\t\treturn cloneUnlessOtherwiseSpecified(source, options)\n\t} else if (sourceIsArray) {\n\t\treturn options.arrayMerge(target, source, options)\n\t} else {\n\t\treturn mergeObject(target, source, options)\n\t}\n}\n\ndeepmerge.all = function deepmergeAll(array, options) {\n\tif (!Array.isArray(array)) {\n\t\tthrow new Error('first argument should be an array')\n\t}\n\n\treturn array.reduce(function(prev, next) {\n\t\treturn deepmerge(prev, next, options)\n\t}, {})\n};\n\nvar deepmerge_1 = deepmerge;\n\nmodule.exports = deepmerge_1;\n", "/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n", "\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = require('ms');\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\t\tlet namespacesCache;\n\t\tlet enabledCache;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => {\n\t\t\t\tif (enableOverride !== null) {\n\t\t\t\t\treturn enableOverride;\n\t\t\t\t}\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\n\t\t\t\t}\n\n\t\t\t\treturn enabledCache;\n\t\t\t},\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\t\tcreateDebug.namespaces = namespaces;\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n", "/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n", "'use strict';\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Throttle = void 0;\nvar Throttle = (function () {\n    function Throttle(requestsPerPeriod, periodLength, errorOnLimit, PromiseImplementation) {\n        if (requestsPerPeriod === void 0) { requestsPerPeriod = 10; }\n        if (periodLength === void 0) { periodLength = -1; }\n        if (errorOnLimit === void 0) { errorOnLimit = false; }\n        if (PromiseImplementation === void 0) { PromiseImplementation = Promise; }\n        this.requestsPerPeriod = requestsPerPeriod;\n        this.periodLength = periodLength;\n        this.errorOnLimit = errorOnLimit;\n        this.PromiseImplementation = PromiseImplementation;\n        this._tick = undefined;\n        this._nRequests = 0;\n        this._times = [];\n        this._pending = [];\n        return this;\n    }\n    Throttle.prototype._execute = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var active, results, _a, err_1;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        active = this._pending.shift();\n                        if (!active) {\n                            return [2];\n                        }\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 5, 6, 8]);\n                        ++this._nRequests;\n                        if (!active.fn) return [3, 3];\n                        return [4, active.fn()];\n                    case 2:\n                        _a = _b.sent();\n                        return [3, 4];\n                    case 3:\n                        _a = undefined;\n                        _b.label = 4;\n                    case 4:\n                        results = _a;\n                        --this._nRequests;\n                        active.resolve(results);\n                        return [3, 8];\n                    case 5:\n                        err_1 = _b.sent();\n                        --this._nRequests;\n                        active.reject(err_1);\n                        return [3, 8];\n                    case 6: return [4, this._testTick()];\n                    case 7:\n                        _b.sent();\n                        return [7];\n                    case 8: return [2];\n                }\n            });\n        });\n    };\n    Throttle.prototype._testTick = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var cutOff;\n            var _this = this;\n            return __generator(this, function (_a) {\n                if (this._pending.length === 0) {\n                    return [2];\n                }\n                if (this.periodLength === -1) {\n                    if (this._nRequests >= this.requestsPerPeriod) {\n                        if (this.errorOnLimit) {\n                            throw new Error('Throttle Maximum Reached');\n                        }\n                        return [2];\n                    }\n                    return [2, this._execute()];\n                }\n                cutOff = Date.now() - this.periodLength;\n                this._times = this._times.filter(function (time) {\n                    return time >= cutOff;\n                }).sort();\n                if (this._times.length < this.requestsPerPeriod) {\n                    this._times.push(Date.now());\n                    return [2, this._execute()];\n                }\n                if (this.errorOnLimit) {\n                    throw new Error('Throttle Maximum Reached');\n                }\n                if (this._tick) {\n                    clearTimeout(this._tick);\n                }\n                this._tick = setTimeout(function () {\n                    _this._testTick();\n                }, this._times[0] - cutOff);\n                return [2];\n            });\n        });\n    };\n    Throttle.prototype.acquire = function (fn) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                return [2, new this.PromiseImplementation(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {\n                        var err_2;\n                        return __generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0:\n                                    this._pending.push({\n                                        resolve: resolve,\n                                        reject: reject,\n                                        fn: fn\n                                    });\n                                    _a.label = 1;\n                                case 1:\n                                    _a.trys.push([1, 3, , 4]);\n                                    return [4, this._testTick()];\n                                case 2:\n                                    _a.sent();\n                                    return [3, 4];\n                                case 3:\n                                    err_2 = _a.sent();\n                                    reject(err_2);\n                                    return [3, 4];\n                                case 4: return [2];\n                            }\n                        });\n                    }); })];\n            });\n        });\n    };\n    Throttle.prototype.clear = function () {\n        this._pending.splice(0, this._pending.length);\n        return this;\n    };\n    Throttle.prototype.flush = function () {\n        return Promise.all(this._pending.splice(0, this._pending.length)\n            .map(function (pending) { return pending.resolve(); }));\n    };\n    return Throttle;\n}());\nexports.Throttle = Throttle;\nif (typeof (window) !== 'undefined') {\n    window.Throttle = Throttle;\n}\n", "'use strict';\n\nexport default function bind(fn, thisArg) {\n  return function wrap() {\n    return fn.apply(thisArg, arguments);\n  };\n}\n", "'use strict';\n\nimport bind from './helpers/bind.js';\n\n// utils is a library of generic helper functions non-specific to axios\n\nconst {toString} = Object.prototype;\nconst {getPrototypeOf} = Object;\n\nconst kindOf = (cache => thing => {\n    const str = toString.call(thing);\n    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());\n})(Object.create(null));\n\nconst kindOfTest = (type) => {\n  type = type.toLowerCase();\n  return (thing) => kindOf(thing) === type\n}\n\nconst typeOfTest = type => thing => typeof thing === type;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n *\n * @returns {boolean} True if value is an Array, otherwise false\n */\nconst {isArray} = Array;\n\n/**\n * Determine if a value is undefined\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nconst isUndefined = typeOfTest('undefined');\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nconst isArrayBuffer = kindOfTest('ArrayBuffer');\n\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  let result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a String, otherwise false\n */\nconst isString = typeOfTest('string');\n\n/**\n * Determine if a value is a Function\n *\n * @param {*} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nconst isFunction = typeOfTest('function');\n\n/**\n * Determine if a value is a Number\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Number, otherwise false\n */\nconst isNumber = typeOfTest('number');\n\n/**\n * Determine if a value is an Object\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an Object, otherwise false\n */\nconst isObject = (thing) => thing !== null && typeof thing === 'object';\n\n/**\n * Determine if a value is a Boolean\n *\n * @param {*} thing The value to test\n * @returns {boolean} True if value is a Boolean, otherwise false\n */\nconst isBoolean = thing => thing === true || thing === false;\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a plain Object, otherwise false\n */\nconst isPlainObject = (val) => {\n  if (kindOf(val) !== 'object') {\n    return false;\n  }\n\n  const prototype = getPrototypeOf(val);\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Date, otherwise false\n */\nconst isDate = kindOfTest('Date');\n\n/**\n * Determine if a value is a File\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFile = kindOfTest('File');\n\n/**\n * Determine if a value is a Blob\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nconst isBlob = kindOfTest('Blob');\n\n/**\n * Determine if a value is a FileList\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFileList = kindOfTest('FileList');\n\n/**\n * Determine if a value is a Stream\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nconst isStream = (val) => isObject(val) && isFunction(val.pipe);\n\n/**\n * Determine if a value is a FormData\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nconst isFormData = (thing) => {\n  let kind;\n  return thing && (\n    (typeof FormData === 'function' && thing instanceof FormData) || (\n      isFunction(thing.append) && (\n        (kind = kindOf(thing)) === 'formdata' ||\n        // detect form-data instance\n        (kind === 'object' && isFunction(thing.toString) && thing.toString() === '[object FormData]')\n      )\n    )\n  )\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nconst isURLSearchParams = kindOfTest('URLSearchParams');\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n *\n * @returns {String} The String freed of excess whitespace\n */\nconst trim = (str) => str.trim ?\n  str.trim() : str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n *\n * @param {Boolean} [allOwnKeys = false]\n * @returns {any}\n */\nfunction forEach(obj, fn, {allOwnKeys = false} = {}) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  let i;\n  let l;\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);\n    const len = keys.length;\n    let key;\n\n    for (i = 0; i < len; i++) {\n      key = keys[i];\n      fn.call(null, obj[key], key, obj);\n    }\n  }\n}\n\nfunction findKey(obj, key) {\n  key = key.toLowerCase();\n  const keys = Object.keys(obj);\n  let i = keys.length;\n  let _key;\n  while (i-- > 0) {\n    _key = keys[i];\n    if (key === _key.toLowerCase()) {\n      return _key;\n    }\n  }\n  return null;\n}\n\nconst _global = (() => {\n  /*eslint no-undef:0*/\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  return typeof self !== \"undefined\" ? self : (typeof window !== 'undefined' ? window : global)\n})();\n\nconst isContextDefined = (context) => !isUndefined(context) && context !== _global;\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n *\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  const {caseless} = isContextDefined(this) && this || {};\n  const result = {};\n  const assignValue = (val, key) => {\n    const targetKey = caseless && findKey(result, key) || key;\n    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {\n      result[targetKey] = merge(result[targetKey], val);\n    } else if (isPlainObject(val)) {\n      result[targetKey] = merge({}, val);\n    } else if (isArray(val)) {\n      result[targetKey] = val.slice();\n    } else {\n      result[targetKey] = val;\n    }\n  }\n\n  for (let i = 0, l = arguments.length; i < l; i++) {\n    arguments[i] && forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n *\n * @param {Boolean} [allOwnKeys]\n * @returns {Object} The resulting value of object a\n */\nconst extend = (a, b, thisArg, {allOwnKeys}= {}) => {\n  forEach(b, (val, key) => {\n    if (thisArg && isFunction(val)) {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  }, {allOwnKeys});\n  return a;\n}\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n *\n * @returns {string} content value without BOM\n */\nconst stripBOM = (content) => {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\n/**\n * Inherit the prototype methods from one constructor into another\n * @param {function} constructor\n * @param {function} superConstructor\n * @param {object} [props]\n * @param {object} [descriptors]\n *\n * @returns {void}\n */\nconst inherits = (constructor, superConstructor, props, descriptors) => {\n  constructor.prototype = Object.create(superConstructor.prototype, descriptors);\n  constructor.prototype.constructor = constructor;\n  Object.defineProperty(constructor, 'super', {\n    value: superConstructor.prototype\n  });\n  props && Object.assign(constructor.prototype, props);\n}\n\n/**\n * Resolve object with deep prototype chain to a flat object\n * @param {Object} sourceObj source object\n * @param {Object} [destObj]\n * @param {Function|Boolean} [filter]\n * @param {Function} [propFilter]\n *\n * @returns {Object}\n */\nconst toFlatObject = (sourceObj, destObj, filter, propFilter) => {\n  let props;\n  let i;\n  let prop;\n  const merged = {};\n\n  destObj = destObj || {};\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  if (sourceObj == null) return destObj;\n\n  do {\n    props = Object.getOwnPropertyNames(sourceObj);\n    i = props.length;\n    while (i-- > 0) {\n      prop = props[i];\n      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {\n        destObj[prop] = sourceObj[prop];\n        merged[prop] = true;\n      }\n    }\n    sourceObj = filter !== false && getPrototypeOf(sourceObj);\n  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);\n\n  return destObj;\n}\n\n/**\n * Determines whether a string ends with the characters of a specified string\n *\n * @param {String} str\n * @param {String} searchString\n * @param {Number} [position= 0]\n *\n * @returns {boolean}\n */\nconst endsWith = (str, searchString, position) => {\n  str = String(str);\n  if (position === undefined || position > str.length) {\n    position = str.length;\n  }\n  position -= searchString.length;\n  const lastIndex = str.indexOf(searchString, position);\n  return lastIndex !== -1 && lastIndex === position;\n}\n\n\n/**\n * Returns new array from array like object or null if failed\n *\n * @param {*} [thing]\n *\n * @returns {?Array}\n */\nconst toArray = (thing) => {\n  if (!thing) return null;\n  if (isArray(thing)) return thing;\n  let i = thing.length;\n  if (!isNumber(i)) return null;\n  const arr = new Array(i);\n  while (i-- > 0) {\n    arr[i] = thing[i];\n  }\n  return arr;\n}\n\n/**\n * Checking if the Uint8Array exists and if it does, it returns a function that checks if the\n * thing passed in is an instance of Uint8Array\n *\n * @param {TypedArray}\n *\n * @returns {Array}\n */\n// eslint-disable-next-line func-names\nconst isTypedArray = (TypedArray => {\n  // eslint-disable-next-line func-names\n  return thing => {\n    return TypedArray && thing instanceof TypedArray;\n  };\n})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));\n\n/**\n * For each entry in the object, call the function with the key and value.\n *\n * @param {Object<any, any>} obj - The object to iterate over.\n * @param {Function} fn - The function to call for each entry.\n *\n * @returns {void}\n */\nconst forEachEntry = (obj, fn) => {\n  const generator = obj && obj[Symbol.iterator];\n\n  const iterator = generator.call(obj);\n\n  let result;\n\n  while ((result = iterator.next()) && !result.done) {\n    const pair = result.value;\n    fn.call(obj, pair[0], pair[1]);\n  }\n}\n\n/**\n * It takes a regular expression and a string, and returns an array of all the matches\n *\n * @param {string} regExp - The regular expression to match against.\n * @param {string} str - The string to search.\n *\n * @returns {Array<boolean>}\n */\nconst matchAll = (regExp, str) => {\n  let matches;\n  const arr = [];\n\n  while ((matches = regExp.exec(str)) !== null) {\n    arr.push(matches);\n  }\n\n  return arr;\n}\n\n/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */\nconst isHTMLForm = kindOfTest('HTMLFormElement');\n\nconst toCamelCase = str => {\n  return str.toLowerCase().replace(/[-_\\s]([a-z\\d])(\\w*)/g,\n    function replacer(m, p1, p2) {\n      return p1.toUpperCase() + p2;\n    }\n  );\n};\n\n/* Creating a function that will check if an object has a property. */\nconst hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);\n\n/**\n * Determine if a value is a RegExp object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a RegExp object, otherwise false\n */\nconst isRegExp = kindOfTest('RegExp');\n\nconst reduceDescriptors = (obj, reducer) => {\n  const descriptors = Object.getOwnPropertyDescriptors(obj);\n  const reducedDescriptors = {};\n\n  forEach(descriptors, (descriptor, name) => {\n    let ret;\n    if ((ret = reducer(descriptor, name, obj)) !== false) {\n      reducedDescriptors[name] = ret || descriptor;\n    }\n  });\n\n  Object.defineProperties(obj, reducedDescriptors);\n}\n\n/**\n * Makes all methods read-only\n * @param {Object} obj\n */\n\nconst freezeMethods = (obj) => {\n  reduceDescriptors(obj, (descriptor, name) => {\n    // skip restricted props in strict mode\n    if (isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {\n      return false;\n    }\n\n    const value = obj[name];\n\n    if (!isFunction(value)) return;\n\n    descriptor.enumerable = false;\n\n    if ('writable' in descriptor) {\n      descriptor.writable = false;\n      return;\n    }\n\n    if (!descriptor.set) {\n      descriptor.set = () => {\n        throw Error('Can not rewrite read-only method \\'' + name + '\\'');\n      };\n    }\n  });\n}\n\nconst toObjectSet = (arrayOrString, delimiter) => {\n  const obj = {};\n\n  const define = (arr) => {\n    arr.forEach(value => {\n      obj[value] = true;\n    });\n  }\n\n  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));\n\n  return obj;\n}\n\nconst noop = () => {}\n\nconst toFiniteNumber = (value, defaultValue) => {\n  value = +value;\n  return Number.isFinite(value) ? value : defaultValue;\n}\n\nconst ALPHA = 'abcdefghijklmnopqrstuvwxyz'\n\nconst DIGIT = '0123456789';\n\nconst ALPHABET = {\n  DIGIT,\n  ALPHA,\n  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT\n}\n\nconst generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {\n  let str = '';\n  const {length} = alphabet;\n  while (size--) {\n    str += alphabet[Math.random() * length|0]\n  }\n\n  return str;\n}\n\n/**\n * If the thing is a FormData object, return true, otherwise return false.\n *\n * @param {unknown} thing - The thing to check.\n *\n * @returns {boolean}\n */\nfunction isSpecCompliantForm(thing) {\n  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator]);\n}\n\nconst toJSONObject = (obj) => {\n  const stack = new Array(10);\n\n  const visit = (source, i) => {\n\n    if (isObject(source)) {\n      if (stack.indexOf(source) >= 0) {\n        return;\n      }\n\n      if(!('toJSON' in source)) {\n        stack[i] = source;\n        const target = isArray(source) ? [] : {};\n\n        forEach(source, (value, key) => {\n          const reducedValue = visit(value, i + 1);\n          !isUndefined(reducedValue) && (target[key] = reducedValue);\n        });\n\n        stack[i] = undefined;\n\n        return target;\n      }\n    }\n\n    return source;\n  }\n\n  return visit(obj, 0);\n}\n\nconst isAsyncFn = kindOfTest('AsyncFunction');\n\nconst isThenable = (thing) =>\n  thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);\n\nexport default {\n  isArray,\n  isArrayBuffer,\n  isBuffer,\n  isFormData,\n  isArrayBufferView,\n  isString,\n  isNumber,\n  isBoolean,\n  isObject,\n  isPlainObject,\n  isUndefined,\n  isDate,\n  isFile,\n  isBlob,\n  isRegExp,\n  isFunction,\n  isStream,\n  isURLSearchParams,\n  isTypedArray,\n  isFileList,\n  forEach,\n  merge,\n  extend,\n  trim,\n  stripBOM,\n  inherits,\n  toFlatObject,\n  kindOf,\n  kindOfTest,\n  endsWith,\n  toArray,\n  forEachEntry,\n  matchAll,\n  isHTMLForm,\n  hasOwnProperty,\n  hasOwnProp: hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection\n  reduceDescriptors,\n  freezeMethods,\n  toObjectSet,\n  toCamelCase,\n  noop,\n  toFiniteNumber,\n  findKey,\n  global: _global,\n  isContextDefined,\n  ALPHABET,\n  generateString,\n  isSpecCompliantForm,\n  toJSONObject,\n  isAsyncFn,\n  isThenable\n};\n", "'use strict';\n\nimport utils from '../utils.js';\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [config] The config.\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n *\n * @returns {Error} The created error.\n */\nfunction AxiosError(message, code, config, request, response) {\n  Error.call(this);\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, this.constructor);\n  } else {\n    this.stack = (new Error()).stack;\n  }\n\n  this.message = message;\n  this.name = 'AxiosError';\n  code && (this.code = code);\n  config && (this.config = config);\n  request && (this.request = request);\n  response && (this.response = response);\n}\n\nutils.inherits(AxiosError, Error, {\n  toJSON: function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: utils.toJSONObject(this.config),\n      code: this.code,\n      status: this.response && this.response.status ? this.response.status : null\n    };\n  }\n});\n\nconst prototype = AxiosError.prototype;\nconst descriptors = {};\n\n[\n  'ERR_BAD_OPTION_VALUE',\n  'ERR_BAD_OPTION',\n  'ECONNABORTED',\n  'ETIMEDOUT',\n  'ERR_NETWORK',\n  'ERR_FR_TOO_MANY_REDIRECTS',\n  'ERR_DEPRECATED',\n  'ERR_BAD_RESPONSE',\n  'ERR_BAD_REQUEST',\n  'ERR_CANCELED',\n  'ERR_NOT_SUPPORT',\n  'ERR_INVALID_URL'\n// eslint-disable-next-line func-names\n].forEach(code => {\n  descriptors[code] = {value: code};\n});\n\nObject.defineProperties(AxiosError, descriptors);\nObject.defineProperty(prototype, 'isAxiosError', {value: true});\n\n// eslint-disable-next-line func-names\nAxiosError.from = (error, code, config, request, response, customProps) => {\n  const axiosError = Object.create(prototype);\n\n  utils.toFlatObject(error, axiosError, function filter(obj) {\n    return obj !== Error.prototype;\n  }, prop => {\n    return prop !== 'isAxiosError';\n  });\n\n  AxiosError.call(axiosError, error.message, code, config, request, response);\n\n  axiosError.cause = error;\n\n  axiosError.name = error.name;\n\n  customProps && Object.assign(axiosError, customProps);\n\n  return axiosError;\n};\n\nexport default AxiosError;\n", "// eslint-disable-next-line strict\nexport default null;\n", "'use strict';\n\nimport utils from '../utils.js';\nimport AxiosError from '../core/AxiosError.js';\n// temporary hotfix to avoid circular references until AxiosURLSearchParams is refactored\nimport PlatformFormData from '../platform/node/classes/FormData.js';\n\n/**\n * Determines if the given thing is a array or js object.\n *\n * @param {string} thing - The object or array to be visited.\n *\n * @returns {boolean}\n */\nfunction isVisitable(thing) {\n  return utils.isPlainObject(thing) || utils.isArray(thing);\n}\n\n/**\n * It removes the brackets from the end of a string\n *\n * @param {string} key - The key of the parameter.\n *\n * @returns {string} the key without the brackets.\n */\nfunction removeBrackets(key) {\n  return utils.endsWith(key, '[]') ? key.slice(0, -2) : key;\n}\n\n/**\n * It takes a path, a key, and a boolean, and returns a string\n *\n * @param {string} path - The path to the current key.\n * @param {string} key - The key of the current object being iterated over.\n * @param {string} dots - If true, the key will be rendered with dots instead of brackets.\n *\n * @returns {string} The path to the current key.\n */\nfunction renderKey(path, key, dots) {\n  if (!path) return key;\n  return path.concat(key).map(function each(token, i) {\n    // eslint-disable-next-line no-param-reassign\n    token = removeBrackets(token);\n    return !dots && i ? '[' + token + ']' : token;\n  }).join(dots ? '.' : '');\n}\n\n/**\n * If the array is an array and none of its elements are visitable, then it's a flat array.\n *\n * @param {Array<any>} arr - The array to check\n *\n * @returns {boolean}\n */\nfunction isFlatArray(arr) {\n  return utils.isArray(arr) && !arr.some(isVisitable);\n}\n\nconst predicates = utils.toFlatObject(utils, {}, null, function filter(prop) {\n  return /^is[A-Z]/.test(prop);\n});\n\n/**\n * Convert a data object to FormData\n *\n * @param {Object} obj\n * @param {?Object} [formData]\n * @param {?Object} [options]\n * @param {Function} [options.visitor]\n * @param {Boolean} [options.metaTokens = true]\n * @param {Boolean} [options.dots = false]\n * @param {?Boolean} [options.indexes = false]\n *\n * @returns {Object}\n **/\n\n/**\n * It converts an object into a FormData object\n *\n * @param {Object<any, any>} obj - The object to convert to form data.\n * @param {string} formData - The FormData object to append to.\n * @param {Object<string, any>} options\n *\n * @returns\n */\nfunction toFormData(obj, formData, options) {\n  if (!utils.isObject(obj)) {\n    throw new TypeError('target must be an object');\n  }\n\n  // eslint-disable-next-line no-param-reassign\n  formData = formData || new (PlatformFormData || FormData)();\n\n  // eslint-disable-next-line no-param-reassign\n  options = utils.toFlatObject(options, {\n    metaTokens: true,\n    dots: false,\n    indexes: false\n  }, false, function defined(option, source) {\n    // eslint-disable-next-line no-eq-null,eqeqeq\n    return !utils.isUndefined(source[option]);\n  });\n\n  const metaTokens = options.metaTokens;\n  // eslint-disable-next-line no-use-before-define\n  const visitor = options.visitor || defaultVisitor;\n  const dots = options.dots;\n  const indexes = options.indexes;\n  const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;\n  const useBlob = _Blob && utils.isSpecCompliantForm(formData);\n\n  if (!utils.isFunction(visitor)) {\n    throw new TypeError('visitor must be a function');\n  }\n\n  function convertValue(value) {\n    if (value === null) return '';\n\n    if (utils.isDate(value)) {\n      return value.toISOString();\n    }\n\n    if (!useBlob && utils.isBlob(value)) {\n      throw new AxiosError('Blob is not supported. Use a Buffer instead.');\n    }\n\n    if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {\n      return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);\n    }\n\n    return value;\n  }\n\n  /**\n   * Default visitor.\n   *\n   * @param {*} value\n   * @param {String|Number} key\n   * @param {Array<String|Number>} path\n   * @this {FormData}\n   *\n   * @returns {boolean} return true to visit the each prop of the value recursively\n   */\n  function defaultVisitor(value, key, path) {\n    let arr = value;\n\n    if (value && !path && typeof value === 'object') {\n      if (utils.endsWith(key, '{}')) {\n        // eslint-disable-next-line no-param-reassign\n        key = metaTokens ? key : key.slice(0, -2);\n        // eslint-disable-next-line no-param-reassign\n        value = JSON.stringify(value);\n      } else if (\n        (utils.isArray(value) && isFlatArray(value)) ||\n        ((utils.isFileList(value) || utils.endsWith(key, '[]')) && (arr = utils.toArray(value))\n        )) {\n        // eslint-disable-next-line no-param-reassign\n        key = removeBrackets(key);\n\n        arr.forEach(function each(el, index) {\n          !(utils.isUndefined(el) || el === null) && formData.append(\n            // eslint-disable-next-line no-nested-ternary\n            indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),\n            convertValue(el)\n          );\n        });\n        return false;\n      }\n    }\n\n    if (isVisitable(value)) {\n      return true;\n    }\n\n    formData.append(renderKey(path, key, dots), convertValue(value));\n\n    return false;\n  }\n\n  const stack = [];\n\n  const exposedHelpers = Object.assign(predicates, {\n    defaultVisitor,\n    convertValue,\n    isVisitable\n  });\n\n  function build(value, path) {\n    if (utils.isUndefined(value)) return;\n\n    if (stack.indexOf(value) !== -1) {\n      throw Error('Circular reference detected in ' + path.join('.'));\n    }\n\n    stack.push(value);\n\n    utils.forEach(value, function each(el, key) {\n      const result = !(utils.isUndefined(el) || el === null) && visitor.call(\n        formData, el, utils.isString(key) ? key.trim() : key, path, exposedHelpers\n      );\n\n      if (result === true) {\n        build(el, path ? path.concat(key) : [key]);\n      }\n    });\n\n    stack.pop();\n  }\n\n  if (!utils.isObject(obj)) {\n    throw new TypeError('data must be an object');\n  }\n\n  build(obj);\n\n  return formData;\n}\n\nexport default toFormData;\n", "'use strict';\n\nimport toFormData from './toFormData.js';\n\n/**\n * It encodes a string by replacing all characters that are not in the unreserved set with\n * their percent-encoded equivalents\n *\n * @param {string} str - The string to encode.\n *\n * @returns {string} The encoded string.\n */\nfunction encode(str) {\n  const charMap = {\n    '!': '%21',\n    \"'\": '%27',\n    '(': '%28',\n    ')': '%29',\n    '~': '%7E',\n    '%20': '+',\n    '%00': '\\x00'\n  };\n  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {\n    return charMap[match];\n  });\n}\n\n/**\n * It takes a params object and converts it to a FormData object\n *\n * @param {Object<string, any>} params - The parameters to be converted to a FormData object.\n * @param {Object<string, any>} options - The options object passed to the Axios constructor.\n *\n * @returns {void}\n */\nfunction AxiosURLSearchParams(params, options) {\n  this._pairs = [];\n\n  params && toFormData(params, this, options);\n}\n\nconst prototype = AxiosURLSearchParams.prototype;\n\nprototype.append = function append(name, value) {\n  this._pairs.push([name, value]);\n};\n\nprototype.toString = function toString(encoder) {\n  const _encode = encoder ? function(value) {\n    return encoder.call(this, value, encode);\n  } : encode;\n\n  return this._pairs.map(function each(pair) {\n    return _encode(pair[0]) + '=' + _encode(pair[1]);\n  }, '').join('&');\n};\n\nexport default AxiosURLSearchParams;\n", "'use strict';\n\nimport utils from '../utils.js';\nimport AxiosURLSearchParams from '../helpers/AxiosURLSearchParams.js';\n\n/**\n * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their\n * URI encoded counterparts\n *\n * @param {string} val The value to be encoded.\n *\n * @returns {string} The encoded value.\n */\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @param {?object} options\n *\n * @returns {string} The formatted url\n */\nexport default function buildURL(url, params, options) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n  \n  const _encode = options && options.encode || encode;\n\n  const serializeFn = options && options.serialize;\n\n  let serializedParams;\n\n  if (serializeFn) {\n    serializedParams = serializeFn(params, options);\n  } else {\n    serializedParams = utils.isURLSearchParams(params) ?\n      params.toString() :\n      new AxiosURLSearchParams(params, options).toString(_encode);\n  }\n\n  if (serializedParams) {\n    const hashmarkIndex = url.indexOf(\"#\");\n\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n}\n", "'use strict';\n\nimport utils from './../utils.js';\n\nclass InterceptorManager {\n  constructor() {\n    this.handlers = [];\n  }\n\n  /**\n   * Add a new interceptor to the stack\n   *\n   * @param {Function} fulfilled The function to handle `then` for a `Promise`\n   * @param {Function} rejected The function to handle `reject` for a `Promise`\n   *\n   * @return {Number} An ID used to remove interceptor later\n   */\n  use(fulfilled, rejected, options) {\n    this.handlers.push({\n      fulfilled,\n      rejected,\n      synchronous: options ? options.synchronous : false,\n      runWhen: options ? options.runWhen : null\n    });\n    return this.handlers.length - 1;\n  }\n\n  /**\n   * Remove an interceptor from the stack\n   *\n   * @param {Number} id The ID that was returned by `use`\n   *\n   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise\n   */\n  eject(id) {\n    if (this.handlers[id]) {\n      this.handlers[id] = null;\n    }\n  }\n\n  /**\n   * Clear all interceptors from the stack\n   *\n   * @returns {void}\n   */\n  clear() {\n    if (this.handlers) {\n      this.handlers = [];\n    }\n  }\n\n  /**\n   * Iterate over all the registered interceptors\n   *\n   * This method is particularly useful for skipping over any\n   * interceptors that may have become `null` calling `eject`.\n   *\n   * @param {Function} fn The function to call for each interceptor\n   *\n   * @returns {void}\n   */\n  forEach(fn) {\n    utils.forEach(this.handlers, function forEachHandler(h) {\n      if (h !== null) {\n        fn(h);\n      }\n    });\n  }\n}\n\nexport default InterceptorManager;\n", "'use strict';\n\nexport default {\n  silentJSONParsing: true,\n  forcedJSONParsing: true,\n  clarifyTimeoutError: false\n};\n", "'use strict';\n\nimport AxiosURLSearchParams from '../../../helpers/AxiosURLSearchParams.js';\nexport default typeof URLSearchParams !== 'undefined' ? URLSearchParams : AxiosURLSearchParams;\n", "'use strict';\n\nexport default typeof FormData !== 'undefined' ? FormData : null;\n", "'use strict'\n\nexport default typeof Blob !== 'undefined' ? Blob : null\n", "import URLSearchParams from './classes/URLSearchParams.js'\nimport FormData from './classes/FormData.js'\nimport Blob from './classes/Blob.js'\n\nexport default {\n  isBrowser: true,\n  classes: {\n    URLSearchParams,\n    FormData,\n    Blob\n  },\n  protocols: ['http', 'https', 'file', 'blob', 'url', 'data']\n};\n", "const hasBrowserEnv = typeof window !== 'undefined' && typeof document !== 'undefined';\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n *\n * @returns {boolean}\n */\nconst hasStandardBrowserEnv = (\n  (product) => {\n    return hasBrowserEnv && ['ReactNative', 'NativeScript', 'NS'].indexOf(product) < 0\n  })(typeof navigator !== 'undefined' && navigator.product);\n\n/**\n * Determine if we're running in a standard browser webWorker environment\n *\n * Although the `isStandardBrowserEnv` method indicates that\n * `allows axios to run in a web worker`, the WebWorker will still be\n * filtered out due to its judgment standard\n * `typeof window !== 'undefined' && typeof document !== 'undefined'`.\n * This leads to a problem when axios post `FormData` in webWorker\n */\nconst hasStandardBrowserWebWorkerEnv = (() => {\n  return (\n    typeof WorkerGlobalScope !== 'undefined' &&\n    // eslint-disable-next-line no-undef\n    self instanceof WorkerGlobalScope &&\n    typeof self.importScripts === 'function'\n  );\n})();\n\nexport {\n  hasBrowserEnv,\n  hasStandardBrowserWebWorkerEnv,\n  hasStandardBrowserEnv\n}\n", "import platform from './node/index.js';\nimport * as utils from './common/utils.js';\n\nexport default {\n  ...utils,\n  ...platform\n}\n", "'use strict';\n\nimport utils from '../utils.js';\nimport toFormData from './toFormData.js';\nimport platform from '../platform/index.js';\n\nexport default function toURLEncodedForm(data, options) {\n  return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({\n    visitor: function(value, key, path, helpers) {\n      if (platform.isNode && utils.isBuffer(value)) {\n        this.append(key, value.toString('base64'));\n        return false;\n      }\n\n      return helpers.defaultVisitor.apply(this, arguments);\n    }\n  }, options));\n}\n", "'use strict';\n\nimport utils from '../utils.js';\n\n/**\n * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']\n *\n * @param {string} name - The name of the property to get.\n *\n * @returns An array of strings.\n */\nfunction parsePropPath(name) {\n  // foo[x][y][z]\n  // foo.x.y.z\n  // foo-x-y-z\n  // foo x y z\n  return utils.matchAll(/\\w+|\\[(\\w*)]/g, name).map(match => {\n    return match[0] === '[]' ? '' : match[1] || match[0];\n  });\n}\n\n/**\n * Convert an array to an object.\n *\n * @param {Array<any>} arr - The array to convert to an object.\n *\n * @returns An object with the same keys and values as the array.\n */\nfunction arrayToObject(arr) {\n  const obj = {};\n  const keys = Object.keys(arr);\n  let i;\n  const len = keys.length;\n  let key;\n  for (i = 0; i < len; i++) {\n    key = keys[i];\n    obj[key] = arr[key];\n  }\n  return obj;\n}\n\n/**\n * It takes a FormData object and returns a JavaScript object\n *\n * @param {string} formData The FormData object to convert to JSON.\n *\n * @returns {Object<string, any> | null} The converted object.\n */\nfunction formDataToJSON(formData) {\n  function buildPath(path, value, target, index) {\n    let name = path[index++];\n\n    if (name === '__proto__') return true;\n\n    const isNumericKey = Number.isFinite(+name);\n    const isLast = index >= path.length;\n    name = !name && utils.isArray(target) ? target.length : name;\n\n    if (isLast) {\n      if (utils.hasOwnProp(target, name)) {\n        target[name] = [target[name], value];\n      } else {\n        target[name] = value;\n      }\n\n      return !isNumericKey;\n    }\n\n    if (!target[name] || !utils.isObject(target[name])) {\n      target[name] = [];\n    }\n\n    const result = buildPath(path, value, target[name], index);\n\n    if (result && utils.isArray(target[name])) {\n      target[name] = arrayToObject(target[name]);\n    }\n\n    return !isNumericKey;\n  }\n\n  if (utils.isFormData(formData) && utils.isFunction(formData.entries)) {\n    const obj = {};\n\n    utils.forEachEntry(formData, (name, value) => {\n      buildPath(parsePropPath(name), value, obj, 0);\n    });\n\n    return obj;\n  }\n\n  return null;\n}\n\nexport default formDataToJSON;\n", "'use strict';\n\nimport utils from '../utils.js';\nimport AxiosError from '../core/AxiosError.js';\nimport transitionalDefaults from './transitional.js';\nimport toFormData from '../helpers/toFormData.js';\nimport toURLEncodedForm from '../helpers/toURLEncodedForm.js';\nimport platform from '../platform/index.js';\nimport formDataToJSON from '../helpers/formDataToJSON.js';\n\n/**\n * It takes a string, tries to parse it, and if it fails, it returns the stringified version\n * of the input\n *\n * @param {any} rawValue - The value to be stringified.\n * @param {Function} parser - A function that parses a string into a JavaScript object.\n * @param {Function} encoder - A function that takes a value and returns a string.\n *\n * @returns {string} A stringified version of the rawValue.\n */\nfunction stringifySafely(rawValue, parser, encoder) {\n  if (utils.isString(rawValue)) {\n    try {\n      (parser || JSON.parse)(rawValue);\n      return utils.trim(rawValue);\n    } catch (e) {\n      if (e.name !== 'SyntaxError') {\n        throw e;\n      }\n    }\n  }\n\n  return (encoder || JSON.stringify)(rawValue);\n}\n\nconst defaults = {\n\n  transitional: transitionalDefaults,\n\n  adapter: ['xhr', 'http'],\n\n  transformRequest: [function transformRequest(data, headers) {\n    const contentType = headers.getContentType() || '';\n    const hasJSONContentType = contentType.indexOf('application/json') > -1;\n    const isObjectPayload = utils.isObject(data);\n\n    if (isObjectPayload && utils.isHTMLForm(data)) {\n      data = new FormData(data);\n    }\n\n    const isFormData = utils.isFormData(data);\n\n    if (isFormData) {\n      return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;\n    }\n\n    if (utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);\n      return data.toString();\n    }\n\n    let isFileList;\n\n    if (isObjectPayload) {\n      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {\n        return toURLEncodedForm(data, this.formSerializer).toString();\n      }\n\n      if ((isFileList = utils.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {\n        const _FormData = this.env && this.env.FormData;\n\n        return toFormData(\n          isFileList ? {'files[]': data} : data,\n          _FormData && new _FormData(),\n          this.formSerializer\n        );\n      }\n    }\n\n    if (isObjectPayload || hasJSONContentType ) {\n      headers.setContentType('application/json', false);\n      return stringifySafely(data);\n    }\n\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    const transitional = this.transitional || defaults.transitional;\n    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n    const JSONRequested = this.responseType === 'json';\n\n    if (data && utils.isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {\n      const silentJSONParsing = transitional && transitional.silentJSONParsing;\n      const strictJSONParsing = !silentJSONParsing && JSONRequested;\n\n      try {\n        return JSON.parse(data);\n      } catch (e) {\n        if (strictJSONParsing) {\n          if (e.name === 'SyntaxError') {\n            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n          }\n          throw e;\n        }\n      }\n    }\n\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  env: {\n    FormData: platform.classes.FormData,\n    Blob: platform.classes.Blob\n  },\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n\n  headers: {\n    common: {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': undefined\n    }\n  }\n};\n\nutils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch'], (method) => {\n  defaults.headers[method] = {};\n});\n\nexport default defaults;\n", "'use strict';\n\nimport utils from './../utils.js';\n\n// RawAxiosHeaders whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nconst ignoreDuplicateOf = utils.toObjectSet([\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n]);\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} rawHeaders Headers needing to be parsed\n *\n * @returns {Object} Headers parsed into an object\n */\nexport default rawHeaders => {\n  const parsed = {};\n  let key;\n  let val;\n  let i;\n\n  rawHeaders && rawHeaders.split('\\n').forEach(function parser(line) {\n    i = line.indexOf(':');\n    key = line.substring(0, i).trim().toLowerCase();\n    val = line.substring(i + 1).trim();\n\n    if (!key || (parsed[key] && ignoreDuplicateOf[key])) {\n      return;\n    }\n\n    if (key === 'set-cookie') {\n      if (parsed[key]) {\n        parsed[key].push(val);\n      } else {\n        parsed[key] = [val];\n      }\n    } else {\n      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n    }\n  });\n\n  return parsed;\n};\n", "'use strict';\n\nimport utils from '../utils.js';\nimport parseHeaders from '../helpers/parseHeaders.js';\n\nconst $internals = Symbol('internals');\n\nfunction normalizeHeader(header) {\n  return header && String(header).trim().toLowerCase();\n}\n\nfunction normalizeValue(value) {\n  if (value === false || value == null) {\n    return value;\n  }\n\n  return utils.isArray(value) ? value.map(normalizeValue) : String(value);\n}\n\nfunction parseTokens(str) {\n  const tokens = Object.create(null);\n  const tokensRE = /([^\\s,;=]+)\\s*(?:=\\s*([^,;]+))?/g;\n  let match;\n\n  while ((match = tokensRE.exec(str))) {\n    tokens[match[1]] = match[2];\n  }\n\n  return tokens;\n}\n\nconst isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());\n\nfunction matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {\n  if (utils.isFunction(filter)) {\n    return filter.call(this, value, header);\n  }\n\n  if (isHeaderNameFilter) {\n    value = header;\n  }\n\n  if (!utils.isString(value)) return;\n\n  if (utils.isString(filter)) {\n    return value.indexOf(filter) !== -1;\n  }\n\n  if (utils.isRegExp(filter)) {\n    return filter.test(value);\n  }\n}\n\nfunction formatHeader(header) {\n  return header.trim()\n    .toLowerCase().replace(/([a-z\\d])(\\w*)/g, (w, char, str) => {\n      return char.toUpperCase() + str;\n    });\n}\n\nfunction buildAccessors(obj, header) {\n  const accessorName = utils.toCamelCase(' ' + header);\n\n  ['get', 'set', 'has'].forEach(methodName => {\n    Object.defineProperty(obj, methodName + accessorName, {\n      value: function(arg1, arg2, arg3) {\n        return this[methodName].call(this, header, arg1, arg2, arg3);\n      },\n      configurable: true\n    });\n  });\n}\n\nclass AxiosHeaders {\n  constructor(headers) {\n    headers && this.set(headers);\n  }\n\n  set(header, valueOrRewrite, rewrite) {\n    const self = this;\n\n    function setHeader(_value, _header, _rewrite) {\n      const lHeader = normalizeHeader(_header);\n\n      if (!lHeader) {\n        throw new Error('header name must be a non-empty string');\n      }\n\n      const key = utils.findKey(self, lHeader);\n\n      if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {\n        self[key || _header] = normalizeValue(_value);\n      }\n    }\n\n    const setHeaders = (headers, _rewrite) =>\n      utils.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));\n\n    if (utils.isPlainObject(header) || header instanceof this.constructor) {\n      setHeaders(header, valueOrRewrite)\n    } else if(utils.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {\n      setHeaders(parseHeaders(header), valueOrRewrite);\n    } else {\n      header != null && setHeader(valueOrRewrite, header, rewrite);\n    }\n\n    return this;\n  }\n\n  get(header, parser) {\n    header = normalizeHeader(header);\n\n    if (header) {\n      const key = utils.findKey(this, header);\n\n      if (key) {\n        const value = this[key];\n\n        if (!parser) {\n          return value;\n        }\n\n        if (parser === true) {\n          return parseTokens(value);\n        }\n\n        if (utils.isFunction(parser)) {\n          return parser.call(this, value, key);\n        }\n\n        if (utils.isRegExp(parser)) {\n          return parser.exec(value);\n        }\n\n        throw new TypeError('parser must be boolean|regexp|function');\n      }\n    }\n  }\n\n  has(header, matcher) {\n    header = normalizeHeader(header);\n\n    if (header) {\n      const key = utils.findKey(this, header);\n\n      return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));\n    }\n\n    return false;\n  }\n\n  delete(header, matcher) {\n    const self = this;\n    let deleted = false;\n\n    function deleteHeader(_header) {\n      _header = normalizeHeader(_header);\n\n      if (_header) {\n        const key = utils.findKey(self, _header);\n\n        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {\n          delete self[key];\n\n          deleted = true;\n        }\n      }\n    }\n\n    if (utils.isArray(header)) {\n      header.forEach(deleteHeader);\n    } else {\n      deleteHeader(header);\n    }\n\n    return deleted;\n  }\n\n  clear(matcher) {\n    const keys = Object.keys(this);\n    let i = keys.length;\n    let deleted = false;\n\n    while (i--) {\n      const key = keys[i];\n      if(!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {\n        delete this[key];\n        deleted = true;\n      }\n    }\n\n    return deleted;\n  }\n\n  normalize(format) {\n    const self = this;\n    const headers = {};\n\n    utils.forEach(this, (value, header) => {\n      const key = utils.findKey(headers, header);\n\n      if (key) {\n        self[key] = normalizeValue(value);\n        delete self[header];\n        return;\n      }\n\n      const normalized = format ? formatHeader(header) : String(header).trim();\n\n      if (normalized !== header) {\n        delete self[header];\n      }\n\n      self[normalized] = normalizeValue(value);\n\n      headers[normalized] = true;\n    });\n\n    return this;\n  }\n\n  concat(...targets) {\n    return this.constructor.concat(this, ...targets);\n  }\n\n  toJSON(asStrings) {\n    const obj = Object.create(null);\n\n    utils.forEach(this, (value, header) => {\n      value != null && value !== false && (obj[header] = asStrings && utils.isArray(value) ? value.join(', ') : value);\n    });\n\n    return obj;\n  }\n\n  [Symbol.iterator]() {\n    return Object.entries(this.toJSON())[Symbol.iterator]();\n  }\n\n  toString() {\n    return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\\n');\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'AxiosHeaders';\n  }\n\n  static from(thing) {\n    return thing instanceof this ? thing : new this(thing);\n  }\n\n  static concat(first, ...targets) {\n    const computed = new this(first);\n\n    targets.forEach((target) => computed.set(target));\n\n    return computed;\n  }\n\n  static accessor(header) {\n    const internals = this[$internals] = (this[$internals] = {\n      accessors: {}\n    });\n\n    const accessors = internals.accessors;\n    const prototype = this.prototype;\n\n    function defineAccessor(_header) {\n      const lHeader = normalizeHeader(_header);\n\n      if (!accessors[lHeader]) {\n        buildAccessors(prototype, _header);\n        accessors[lHeader] = true;\n      }\n    }\n\n    utils.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);\n\n    return this;\n  }\n}\n\nAxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);\n\n// reserved names hotfix\nutils.reduceDescriptors(AxiosHeaders.prototype, ({value}, key) => {\n  let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`\n  return {\n    get: () => value,\n    set(headerValue) {\n      this[mapped] = headerValue;\n    }\n  }\n});\n\nutils.freezeMethods(AxiosHeaders);\n\nexport default AxiosHeaders;\n", "'use strict';\n\nimport utils from './../utils.js';\nimport defaults from '../defaults/index.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Array|Function} fns A single function or Array of functions\n * @param {?Object} response The response object\n *\n * @returns {*} The resulting transformed data\n */\nexport default function transformData(fns, response) {\n  const config = this || defaults;\n  const context = response || config;\n  const headers = AxiosHeaders.from(context.headers);\n  let data = context.data;\n\n  utils.forEach(fns, function transform(fn) {\n    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);\n  });\n\n  headers.normalize();\n\n  return data;\n}\n", "'use strict';\n\nexport default function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n}\n", "'use strict';\n\nimport AxiosError from '../core/AxiosError.js';\nimport utils from '../utils.js';\n\n/**\n * A `CanceledError` is an object that is thrown when an operation is canceled.\n *\n * @param {string=} message The message.\n * @param {Object=} config The config.\n * @param {Object=} request The request.\n *\n * @returns {CanceledError} The created error.\n */\nfunction CanceledError(message, config, request) {\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  AxiosError.call(this, message == null ? 'canceled' : message, AxiosError.ERR_CANCELED, config, request);\n  this.name = 'CanceledError';\n}\n\nutils.inherits(CanceledError, AxiosError, {\n  __CANCEL__: true\n});\n\nexport default CanceledError;\n", "'use strict';\n\nimport AxiosError from './AxiosError.js';\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n *\n * @returns {object} The response.\n */\nexport default function settle(resolve, reject, response) {\n  const validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(new AxiosError(\n      'Request failed with status code ' + response.status,\n      [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],\n      response.config,\n      response.request,\n      response\n    ));\n  }\n}\n", "import utils from './../utils.js';\nimport platform from '../platform/index.js';\n\nexport default platform.hasStandardBrowserEnv ?\n\n  // Standard browser envs support document.cookie\n  {\n    write(name, value, expires, path, domain, secure) {\n      const cookie = [name + '=' + encodeURIComponent(value)];\n\n      utils.isNumber(expires) && cookie.push('expires=' + new Date(expires).toGMTString());\n\n      utils.isString(path) && cookie.push('path=' + path);\n\n      utils.isString(domain) && cookie.push('domain=' + domain);\n\n      secure === true && cookie.push('secure');\n\n      document.cookie = cookie.join('; ');\n    },\n\n    read(name) {\n      const match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n      return (match ? decodeURIComponent(match[3]) : null);\n    },\n\n    remove(name) {\n      this.write(name, '', Date.now() - 86400000);\n    }\n  }\n\n  :\n\n  // Non-standard browser env (web workers, react-native) lack needed support.\n  {\n    write() {},\n    read() {\n      return null;\n    },\n    remove() {}\n  };\n\n", "'use strict';\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n *\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nexport default function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(url);\n}\n", "'use strict';\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n *\n * @returns {string} The combined URL\n */\nexport default function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/?\\/$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n}\n", "'use strict';\n\nimport isAbsoluteURL from '../helpers/isAbsoluteURL.js';\nimport combineURLs from '../helpers/combineURLs.js';\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n *\n * @returns {string} The combined full path\n */\nexport default function buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n}\n", "'use strict';\n\nimport utils from './../utils.js';\nimport platform from '../platform/index.js';\n\nexport default platform.hasStandardBrowserEnv ?\n\n// Standard browser envs have full support of the APIs needed to test\n// whether the request URL is of the same origin as current location.\n  (function standardBrowserEnv() {\n    const msie = /(msie|trident)/i.test(navigator.userAgent);\n    const urlParsingNode = document.createElement('a');\n    let originURL;\n\n    /**\n    * Parse a URL to discover its components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n    function resolveURL(url) {\n      let href = url;\n\n      if (msie) {\n        // IE needs attribute set twice to normalize properties\n        urlParsingNode.setAttribute('href', href);\n        href = urlParsingNode.href;\n      }\n\n      urlParsingNode.setAttribute('href', href);\n\n      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n      return {\n        href: urlParsingNode.href,\n        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n        host: urlParsingNode.host,\n        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n        hostname: urlParsingNode.hostname,\n        port: urlParsingNode.port,\n        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n          urlParsingNode.pathname :\n          '/' + urlParsingNode.pathname\n      };\n    }\n\n    originURL = resolveURL(window.location.href);\n\n    /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n    return function isURLSameOrigin(requestURL) {\n      const parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n      return (parsed.protocol === originURL.protocol &&\n          parsed.host === originURL.host);\n    };\n  })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return function isURLSameOrigin() {\n      return true;\n    };\n  })();\n", "'use strict';\n\nexport default function parseProtocol(url) {\n  const match = /^([-+\\w]{1,25})(:?\\/\\/|:)/.exec(url);\n  return match && match[1] || '';\n}\n", "'use strict';\n\n/**\n * Calculate data maxRate\n * @param {Number} [samplesCount= 10]\n * @param {Number} [min= 1000]\n * @returns {Function}\n */\nfunction speedometer(samplesCount, min) {\n  samplesCount = samplesCount || 10;\n  const bytes = new Array(samplesCount);\n  const timestamps = new Array(samplesCount);\n  let head = 0;\n  let tail = 0;\n  let firstSampleTS;\n\n  min = min !== undefined ? min : 1000;\n\n  return function push(chunkLength) {\n    const now = Date.now();\n\n    const startedAt = timestamps[tail];\n\n    if (!firstSampleTS) {\n      firstSampleTS = now;\n    }\n\n    bytes[head] = chunkLength;\n    timestamps[head] = now;\n\n    let i = tail;\n    let bytesCount = 0;\n\n    while (i !== head) {\n      bytesCount += bytes[i++];\n      i = i % samplesCount;\n    }\n\n    head = (head + 1) % samplesCount;\n\n    if (head === tail) {\n      tail = (tail + 1) % samplesCount;\n    }\n\n    if (now - firstSampleTS < min) {\n      return;\n    }\n\n    const passed = startedAt && now - startedAt;\n\n    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;\n  };\n}\n\nexport default speedometer;\n", "'use strict';\n\nimport utils from './../utils.js';\nimport settle from './../core/settle.js';\nimport cookies from './../helpers/cookies.js';\nimport buildURL from './../helpers/buildURL.js';\nimport buildFullPath from '../core/buildFullPath.js';\nimport isURLSameOrigin from './../helpers/isURLSameOrigin.js';\nimport transitionalDefaults from '../defaults/transitional.js';\nimport AxiosError from '../core/AxiosError.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport parseProtocol from '../helpers/parseProtocol.js';\nimport platform from '../platform/index.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport speedometer from '../helpers/speedometer.js';\n\nfunction progressEventReducer(listener, isDownloadStream) {\n  let bytesNotified = 0;\n  const _speedometer = speedometer(50, 250);\n\n  return e => {\n    const loaded = e.loaded;\n    const total = e.lengthComputable ? e.total : undefined;\n    const progressBytes = loaded - bytesNotified;\n    const rate = _speedometer(progressBytes);\n    const inRange = loaded <= total;\n\n    bytesNotified = loaded;\n\n    const data = {\n      loaded,\n      total,\n      progress: total ? (loaded / total) : undefined,\n      bytes: progressBytes,\n      rate: rate ? rate : undefined,\n      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,\n      event: e\n    };\n\n    data[isDownloadStream ? 'download' : 'upload'] = true;\n\n    listener(data);\n  };\n}\n\nconst isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';\n\nexport default isXHRAdapterSupported && function (config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    let requestData = config.data;\n    const requestHeaders = AxiosHeaders.from(config.headers).normalize();\n    let {responseType, withXSRFToken} = config;\n    let onCanceled;\n    function done() {\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(onCanceled);\n      }\n\n      if (config.signal) {\n        config.signal.removeEventListener('abort', onCanceled);\n      }\n    }\n\n    let contentType;\n\n    if (utils.isFormData(requestData)) {\n      if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {\n        requestHeaders.setContentType(false); // Let the browser set it\n      } else if ((contentType = requestHeaders.getContentType()) !== false) {\n        // fix semicolon duplication issue for ReactNative FormData implementation\n        const [type, ...tokens] = contentType ? contentType.split(';').map(token => token.trim()).filter(Boolean) : [];\n        requestHeaders.setContentType([type || 'multipart/form-data', ...tokens].join('; '));\n      }\n    }\n\n    let request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      const username = config.auth.username || '';\n      const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';\n      requestHeaders.set('Authorization', 'Basic ' + btoa(username + ':' + password));\n    }\n\n    const fullPath = buildFullPath(config.baseURL, config.url);\n\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      const responseHeaders = AxiosHeaders.from(\n        'getAllResponseHeaders' in request && request.getAllResponseHeaders()\n      );\n      const responseData = !responseType || responseType === 'text' || responseType === 'json' ?\n        request.responseText : request.response;\n      const response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config,\n        request\n      };\n\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response);\n\n      // Clean up request\n      request = null;\n    }\n\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      let timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';\n      const transitional = config.transitional || transitionalDefaults;\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(new AxiosError(\n        timeoutErrorMessage,\n        transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,\n        config,\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if(platform.hasStandardBrowserEnv) {\n      withXSRFToken && utils.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(config));\n\n      if (withXSRFToken || (withXSRFToken !== false && isURLSameOrigin(fullPath))) {\n        // Add xsrf header\n        const xsrfValue = config.xsrfHeaderName && config.xsrfCookieName && cookies.read(config.xsrfCookieName);\n\n        if (xsrfValue) {\n          requestHeaders.set(config.xsrfHeaderName, xsrfValue);\n        }\n      }\n    }\n\n    // Remove Content-Type if data is undefined\n    requestData === undefined && requestHeaders.setContentType(null);\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {\n        request.setRequestHeader(key, val);\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== 'json') {\n      request.responseType = config.responseType;\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', progressEventReducer(config.onDownloadProgress, true));\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', progressEventReducer(config.onUploadProgress));\n    }\n\n    if (config.cancelToken || config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = cancel => {\n        if (!request) {\n          return;\n        }\n        reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);\n        request.abort();\n        request = null;\n      };\n\n      config.cancelToken && config.cancelToken.subscribe(onCanceled);\n      if (config.signal) {\n        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n\n    const protocol = parseProtocol(fullPath);\n\n    if (protocol && platform.protocols.indexOf(protocol) === -1) {\n      reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));\n      return;\n    }\n\n\n    // Send the request\n    request.send(requestData || null);\n  });\n}\n", "import utils from '../utils.js';\nimport httpAdapter from './http.js';\nimport xhrAdapter from './xhr.js';\nimport AxiosError from \"../core/AxiosError.js\";\n\nconst knownAdapters = {\n  http: httpAdapter,\n  xhr: xhrAdapter\n}\n\nutils.forEach(knownAdapters, (fn, value) => {\n  if (fn) {\n    try {\n      Object.defineProperty(fn, 'name', {value});\n    } catch (e) {\n      // eslint-disable-next-line no-empty\n    }\n    Object.defineProperty(fn, 'adapterName', {value});\n  }\n});\n\nconst renderReason = (reason) => `- ${reason}`;\n\nconst isResolvedHandle = (adapter) => utils.isFunction(adapter) || adapter === null || adapter === false;\n\nexport default {\n  getAdapter: (adapters) => {\n    adapters = utils.isArray(adapters) ? adapters : [adapters];\n\n    const {length} = adapters;\n    let nameOrAdapter;\n    let adapter;\n\n    const rejectedReasons = {};\n\n    for (let i = 0; i < length; i++) {\n      nameOrAdapter = adapters[i];\n      let id;\n\n      adapter = nameOrAdapter;\n\n      if (!isResolvedHandle(nameOrAdapter)) {\n        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];\n\n        if (adapter === undefined) {\n          throw new AxiosError(`Unknown adapter '${id}'`);\n        }\n      }\n\n      if (adapter) {\n        break;\n      }\n\n      rejectedReasons[id || '#' + i] = adapter;\n    }\n\n    if (!adapter) {\n\n      const reasons = Object.entries(rejectedReasons)\n        .map(([id, state]) => `adapter ${id} ` +\n          (state === false ? 'is not supported by the environment' : 'is not available in the build')\n        );\n\n      let s = length ?\n        (reasons.length > 1 ? 'since :\\n' + reasons.map(renderReason).join('\\n') : ' ' + renderReason(reasons[0])) :\n        'as no adapter specified';\n\n      throw new AxiosError(\n        `There is no suitable adapter to dispatch the request ` + s,\n        'ERR_NOT_SUPPORT'\n      );\n    }\n\n    return adapter;\n  },\n  adapters: knownAdapters\n}\n", "'use strict';\n\nimport transformData from './transformData.js';\nimport isCancel from '../cancel/isCancel.js';\nimport defaults from '../defaults/index.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport adapters from \"../adapters/adapters.js\";\n\n/**\n * Throws a `CanceledError` if cancellation has been requested.\n *\n * @param {Object} config The config that is to be used for the request\n *\n * @returns {void}\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new CanceledError(null, config);\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n *\n * @returns {Promise} The Promise to be fulfilled\n */\nexport default function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  config.headers = AxiosHeaders.from(config.headers);\n\n  // Transform request data\n  config.data = transformData.call(\n    config,\n    config.transformRequest\n  );\n\n  if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {\n    config.headers.setContentType('application/x-www-form-urlencoded', false);\n  }\n\n  const adapter = adapters.getAdapter(config.adapter || defaults.adapter);\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(\n      config,\n      config.transformResponse,\n      response\n    );\n\n    response.headers = AxiosHeaders.from(response.headers);\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(\n          config,\n          config.transformResponse,\n          reason.response\n        );\n        reason.response.headers = AxiosHeaders.from(reason.response.headers);\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n}\n", "'use strict';\n\nimport utils from '../utils.js';\nimport AxiosHeaders from \"./AxiosHeaders.js\";\n\nconst headersToObject = (thing) => thing instanceof AxiosHeaders ? { ...thing } : thing;\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n *\n * @returns {Object} New object resulting from merging config2 to config1\n */\nexport default function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  const config = {};\n\n  function getMergedValue(target, source, caseless) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge.call({caseless}, target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDeepProperties(a, b, caseless) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(a, b, caseless);\n    } else if (!utils.isUndefined(a)) {\n      return getMergedValue(undefined, a, caseless);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function valueFromConfig2(a, b) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function defaultToConfig2(a, b) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    } else if (!utils.isUndefined(a)) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDirectKeys(a, b, prop) {\n    if (prop in config2) {\n      return getMergedValue(a, b);\n    } else if (prop in config1) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  const mergeMap = {\n    url: valueFromConfig2,\n    method: valueFromConfig2,\n    data: valueFromConfig2,\n    baseURL: defaultToConfig2,\n    transformRequest: defaultToConfig2,\n    transformResponse: defaultToConfig2,\n    paramsSerializer: defaultToConfig2,\n    timeout: defaultToConfig2,\n    timeoutMessage: defaultToConfig2,\n    withCredentials: defaultToConfig2,\n    withXSRFToken: defaultToConfig2,\n    adapter: defaultToConfig2,\n    responseType: defaultToConfig2,\n    xsrfCookieName: defaultToConfig2,\n    xsrfHeaderName: defaultToConfig2,\n    onUploadProgress: defaultToConfig2,\n    onDownloadProgress: defaultToConfig2,\n    decompress: defaultToConfig2,\n    maxContentLength: defaultToConfig2,\n    maxBodyLength: defaultToConfig2,\n    beforeRedirect: defaultToConfig2,\n    transport: defaultToConfig2,\n    httpAgent: defaultToConfig2,\n    httpsAgent: defaultToConfig2,\n    cancelToken: defaultToConfig2,\n    socketPath: defaultToConfig2,\n    responseEncoding: defaultToConfig2,\n    validateStatus: mergeDirectKeys,\n    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)\n  };\n\n  utils.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {\n    const merge = mergeMap[prop] || mergeDeepProperties;\n    const configValue = merge(config1[prop], config2[prop], prop);\n    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);\n  });\n\n  return config;\n}\n", "export const VERSION = \"1.6.8\";", "'use strict';\n\nimport {VERSION} from '../env/data.js';\nimport AxiosError from '../core/AxiosError.js';\n\nconst validators = {};\n\n// eslint-disable-next-line func-names\n['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {\n  validators[type] = function validator(thing) {\n    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;\n  };\n});\n\nconst deprecatedWarnings = {};\n\n/**\n * Transitional option validator\n *\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\n * @param {string?} version - deprecated version / removed since version\n * @param {string?} message - some message with additional info\n *\n * @returns {function}\n */\nvalidators.transitional = function transitional(validator, version, message) {\n  function formatMessage(opt, desc) {\n    return '[Axios v' + VERSION + '] Transitional option \\'' + opt + '\\'' + desc + (message ? '. ' + message : '');\n  }\n\n  // eslint-disable-next-line func-names\n  return (value, opt, opts) => {\n    if (validator === false) {\n      throw new AxiosError(\n        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),\n        AxiosError.ERR_DEPRECATED\n      );\n    }\n\n    if (version && !deprecatedWarnings[opt]) {\n      deprecatedWarnings[opt] = true;\n      // eslint-disable-next-line no-console\n      console.warn(\n        formatMessage(\n          opt,\n          ' has been deprecated since v' + version + ' and will be removed in the near future'\n        )\n      );\n    }\n\n    return validator ? validator(value, opt, opts) : true;\n  };\n};\n\n/**\n * Assert object's properties type\n *\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n *\n * @returns {object}\n */\n\nfunction assertOptions(options, schema, allowUnknown) {\n  if (typeof options !== 'object') {\n    throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);\n  }\n  const keys = Object.keys(options);\n  let i = keys.length;\n  while (i-- > 0) {\n    const opt = keys[i];\n    const validator = schema[opt];\n    if (validator) {\n      const value = options[opt];\n      const result = value === undefined || validator(value, opt, options);\n      if (result !== true) {\n        throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);\n      }\n      continue;\n    }\n    if (allowUnknown !== true) {\n      throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);\n    }\n  }\n}\n\nexport default {\n  assertOptions,\n  validators\n};\n", "'use strict';\n\nimport utils from './../utils.js';\nimport buildURL from '../helpers/buildURL.js';\nimport InterceptorManager from './InterceptorManager.js';\nimport dispatchRequest from './dispatchRequest.js';\nimport mergeConfig from './mergeConfig.js';\nimport buildFullPath from './buildFullPath.js';\nimport validator from '../helpers/validator.js';\nimport AxiosHeaders from './AxiosHeaders.js';\n\nconst validators = validator.validators;\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n *\n * @return {Axios} A new instance of Axios\n */\nclass Axios {\n  constructor(instanceConfig) {\n    this.defaults = instanceConfig;\n    this.interceptors = {\n      request: new InterceptorManager(),\n      response: new InterceptorManager()\n    };\n  }\n\n  /**\n   * Dispatch a request\n   *\n   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)\n   * @param {?Object} config\n   *\n   * @returns {Promise} The Promise to be fulfilled\n   */\n  async request(configOrUrl, config) {\n    try {\n      return await this._request(configOrUrl, config);\n    } catch (err) {\n      if (err instanceof Error) {\n        let dummy;\n\n        Error.captureStackTrace ? Error.captureStackTrace(dummy = {}) : (dummy = new Error());\n\n        // slice off the Error: ... line\n        const stack = dummy.stack ? dummy.stack.replace(/^.+\\n/, '') : '';\n\n        if (!err.stack) {\n          err.stack = stack;\n          // match without the 2 top stack lines\n        } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\\n.+\\n/, ''))) {\n          err.stack += '\\n' + stack\n        }\n      }\n\n      throw err;\n    }\n  }\n\n  _request(configOrUrl, config) {\n    /*eslint no-param-reassign:0*/\n    // Allow for axios('example/url'[, config]) a la fetch API\n    if (typeof configOrUrl === 'string') {\n      config = config || {};\n      config.url = configOrUrl;\n    } else {\n      config = configOrUrl || {};\n    }\n\n    config = mergeConfig(this.defaults, config);\n\n    const {transitional, paramsSerializer, headers} = config;\n\n    if (transitional !== undefined) {\n      validator.assertOptions(transitional, {\n        silentJSONParsing: validators.transitional(validators.boolean),\n        forcedJSONParsing: validators.transitional(validators.boolean),\n        clarifyTimeoutError: validators.transitional(validators.boolean)\n      }, false);\n    }\n\n    if (paramsSerializer != null) {\n      if (utils.isFunction(paramsSerializer)) {\n        config.paramsSerializer = {\n          serialize: paramsSerializer\n        }\n      } else {\n        validator.assertOptions(paramsSerializer, {\n          encode: validators.function,\n          serialize: validators.function\n        }, true);\n      }\n    }\n\n    // Set config.method\n    config.method = (config.method || this.defaults.method || 'get').toLowerCase();\n\n    // Flatten headers\n    let contextHeaders = headers && utils.merge(\n      headers.common,\n      headers[config.method]\n    );\n\n    headers && utils.forEach(\n      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n      (method) => {\n        delete headers[method];\n      }\n    );\n\n    config.headers = AxiosHeaders.concat(contextHeaders, headers);\n\n    // filter out skipped interceptors\n    const requestInterceptorChain = [];\n    let synchronousRequestInterceptors = true;\n    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n        return;\n      }\n\n      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n\n      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    const responseInterceptorChain = [];\n    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    let promise;\n    let i = 0;\n    let len;\n\n    if (!synchronousRequestInterceptors) {\n      const chain = [dispatchRequest.bind(this), undefined];\n      chain.unshift.apply(chain, requestInterceptorChain);\n      chain.push.apply(chain, responseInterceptorChain);\n      len = chain.length;\n\n      promise = Promise.resolve(config);\n\n      while (i < len) {\n        promise = promise.then(chain[i++], chain[i++]);\n      }\n\n      return promise;\n    }\n\n    len = requestInterceptorChain.length;\n\n    let newConfig = config;\n\n    i = 0;\n\n    while (i < len) {\n      const onFulfilled = requestInterceptorChain[i++];\n      const onRejected = requestInterceptorChain[i++];\n      try {\n        newConfig = onFulfilled(newConfig);\n      } catch (error) {\n        onRejected.call(this, error);\n        break;\n      }\n    }\n\n    try {\n      promise = dispatchRequest.call(this, newConfig);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    i = 0;\n    len = responseInterceptorChain.length;\n\n    while (i < len) {\n      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);\n    }\n\n    return promise;\n  }\n\n  getUri(config) {\n    config = mergeConfig(this.defaults, config);\n    const fullPath = buildFullPath(config.baseURL, config.url);\n    return buildURL(fullPath, config.params, config.paramsSerializer);\n  }\n}\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method,\n      url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n\n  function generateHTTPMethod(isForm) {\n    return function httpMethod(url, data, config) {\n      return this.request(mergeConfig(config || {}, {\n        method,\n        headers: isForm ? {\n          'Content-Type': 'multipart/form-data'\n        } : {},\n        url,\n        data\n      }));\n    };\n  }\n\n  Axios.prototype[method] = generateHTTPMethod();\n\n  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);\n});\n\nexport default Axios;\n", "'use strict';\n\nimport CanceledError from './CanceledError.js';\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @param {Function} executor The executor function.\n *\n * @returns {CancelToken}\n */\nclass CancelToken {\n  constructor(executor) {\n    if (typeof executor !== 'function') {\n      throw new TypeError('executor must be a function.');\n    }\n\n    let resolvePromise;\n\n    this.promise = new Promise(function promiseExecutor(resolve) {\n      resolvePromise = resolve;\n    });\n\n    const token = this;\n\n    // eslint-disable-next-line func-names\n    this.promise.then(cancel => {\n      if (!token._listeners) return;\n\n      let i = token._listeners.length;\n\n      while (i-- > 0) {\n        token._listeners[i](cancel);\n      }\n      token._listeners = null;\n    });\n\n    // eslint-disable-next-line func-names\n    this.promise.then = onfulfilled => {\n      let _resolve;\n      // eslint-disable-next-line func-names\n      const promise = new Promise(resolve => {\n        token.subscribe(resolve);\n        _resolve = resolve;\n      }).then(onfulfilled);\n\n      promise.cancel = function reject() {\n        token.unsubscribe(_resolve);\n      };\n\n      return promise;\n    };\n\n    executor(function cancel(message, config, request) {\n      if (token.reason) {\n        // Cancellation has already been requested\n        return;\n      }\n\n      token.reason = new CanceledError(message, config, request);\n      resolvePromise(token.reason);\n    });\n  }\n\n  /**\n   * Throws a `CanceledError` if cancellation has been requested.\n   */\n  throwIfRequested() {\n    if (this.reason) {\n      throw this.reason;\n    }\n  }\n\n  /**\n   * Subscribe to the cancel signal\n   */\n\n  subscribe(listener) {\n    if (this.reason) {\n      listener(this.reason);\n      return;\n    }\n\n    if (this._listeners) {\n      this._listeners.push(listener);\n    } else {\n      this._listeners = [listener];\n    }\n  }\n\n  /**\n   * Unsubscribe from the cancel signal\n   */\n\n  unsubscribe(listener) {\n    if (!this._listeners) {\n      return;\n    }\n    const index = this._listeners.indexOf(listener);\n    if (index !== -1) {\n      this._listeners.splice(index, 1);\n    }\n  }\n\n  /**\n   * Returns an object that contains a new `CancelToken` and a function that, when called,\n   * cancels the `CancelToken`.\n   */\n  static source() {\n    let cancel;\n    const token = new CancelToken(function executor(c) {\n      cancel = c;\n    });\n    return {\n      token,\n      cancel\n    };\n  }\n}\n\nexport default CancelToken;\n", "'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n *\n * @returns {Function}\n */\nexport default function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n}\n", "'use strict';\n\nimport utils from './../utils.js';\n\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n *\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */\nexport default function isAxiosError(payload) {\n  return utils.isObject(payload) && (payload.isAxiosError === true);\n}\n", "const HttpStatusCode = {\n  Continue: 100,\n  SwitchingProtocols: 101,\n  Processing: 102,\n  EarlyHints: 103,\n  Ok: 200,\n  Created: 201,\n  Accepted: 202,\n  NonAuthoritativeInformation: 203,\n  NoContent: 204,\n  ResetContent: 205,\n  PartialContent: 206,\n  MultiStatus: 207,\n  AlreadyReported: 208,\n  ImUsed: 226,\n  MultipleChoices: 300,\n  MovedPermanently: 301,\n  Found: 302,\n  SeeOther: 303,\n  NotModified: 304,\n  UseProxy: 305,\n  Unused: 306,\n  TemporaryRedirect: 307,\n  PermanentRedirect: 308,\n  BadRequest: 400,\n  Unauthorized: 401,\n  PaymentRequired: 402,\n  Forbidden: 403,\n  NotFound: 404,\n  MethodNotAllowed: 405,\n  NotAcceptable: 406,\n  ProxyAuthenticationRequired: 407,\n  RequestTimeout: 408,\n  Conflict: 409,\n  Gone: 410,\n  LengthRequired: 411,\n  PreconditionFailed: 412,\n  PayloadTooLarge: 413,\n  UriTooLong: 414,\n  UnsupportedMediaType: 415,\n  RangeNotSatisfiable: 416,\n  ExpectationFailed: 417,\n  ImATeapot: 418,\n  MisdirectedRequest: 421,\n  UnprocessableEntity: 422,\n  Locked: 423,\n  FailedDependency: 424,\n  TooEarly: 425,\n  UpgradeRequired: 426,\n  PreconditionRequired: 428,\n  TooManyRequests: 429,\n  RequestHeaderFieldsTooLarge: 431,\n  UnavailableForLegalReasons: 451,\n  InternalServerError: 500,\n  NotImplemented: 501,\n  BadGateway: 502,\n  ServiceUnavailable: 503,\n  GatewayTimeout: 504,\n  HttpVersionNotSupported: 505,\n  VariantAlsoNegotiates: 506,\n  InsufficientStorage: 507,\n  LoopDetected: 508,\n  NotExtended: 510,\n  NetworkAuthenticationRequired: 511,\n};\n\nObject.entries(HttpStatusCode).forEach(([key, value]) => {\n  HttpStatusCode[value] = key;\n});\n\nexport default HttpStatusCode;\n", "'use strict';\n\nimport utils from './utils.js';\nimport bind from './helpers/bind.js';\nimport Axios from './core/Axios.js';\nimport mergeConfig from './core/mergeConfig.js';\nimport defaults from './defaults/index.js';\nimport formDataToJSON from './helpers/formDataToJSON.js';\nimport CanceledError from './cancel/CanceledError.js';\nimport CancelToken from './cancel/CancelToken.js';\nimport isCancel from './cancel/isCancel.js';\nimport {VERSION} from './env/data.js';\nimport toFormData from './helpers/toFormData.js';\nimport AxiosError from './core/AxiosError.js';\nimport spread from './helpers/spread.js';\nimport isAxiosError from './helpers/isAxiosError.js';\nimport AxiosHeaders from \"./core/AxiosHeaders.js\";\nimport adapters from './adapters/adapters.js';\nimport HttpStatusCode from './helpers/HttpStatusCode.js';\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n *\n * @returns {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  const context = new Axios(defaultConfig);\n  const instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context, {allOwnKeys: true});\n\n  // Copy context to instance\n  utils.extend(instance, context, null, {allOwnKeys: true});\n\n  // Factory for creating new instances\n  instance.create = function create(instanceConfig) {\n    return createInstance(mergeConfig(defaultConfig, instanceConfig));\n  };\n\n  return instance;\n}\n\n// Create the default instance to be exported\nconst axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Expose Cancel & CancelToken\naxios.CanceledError = CanceledError;\naxios.CancelToken = CancelToken;\naxios.isCancel = isCancel;\naxios.VERSION = VERSION;\naxios.toFormData = toFormData;\n\n// Expose AxiosError class\naxios.AxiosError = AxiosError;\n\n// alias for CanceledError for backward compatibility\naxios.Cancel = axios.CanceledError;\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\n\naxios.spread = spread;\n\n// Expose isAxiosError\naxios.isAxiosError = isAxiosError;\n\n// Expose mergeConfig\naxios.mergeConfig = mergeConfig;\n\naxios.AxiosHeaders = AxiosHeaders;\n\naxios.formToJSON = thing => formDataToJSON(utils.isHTMLForm(thing) ? new FormData(thing) : thing);\n\naxios.getAdapter = adapters.getAdapter;\n\naxios.HttpStatusCode = HttpStatusCode;\n\naxios.default = axios;\n\n// this module should only have a default export\nexport default axios\n", "{\n  \"name\": \"quickbase\",\n  \"version\": \"6.0.0\",\n  \"description\": \"A lightweight, typed, promise-based Quickbase API, autogenerated from the OpenAPI spec\",\n  \"keywords\": [\n    \"QuickBase\",\n    \"quickbase\",\n    \"Quick Base\",\n    \"quick base\",\n    \"qb\",\n    \"api\"\n  ],\n  \"homepage\": \"https://github.com/tflanagan/node-quickbase\",\n  \"bugs\": {\n    \"url\": \"https://github.com/tflanagan/node-quickbase/issues\",\n    \"email\": \"contact@tristianflanagan.com\"\n  },\n  \"license\": \"Apache-2.0\",\n  \"author\": {\n    \"name\": \"Tristian Flanagan\",\n    \"url\": \"https://github.com/tflanagan\",\n    \"email\": \"contact@tristianflanagan.com\"\n  },\n  \"maintainers\": [],\n  \"contributors\": [],\n  \"main\": \"./dist/quickbase.js\",\n  \"types\": \"./dist/quickbase.d.ts\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/tflanagan/node-quickbase.git\"\n  },\n  \"scripts\": {\n    \"build\": \"ts-node ./src/code-generation/build.ts\",\n    \"cleanup\": \"rm -rf ./dist/quickbase* && rm -rf ./dist/tests\",\n    \"compile\": \"npm run cleanup && npm run generate && npm run build && npm run test && npm run docs\",\n    \"docs\": \"mv ./docs/_config.yml ./ && npx typedoc src/quickbase.ts && mv ./_config.yml ./docs/\",\n    \"generate\": \"ts-node ./src/code-generation/generate.ts\",\n    \"test\": \"npx ava\"\n  },\n  \"dependencies\": {\n    \"axios\": \"^1.6.8\",\n    \"debug\": \"^4.3.4\",\n    \"deepmerge\": \"^4.3.1\",\n    \"generic-throttle\": \"^3.1.0\"\n  },\n  \"devDependencies\": {\n    \"@ava/typescript\": \"^3.0.1\",\n    \"@types/debug\": \"^4.1.12\",\n    \"@types/node\": \"^20.12.7\",\n    \"ava\": \"^4.3.3\",\n    \"dotenv\": \"^16.4.5\",\n    \"esbuild\": \"^0.21.1\",\n    \"ts-node\": \"^10.9.2\",\n    \"typedoc\": \"^0.25.13\",\n    \"typescript\": \"^5.4.5\"\n  },\n  \"git\": \"git://github.com/tflanagan/node-quickbase.git\"\n}\n", "\n'use strict';\n\n/* Dependencies */\nimport merge from 'deepmerge';\nimport { debug } from 'debug';\nimport { Throttle } from 'generic-throttle';\nimport axios, {\n\tAxiosRequestConfig,\n\tAxiosResponse\n} from 'axios';\n\n/* Debug */\nconst debugMain = debug('quickbase:main');\nconst debugRequest = debug('quickbase:request');\nconst debugResponse = debug('quickbase:response');\n\n/* Globals */\nconst VERSION = require('../package.json').version;\nconst IS_BROWSER = typeof(window) !== 'undefined';\n\n/* Helpers */\nconst delay = (time: number) => {\n\treturn new Promise((resolve) => {\n\t\tsetTimeout(resolve, +time);\n\t});\n};\n\nconst getRetryDelay = (headers: {\n\t'retry-after'?: string;\n\t'x-ratelimit-reset'?: string;\n}) => {\n\tconst retryAfter = headers['retry-after'];\n\n\tif(retryAfter){\n\t\tlet retryDelay = Math.round(parseFloat(retryAfter) * 1000);\n\n\t\tif (isNaN(retryDelay)) {\n\t\t\tretryDelay = Math.max(0, new Date(retryAfter).valueOf() - new Date().valueOf());\n\t\t}\n\n\t\treturn retryDelay;\n\t}\n\n\treturn +(headers['x-ratelimit-reset'] || 10000);\n};\n\ntype LowerKeysObject<T extends object> = {\n\t[K in keyof T as (K extends string ? Lowercase<K> : K)]: T[K]\n};\n\nconst objKeysToLowercase = <T extends object>(obj: T): LowerKeysObject<T> => {\n\treturn Object.fromEntries(Object.entries(obj).map(([key, value]) => [\n\t\tkey.toLocaleLowerCase(),\n\t\tvalue\n\t])) as LowerKeysObject<T>;\n};\n\n/* Quickbase Error */\nexport type QuickBaseErrorJSON = {\n\tcode: number;\n\tmessage: string;\n\tdescription: string;\n\trayId: string;\n};\n\nexport class QuickBaseError extends Error {\n\n\t/**\n\t * Extends the native JavaScript `Error` object for use with Quickbase API errors\n\t *\n\t * Example:\n\t * ```typescript\n\t * const qbErr = new QuickBaseError(403, 'Access Denied', 'User token is invalid', 'xxxx');\n\t * ```\n\t *\n\t * @param code Error code\n\t * @param message Error message\n\t * @param description Error description\n\t * @param rayId Quickbase API Ray ID\n\t */\n\tconstructor(public code: number, public message: string, public description: string, public rayId: string) {\n\t\tsuper(message);\n\t}\n\n\t/**\n\t * Serialize the QuickBaseError instance into JSON\n\t */\n\ttoJSON(): QuickBaseErrorJSON {\n\t\treturn {\n\t\t\tcode: this.code,\n\t\t\tmessage: this.message,\n\t\t\tdescription: this.description,\n\t\t\trayId: this.rayId\n\t\t};\n\t}\n\n\t/**\n\t * Rebuild the QuickBaseError instance from serialized JSON\n\t *\n\t * @param json Serialized QuickBaseError class options\n\t */\n\tfromJSON(json: string | QuickBaseErrorJSON): QuickBaseError {\n\t\tif(typeof(json) === 'string'){\n\t\t\tjson = JSON.parse(json);\n\t\t}\n\n\t\tif(typeof(json) !== 'object'){\n\t\t\tthrow new TypeError('json argument must be type of object or a valid JSON string');\n\t\t}\n\n\t\tthis.code = json.code;\n\t\tthis.message = json.message;\n\t\tthis.description = json.description;\n\t\tthis.rayId = json.rayId;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Create a new QuickBase instance from serialized JSON\n\t *\n\t * @param json Serialized QuickBaseError class options\n\t */\n\tstatic fromJSON(json: string | QuickBaseErrorJSON): QuickBaseError {\n\t\tif(typeof(json) === 'string'){\n\t\t\tjson = JSON.parse(json);\n\t\t}\n\n\t\tif(typeof(json) !== 'object'){\n\t\t\tthrow new TypeError('json argument must be type of object or a valid JSON string');\n\t\t}\n\n\t\treturn new QuickBaseError(json.code, json.message, json.description, json.rayId);\n\t}\n\n}\n\n/* Main Class */\nexport class QuickBase {\n\n\tpublic readonly CLASS_NAME: string = 'QuickBase';\n\tstatic readonly CLASS_NAME: string = 'QuickBase';\n\n\tstatic readonly VERSION: string = VERSION;\n\n\t/**\n\t * The default settings of a `QuickBase` instance\n\t */\n\tstatic defaults: Required<QuickBaseOptions> = {\n\t\tserver: 'api.quickbase.com',\n\t\tversion: 'v1',\n\t\trealm: IS_BROWSER ? window.location.host.split('.')[0] : '',\n\t\tuserToken: '',\n\t\ttempToken: '',\n\t\ttempTokenDbid: '',\n\t\tappToken: '',\n\t\tuserAgent: '',\n\t\tautoRenewTempTokens: true,\n\t\tconnectionLimit: 10,\n\t\tconnectionLimitPeriod: 1000,\n\t\terrorOnConnectionLimit: false,\n\t\tretryOnQuotaExceeded: true,\n\t\tproxy: false\n\t};\n\n\t/**\n\t * The internal numerical id for API calls.\n\t *\n\t * Increments by 1 with each request.\n\t */\n\tprivate _id: number = 0;\n\n\t/**\n\t * The internal throttler for rate-limiting API calls\n\t */\n\tprivate throttle: Throttle;\n\n\t/**\n\t * The `QuickBase` instance settings\n\t */\n\tpublic settings: Required<QuickBaseOptions>;\n\n\tconstructor(options?: QuickBaseOptions){\n\t\tthis.settings = merge(QuickBase.defaults, options || {});\n\n\t\tthis.throttle = new Throttle(this.settings.connectionLimit, this.settings.connectionLimitPeriod, this.settings.errorOnConnectionLimit);\n\n\t\tdebugMain('New Instance', this.settings);\n\n\t\treturn this;\n\t}\n\n\tprivate assignAuthorizationHeaders(headers?: AxiosRequestConfig['headers'], addToken = true) {\n\t\tif(!headers){\n\t\t\theaders = {};\n\t\t}\n\n\t\tif(this.settings.userToken){\n\t\t\tif(addToken){\n\t\t\t\theaders.Authorization = `QB-USER-TOKEN ${this.settings.userToken}`;\n\t\t\t}\n\t\t}else{\n\t\t\tif(this.settings.appToken){\n\t\t\t\theaders['QB-App-Token'] = this.settings.appToken;\n\t\t\t}\n\n\t\t\tif(addToken && this.settings.tempToken){\n\t\t\t\theaders.Authorization = `QB-TEMP-TOKEN ${this.settings.tempToken}`;\n\t\t\t}\n\t\t}\n\n\t\treturn headers;\n\t}\n\n\tprivate getBaseRequest(){\n\t\treturn {\n\t\t\tmethod: 'GET',\n\t\t\tbaseURL: `https://${this.settings.server}/${this.settings.version}`,\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json; charset=UTF-8',\n\t\t\t\t[IS_BROWSER ? 'X-User-Agent' : 'User-Agent']: `${this.settings.userAgent} node-quickbase/v${VERSION} ${IS_BROWSER ? (window.navigator ? window.navigator.userAgent : '') : 'nodejs/' + process.version}`.trim(),\n\t\t\t\t'QB-Realm-Hostname': this.settings.realm\n\t\t\t},\n\t\t\tproxy: this.settings.proxy\n\t\t};\n\t}\n\n\tprivate async request<T = any>(options: AxiosRequestConfig, attempt = 0): Promise<AxiosResponse<T>> {\n\t\tconst id = 0 + (++this._id);\n\n\t\ttry {\n\t\t\tdebugRequest(id, options);\n\n\t\t\toptions.headers = this.assignAuthorizationHeaders(options.headers, !options.url?.startsWith('/auth/temporary'));\n\n\t\t\tconst results = await axios.request<T>(options);\n\n\t\t\tdebugResponse(id, results);\n\n\t\t\treturn results;\n\t\t}catch(err: any){\n\t\t\tif(err.response){\n\t\t\t\tconst headers = objKeysToLowercase<{\n\t\t\t\t\t'x-ratelimit-reset': string;\n\t\t\t\t\t'retry-after': string;\n\t\t\t\t\t'qb-api-ray': string;\n\t\t\t\t}>(err.response.headers);\n\n\t\t\t\tconst qbErr = new QuickBaseError(\n\t\t\t\t\terr.response.status,\n\t\t\t\t\terr.response.data.message,\n\t\t\t\t\terr.response.data.description,\n\t\t\t\t\theaders['qb-api-ray']\n\t\t\t\t);\n\n\t\t\t\tdebugResponse(id, 'Quickbase Error', qbErr);\n\n\t\t\t\tif(this.settings.retryOnQuotaExceeded && qbErr.code === 429){\n\t\t\t\t\tconst delayMs = getRetryDelay(headers);\n\n\t\t\t\t\tdebugResponse(id, `Waiting ${delayMs}ms until retrying...`);\n\n\t\t\t\t\tawait delay(delayMs);\n\n\t\t\t\t\tdebugResponse(id, `Retrying...`);\n\n\t\t\t\t\treturn await this.request<T>(options);\n\t\t\t\t}\n\n\t\t\t\tif(attempt >= 3){\n\t\t\t\t\tthrow qbErr;\n\t\t\t\t}\n\n\t\t\t\tconst errDescription = '' + (qbErr.description || '');\n\n\t\t\t\tif(this.settings.autoRenewTempTokens && this.settings.tempTokenDbid && (\n\t\t\t\t\terrDescription.match(/Your ticket has expired/i)\n\t\t\t\t\t||\n\t\t\t\t\terrDescription.match(/Invalid Authorization/i)\n\t\t\t\t\t||\n\t\t\t\t\terrDescription.match(/Required header 'authorization' not found/i)\n\t\t\t\t)){\n\t\t\t\t\tdebugResponse(id, `Getting new temporary ticket for ${this.settings.tempTokenDbid}...`);\n\n\t\t\t\t\tconst results = await this.request(merge.all([\n\t\t\t\t\t\tthis.getBaseRequest(),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\turl: `auth/temporary/${this.settings.tempTokenDbid}`,\n\t\t\t\t\t\t\twithCredentials: true\n\t\t\t\t\t\t}\n\t\t\t\t\t]), attempt + 1);\n\n\t\t\t\t\tthis.setTempToken(this.settings.tempTokenDbid, results.data.temporaryAuthorization);\n\n\t\t\t\t\tdebugResponse(id, `Retrying...`);\n\n\t\t\t\t\treturn await this.request<T>(options, attempt + 1);\n\t\t\t\t}\n\n\t\t\t\tthrow qbErr;\n\t\t\t}\n\n\t\t\tdebugResponse(id, 'Error', err);\n\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tprivate async api<T = any>(actOptions: AxiosRequestConfig, reqOptions?: AxiosRequestConfig): Promise<AxiosResponse<T>> {\n\t\treturn this.throttle.acquire(async () => {\n\t\t\treturn await this.request<T>(merge.all([\n\t\t\t\tthis.getBaseRequest(),\n\t\t\t\tactOptions,\n\t\t\t\treqOptions || {}\n\t\t\t]));\n\t\t});\n\t}\n\n\t/**\n\t * Set the internally stored `tempToken` for use in subsequent API calls\n\t *\n\t * Example:\n\t * ```typescript\n\t * qb.setTempToken('xxxx.xxx[...]xxx', 'xxxxxxxxx');\n\t * ```\n\t *\n\t * @param dbid Quickbase Application ID or Table ID\n\t * @param tempToken Temporary Quickbase Authentication Token\n\t */\n\tsetTempToken(dbid: string, tempToken: string): QuickBase {\n\t\tthis.settings.tempTokenDbid = dbid;\n\t\tthis.settings.tempToken = tempToken;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Rebuild the QuickBase instance from serialized JSON\n\t *\n\t * @param json QuickBase class options\n\t */\n\tfromJSON(json: string | QuickBaseOptions): QuickBase {\n\t\tif(typeof(json) === 'string'){\n\t\t\tjson = JSON.parse(json);\n\t\t}\n\n\t\tif(typeof(json) !== 'object'){\n\t\t\tthrow new TypeError('json argument must be type of object or a valid JSON string');\n\t\t}\n\n\t\tthis.settings = merge(this.settings, json);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Serialize the QuickBase instance into JSON\n\t */\n\ttoJSON(): Required<QuickBaseOptions> {\n\t\treturn merge({}, this.settings);\n\t}\n\n\t/**\n\t * Create a new QuickBase instance from serialized JSON\n\t *\n\t * @param json QuickBase class options\n\t */\n\tstatic fromJSON(json: string | QuickBaseOptions): QuickBase {\n\t\tif(typeof(json) === 'string'){\n\t\t\tjson = JSON.parse(json);\n\t\t}\n\n\t\tif(typeof(json) !== 'object'){\n\t\t\tthrow new TypeError('json argument must be type of object or a valid JSON string');\n\t\t}\n\n\t\treturn new QuickBase(json);\n\t}\n\n\t/**\n\t * Test if a variable is a `quickbase` object\n\t *\n\t * @param obj A variable you'd like to test\n\t */\n\tstatic IsQuickBase(obj: any): obj is QuickBase {\n\t\treturn ((obj || {}) as QuickBase).CLASS_NAME === QuickBase.CLASS_NAME;\n\t}\n\n\t/**\n\t * Create an app\n\t *\n\t * Creates an application in an account. You must have application creation rights in the respective account. Main properties and application variables can be set with this API.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/createApp)\n\t *\n\t * @param options Create an app method options object\n\t * @param options.assignToken Set to true if you would like to assign the app to the user token you used to create the application. The default is false.\n\t * @param options.variables[].name The name for the variable.\n\t * @param options.variables[].value The value for the variable.\n\t * @param options.name The app name. You are allowed to create multiple apps with the same name, in the same realm, because they will have different dbid values. We urge you to be careful about doing this.\n\t * @param options.securityProperties.hideFromPublic Hide from public application searches\n\t * @param options.securityProperties.mustBeRealmApproved Only \"approved\" users may access this application\n\t * @param options.securityProperties.allowClone Allow users who are not administrators to copy\n\t * @param options.securityProperties.useIPFilter Only users logging in from \"approved\" IP addresses may access this application\n\t * @param options.securityProperties.allowExport Allow users who are not administrators to export data\n\t * @param options.securityProperties.enableAppTokens Require Application Tokens\n\t * @param options.description The description for the app. If this property is left out, the app description will be blank.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async createApp({ requestOptions, returnAxios, ...body }: QuickBaseRequestCreateApp & { returnAxios?: false }): Promise<QuickBaseResponseCreateApp>;\n\tpublic async createApp({ requestOptions, returnAxios, ...body }: QuickBaseRequestCreateApp & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseCreateApp>>;\n\tpublic async createApp({ requestOptions, returnAxios = false, ...body }: QuickBaseRequestCreateApp): Promise<QuickBaseResponseCreateApp | AxiosResponse<QuickBaseResponseCreateApp>> {\n\t\tconst results = await this.api<QuickBaseResponseCreateApp>({\n\t\t\tmethod: 'POST',\n\t\t\turl: `/apps`,\n\t\t\tdata: body,\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Get an app\n\t *\n\t * Returns the main properties of an application, including application variables.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/getApp)\n\t *\n\t * @param options Get an app method options object\n\t * @param options.appId The unique identifier of an app\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async getApp({ appId, requestOptions, returnAxios }: QuickBaseRequestGetApp & { returnAxios?: false }): Promise<QuickBaseResponseGetApp>;\n\tpublic async getApp({ appId, requestOptions, returnAxios }: QuickBaseRequestGetApp & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseGetApp>>;\n\tpublic async getApp({ appId, requestOptions, returnAxios = false }: QuickBaseRequestGetApp): Promise<QuickBaseResponseGetApp | AxiosResponse<QuickBaseResponseGetApp>> {\n\t\tconst results = await this.api<QuickBaseResponseGetApp>({\n\t\t\tmethod: 'GET',\n\t\t\turl: `/apps/${appId}`,\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Update an app\n\t *\n\t * Updates the main properties and/or application variables for a specific application. Any properties of the app that you do not specify in the request body will remain unchanged.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/updateApp)\n\t *\n\t * @param options Update an app method options object\n\t * @param options.appId The unique identifier of an app\n\t * @param options.variables[].name The name for the variable.\n\t * @param options.variables[].value The value for the variable.\n\t * @param options.name The name for the app.\n\t * @param options.securityProperties.hideFromPublic Hide from public application searches\n\t * @param options.securityProperties.mustBeRealmApproved Only \"approved\" users may access this application\n\t * @param options.securityProperties.allowClone Allow users who are not administrators to copy\n\t * @param options.securityProperties.useIPFilter Only users logging in from \"approved\" IP addresses may access this application\n\t * @param options.securityProperties.allowExport Allow users who are not administrators to export data\n\t * @param options.securityProperties.enableAppTokens Require Application Tokens\n\t * @param options.description The description for the app.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async updateApp({ appId, requestOptions, returnAxios, ...body }: QuickBaseRequestUpdateApp & { returnAxios?: false }): Promise<QuickBaseResponseUpdateApp>;\n\tpublic async updateApp({ appId, requestOptions, returnAxios, ...body }: QuickBaseRequestUpdateApp & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseUpdateApp>>;\n\tpublic async updateApp({ appId, requestOptions, returnAxios = false, ...body }: QuickBaseRequestUpdateApp): Promise<QuickBaseResponseUpdateApp | AxiosResponse<QuickBaseResponseUpdateApp>> {\n\t\tconst results = await this.api<QuickBaseResponseUpdateApp>({\n\t\t\tmethod: 'POST',\n\t\t\turl: `/apps/${appId}`,\n\t\t\tdata: body,\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Delete an app\n\t *\n\t * Deletes an entire application, including all of the tables and data.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/deleteApp)\n\t *\n\t * @param options Delete an app method options object\n\t * @param options.appId The unique identifier of an app\n\t * @param options.name To confirm application deletion we ask for application name.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async deleteApp({ appId, requestOptions, returnAxios, ...body }: QuickBaseRequestDeleteApp & { returnAxios?: false }): Promise<QuickBaseResponseDeleteApp>;\n\tpublic async deleteApp({ appId, requestOptions, returnAxios, ...body }: QuickBaseRequestDeleteApp & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseDeleteApp>>;\n\tpublic async deleteApp({ appId, requestOptions, returnAxios = false, ...body }: QuickBaseRequestDeleteApp): Promise<QuickBaseResponseDeleteApp | AxiosResponse<QuickBaseResponseDeleteApp>> {\n\t\tconst results = await this.api<QuickBaseResponseDeleteApp>({\n\t\t\tmethod: 'DELETE',\n\t\t\turl: `/apps/${appId}`,\n\t\t\tdata: body,\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Get app events\n\t *\n\t * Get a list of events that can be triggered based on data or user actions in this application, includes: Email notification, Reminders, Subscriptions, QB Actions, Webhooks, record change triggered Automations (does not include scheduled).\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/getAppEvents)\n\t *\n\t * @param options Get app events method options object\n\t * @param options.appId The unique identifier of an app\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async getAppEvents({ appId, requestOptions, returnAxios }: QuickBaseRequestGetAppEvents & { returnAxios?: false }): Promise<QuickBaseResponseGetAppEvents>;\n\tpublic async getAppEvents({ appId, requestOptions, returnAxios }: QuickBaseRequestGetAppEvents & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseGetAppEvents>>;\n\tpublic async getAppEvents({ appId, requestOptions, returnAxios = false }: QuickBaseRequestGetAppEvents): Promise<QuickBaseResponseGetAppEvents | AxiosResponse<QuickBaseResponseGetAppEvents>> {\n\t\tconst results = await this.api<QuickBaseResponseGetAppEvents>({\n\t\t\tmethod: 'GET',\n\t\t\turl: `/apps/${appId}/events`,\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Copy an app\n\t *\n\t * Copies the specified application. The new application will have the same schema as the original. See below for additional copy options.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/copyApp)\n\t *\n\t * @param options Copy an app method options object\n\t * @param options.appId The unique identifier of an app\n\t * @param options.name The name of the newly copied app\n\t * @param options.description The description of the newly copied app\n\t * @param options.properties.assignUserToken Whether to add the user token used to make this request to the new app\n\t * @param options.properties.excludeFiles If keepData is true, whether to copy the file attachments as well. If keepData is false, this property is ignored\n\t * @param options.properties.keepData Whether to copy the app's data along with the schema\n\t * @param options.properties.usersAndRoles If true, users will be copied along with their assigned roles. If false, users and roles will be copied but roles will not be assigned\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async copyApp({ appId, requestOptions, returnAxios, ...body }: QuickBaseRequestCopyApp & { returnAxios?: false }): Promise<QuickBaseResponseCopyApp>;\n\tpublic async copyApp({ appId, requestOptions, returnAxios, ...body }: QuickBaseRequestCopyApp & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseCopyApp>>;\n\tpublic async copyApp({ appId, requestOptions, returnAxios = false, ...body }: QuickBaseRequestCopyApp): Promise<QuickBaseResponseCopyApp | AxiosResponse<QuickBaseResponseCopyApp>> {\n\t\tconst results = await this.api<QuickBaseResponseCopyApp>({\n\t\t\tmethod: 'POST',\n\t\t\turl: `/apps/${appId}/copy`,\n\t\t\tdata: body,\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Create a table\n\t *\n\t * Creates a table in an application.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/createTable)\n\t *\n\t * @param options Create a table method options object\n\t * @param options.appId The unique identifier of an app\n\t * @param options.name The name for the table.\n\t * @param options.pluralRecordName The plural noun for records in the table. If this value is not passed the default value is 'Records'.\n\t * @param options.singleRecordName The singular noun for records in the table. If this value is not passed the default value is 'Record'.\n\t * @param options.description The description for the table. If this value is not passed the default value is blank.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async createTable({ appId, requestOptions, returnAxios, ...body }: QuickBaseRequestCreateTable & { returnAxios?: false }): Promise<QuickBaseResponseCreateTable>;\n\tpublic async createTable({ appId, requestOptions, returnAxios, ...body }: QuickBaseRequestCreateTable & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseCreateTable>>;\n\tpublic async createTable({ appId, requestOptions, returnAxios = false, ...body }: QuickBaseRequestCreateTable): Promise<QuickBaseResponseCreateTable | AxiosResponse<QuickBaseResponseCreateTable>> {\n\t\tconst results = await this.api<QuickBaseResponseCreateTable>({\n\t\t\tmethod: 'POST',\n\t\t\turl: `/tables`,\n\t\t\tdata: body,\n\t\t\tparams: {\n\t\t\t\tappId\n\t\t\t}\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Get tables for an app\n\t *\n\t * Gets a list of all the tables that exist in a specific application. The properties for each table are the same as what is returned in Get table.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/getAppTables)\n\t *\n\t * @param options Get tables for an app method options object\n\t * @param options.appId The unique identifier of an app\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async getAppTables({ appId, requestOptions, returnAxios }: QuickBaseRequestGetAppTables & { returnAxios?: false }): Promise<QuickBaseResponseGetAppTables>;\n\tpublic async getAppTables({ appId, requestOptions, returnAxios }: QuickBaseRequestGetAppTables & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseGetAppTables>>;\n\tpublic async getAppTables({ appId, requestOptions, returnAxios = false }: QuickBaseRequestGetAppTables): Promise<QuickBaseResponseGetAppTables | AxiosResponse<QuickBaseResponseGetAppTables>> {\n\t\tconst results = await this.api<QuickBaseResponseGetAppTables>({\n\t\t\tmethod: 'GET',\n\t\t\turl: `/tables`,\n\t\t\tparams: {\n\t\t\t\tappId\n\t\t\t}\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Get a table\n\t *\n\t * Gets the properties of an individual table that is part of an application.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/getTable)\n\t *\n\t * @param options Get a table method options object\n\t * @param options.tableId The unique identifier (dbid) of the table.\n\t * @param options.appId The unique identifier of an app\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async getTable({ tableId, appId, requestOptions, returnAxios }: QuickBaseRequestGetTable & { returnAxios?: false }): Promise<QuickBaseResponseGetTable>;\n\tpublic async getTable({ tableId, appId, requestOptions, returnAxios }: QuickBaseRequestGetTable & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseGetTable>>;\n\tpublic async getTable({ tableId, appId, requestOptions, returnAxios = false }: QuickBaseRequestGetTable): Promise<QuickBaseResponseGetTable | AxiosResponse<QuickBaseResponseGetTable>> {\n\t\tconst results = await this.api<QuickBaseResponseGetTable>({\n\t\t\tmethod: 'GET',\n\t\t\turl: `/tables/${tableId}`,\n\t\t\tparams: {\n\t\t\t\tappId\n\t\t\t}\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Update a table\n\t *\n\t * Updates the main properties of a specific table. Any properties of the table that you do not specify in the request body will remain unchanged.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/updateTable)\n\t *\n\t * @param options Update a table method options object\n\t * @param options.tableId The unique identifier (dbid) of the table.\n\t * @param options.appId The unique identifier of an app\n\t * @param options.name The name for the table.\n\t * @param options.pluralRecordName The plural noun for records in the table. If this value is not passed the default value is 'Records'.\n\t * @param options.singleRecordName The singular noun for records in the table. If this value is not passed the default value is 'Record'.\n\t * @param options.description The description for the table. If this value is not passed the default value is blank.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async updateTable({ tableId, appId, requestOptions, returnAxios, ...body }: QuickBaseRequestUpdateTable & { returnAxios?: false }): Promise<QuickBaseResponseUpdateTable>;\n\tpublic async updateTable({ tableId, appId, requestOptions, returnAxios, ...body }: QuickBaseRequestUpdateTable & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseUpdateTable>>;\n\tpublic async updateTable({ tableId, appId, requestOptions, returnAxios = false, ...body }: QuickBaseRequestUpdateTable): Promise<QuickBaseResponseUpdateTable | AxiosResponse<QuickBaseResponseUpdateTable>> {\n\t\tconst results = await this.api<QuickBaseResponseUpdateTable>({\n\t\t\tmethod: 'POST',\n\t\t\turl: `/tables/${tableId}`,\n\t\t\tdata: body,\n\t\t\tparams: {\n\t\t\t\tappId\n\t\t\t}\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Delete a table\n\t *\n\t * Deletes a specific table in an application, including all of the data within it.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/deleteTable)\n\t *\n\t * @param options Delete a table method options object\n\t * @param options.tableId The unique identifier (dbid) of the table.\n\t * @param options.appId The unique identifier of an app\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async deleteTable({ tableId, appId, requestOptions, returnAxios }: QuickBaseRequestDeleteTable & { returnAxios?: false }): Promise<QuickBaseResponseDeleteTable>;\n\tpublic async deleteTable({ tableId, appId, requestOptions, returnAxios }: QuickBaseRequestDeleteTable & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseDeleteTable>>;\n\tpublic async deleteTable({ tableId, appId, requestOptions, returnAxios = false }: QuickBaseRequestDeleteTable): Promise<QuickBaseResponseDeleteTable | AxiosResponse<QuickBaseResponseDeleteTable>> {\n\t\tconst results = await this.api<QuickBaseResponseDeleteTable>({\n\t\t\tmethod: 'DELETE',\n\t\t\turl: `/tables/${tableId}`,\n\t\t\tparams: {\n\t\t\t\tappId\n\t\t\t}\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Get all relationships\n\t *\n\t * Get a list of all relationships, and their definitions, for a specific table. Details are provided for the child side of relationships within a given application. Limited details are returned for cross-application relationships.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/getRelationships)\n\t *\n\t * @param options Get all relationships method options object\n\t * @param options.childTableId The unique identifier (dbid) of the child table.\n\t * @param options.skip The number of relationships to skip.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async getRelationships({ childTableId, skip, requestOptions, returnAxios }: QuickBaseRequestGetRelationships & { returnAxios?: false }): Promise<QuickBaseResponseGetRelationships>;\n\tpublic async getRelationships({ childTableId, skip, requestOptions, returnAxios }: QuickBaseRequestGetRelationships & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseGetRelationships>>;\n\tpublic async getRelationships({ childTableId, skip, requestOptions, returnAxios = false }: QuickBaseRequestGetRelationships): Promise<QuickBaseResponseGetRelationships | AxiosResponse<QuickBaseResponseGetRelationships>> {\n\t\tconst results = await this.api<QuickBaseResponseGetRelationships>({\n\t\t\tmethod: 'GET',\n\t\t\turl: `/tables/${childTableId}/relationships`,\n\t\t\tparams: {\n\t\t\t\tskip\n\t\t\t}\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Create a relationship\n\t *\n\t * Creates a relationship in a table as well as lookup/summary fields. Relationships can only be created for tables within the same app.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/createRelationship)\n\t *\n\t * @param options Create a relationship method options object\n\t * @param options.childTableId The unique identifier (dbid) of the table. This will be the child table.\n\t * @param options.summaryFields[].summaryFid The field id to summarize.\n\t * @param options.summaryFields[].label The label for the summary field.\n\t * @param options.summaryFields[].accumulationType The accumulation type for the summary field.\n\t * @param options.summaryFields[].where The filter, using the Quickbase query language, which determines the records to return.\n\t * @param options.lookupFieldIds Array of field ids in the parent table that will become lookup fields in the child table.\n\t * @param options.parentTableId The parent table id for the relationship.\n\t * @param options.foreignKeyField.label The label for the foreign key field.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async createRelationship({ childTableId, requestOptions, returnAxios, ...body }: QuickBaseRequestCreateRelationship & { returnAxios?: false }): Promise<QuickBaseResponseCreateRelationship>;\n\tpublic async createRelationship({ childTableId, requestOptions, returnAxios, ...body }: QuickBaseRequestCreateRelationship & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseCreateRelationship>>;\n\tpublic async createRelationship({ childTableId, requestOptions, returnAxios = false, ...body }: QuickBaseRequestCreateRelationship): Promise<QuickBaseResponseCreateRelationship | AxiosResponse<QuickBaseResponseCreateRelationship>> {\n\t\tconst results = await this.api<QuickBaseResponseCreateRelationship>({\n\t\t\tmethod: 'POST',\n\t\t\turl: `/tables/${childTableId}/relationship`,\n\t\t\tdata: body,\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Update a relationship\n\t *\n\t * Use this endpoint to add lookup fields and summary fields to an existing relationship. Updating a relationship will not delete existing lookup/summary fields.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/updateRelationship)\n\t *\n\t * @param options Update a relationship method options object\n\t * @param options.childTableId The unique identifier (dbid) of the table. This will be the child table.\n\t * @param options.relationshipId The relationship id. This is the field id of the reference field on the child table.\n\t * @param options.summaryFields[].summaryFid The field id to summarize.\n\t * @param options.summaryFields[].label The label for the summary field.\n\t * @param options.summaryFields[].accumulationType The accumulation type for the summary field.\n\t * @param options.summaryFields[].where The filter, using the Quickbase query language, which determines the records to return.\n\t * @param options.lookupFieldIds An array of field ids on the parent table that will become lookup fields on the child table.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async updateRelationship({ childTableId, relationshipId, requestOptions, returnAxios, ...body }: QuickBaseRequestUpdateRelationship & { returnAxios?: false }): Promise<QuickBaseResponseUpdateRelationship>;\n\tpublic async updateRelationship({ childTableId, relationshipId, requestOptions, returnAxios, ...body }: QuickBaseRequestUpdateRelationship & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseUpdateRelationship>>;\n\tpublic async updateRelationship({ childTableId, relationshipId, requestOptions, returnAxios = false, ...body }: QuickBaseRequestUpdateRelationship): Promise<QuickBaseResponseUpdateRelationship | AxiosResponse<QuickBaseResponseUpdateRelationship>> {\n\t\tconst results = await this.api<QuickBaseResponseUpdateRelationship>({\n\t\t\tmethod: 'POST',\n\t\t\turl: `/tables/${childTableId}/relationship/${relationshipId}`,\n\t\t\tdata: body,\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Delete a relationship\n\t *\n\t * Use this endpoint to delete an entire relationship, including all lookup and summary fields. The reference field in the relationship will not be deleted.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/deleteRelationship)\n\t *\n\t * @param options Delete a relationship method options object\n\t * @param options.childTableId The unique identifier (dbid) of the table. This will be the child table.\n\t * @param options.relationshipId The relationship id. This is the field id of the reference field on the child table.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async deleteRelationship({ childTableId, relationshipId, requestOptions, returnAxios }: QuickBaseRequestDeleteRelationship & { returnAxios?: false }): Promise<QuickBaseResponseDeleteRelationship>;\n\tpublic async deleteRelationship({ childTableId, relationshipId, requestOptions, returnAxios }: QuickBaseRequestDeleteRelationship & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseDeleteRelationship>>;\n\tpublic async deleteRelationship({ childTableId, relationshipId, requestOptions, returnAxios = false }: QuickBaseRequestDeleteRelationship): Promise<QuickBaseResponseDeleteRelationship | AxiosResponse<QuickBaseResponseDeleteRelationship>> {\n\t\tconst results = await this.api<QuickBaseResponseDeleteRelationship>({\n\t\t\tmethod: 'DELETE',\n\t\t\turl: `/tables/${childTableId}/relationship/${relationshipId}`,\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Get reports for a table\n\t *\n\t * Get the schema (properties) of all reports for a table. If the user running the API is an application administrator, the API will also return all personal reports with owner's user id.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/getTableReports)\n\t *\n\t * @param options Get reports for a table method options object\n\t * @param options.tableId The unique identifier of the table.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async getTableReports({ tableId, requestOptions, returnAxios }: QuickBaseRequestGetTableReports & { returnAxios?: false }): Promise<QuickBaseResponseGetTableReports>;\n\tpublic async getTableReports({ tableId, requestOptions, returnAxios }: QuickBaseRequestGetTableReports & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseGetTableReports>>;\n\tpublic async getTableReports({ tableId, requestOptions, returnAxios = false }: QuickBaseRequestGetTableReports): Promise<QuickBaseResponseGetTableReports | AxiosResponse<QuickBaseResponseGetTableReports>> {\n\t\tconst results = await this.api<QuickBaseResponseGetTableReports>({\n\t\t\tmethod: 'GET',\n\t\t\turl: `/reports`,\n\t\t\tparams: {\n\t\t\t\ttableId\n\t\t\t}\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Get a report\n\t *\n\t * Get the schema (properties) of an individual report.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/getReport)\n\t *\n\t * @param options Get a report method options object\n\t * @param options.reportId The identifier of the report, unique to the table.\n\t * @param options.tableId The unique identifier of table.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async getReport({ reportId, tableId, requestOptions, returnAxios }: QuickBaseRequestGetReport & { returnAxios?: false }): Promise<QuickBaseResponseGetReport>;\n\tpublic async getReport({ reportId, tableId, requestOptions, returnAxios }: QuickBaseRequestGetReport & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseGetReport>>;\n\tpublic async getReport({ reportId, tableId, requestOptions, returnAxios = false }: QuickBaseRequestGetReport): Promise<QuickBaseResponseGetReport | AxiosResponse<QuickBaseResponseGetReport>> {\n\t\tconst results = await this.api<QuickBaseResponseGetReport>({\n\t\t\tmethod: 'GET',\n\t\t\turl: `/reports/${reportId}`,\n\t\t\tparams: {\n\t\t\t\ttableId\n\t\t\t}\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Run a report\n\t *\n\t * Runs a report, based on an ID and returns the underlying data associated with it. The format of the data will vary based on the report type. Reports that focus on record-level data (table, calendar, etc.) return the individual records. Aggregate reports (summary, chart) will return the summarized information as configured in the report. UI-specific elements are not returned, such as totals, averages and visualizations. Returns data with intelligent pagination based on the approximate size of each record. The metadata object will include the necessary information to iterate over the response and gather more data.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/runReport)\n\t *\n\t * @param options Run a report method options object\n\t * @param options.reportId The identifier of the report, unique to the table.\n\t * @param options.tableId The identifier of the table for the report.\n\t * @param options.skip The number of records to skip. You can set this value when paginating through a set of results.\n\t * @param options.top The maximum number of records to return. You can override the default Quickbase pagination to get more or fewer results. If your requested value here exceeds the dynamic maximums, we will return a subset of results and the rest can be gathered in subsequent API calls.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async runReport({ reportId, tableId, skip, top, requestOptions, returnAxios }: QuickBaseRequestRunReport & { returnAxios?: false }): Promise<QuickBaseResponseRunReport>;\n\tpublic async runReport({ reportId, tableId, skip, top, requestOptions, returnAxios }: QuickBaseRequestRunReport & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseRunReport>>;\n\tpublic async runReport({ reportId, tableId, skip, top, requestOptions, returnAxios = false }: QuickBaseRequestRunReport): Promise<QuickBaseResponseRunReport | AxiosResponse<QuickBaseResponseRunReport>> {\n\t\tconst results = await this.api<QuickBaseResponseRunReport>({\n\t\t\tmethod: 'POST',\n\t\t\turl: `/reports/${reportId}/run`,\n\t\t\tparams: {\n\t\t\t\ttableId,\n\t\t\t\tskip,\n\t\t\t\ttop\n\t\t\t}\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Get fields for a table\n\t *\n\t * Gets the properties for all fields in a specific table. The properties for each field are the same as in Get field.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/getFields)\n\t *\n\t * @param options Get fields for a table method options object\n\t * @param options.tableId The unique identifier (dbid) of the table.\n\t * @param options.includeFieldPerms Set to 'true' if you'd like to get back the custom permissions for the field(s).\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async getFields({ tableId, includeFieldPerms, requestOptions, returnAxios }: QuickBaseRequestGetFields & { returnAxios?: false }): Promise<QuickBaseResponseGetFields>;\n\tpublic async getFields({ tableId, includeFieldPerms, requestOptions, returnAxios }: QuickBaseRequestGetFields & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseGetFields>>;\n\tpublic async getFields({ tableId, includeFieldPerms, requestOptions, returnAxios = false }: QuickBaseRequestGetFields): Promise<QuickBaseResponseGetFields | AxiosResponse<QuickBaseResponseGetFields>> {\n\t\tconst results = await this.api<QuickBaseResponseGetFields>({\n\t\t\tmethod: 'GET',\n\t\t\turl: `/fields`,\n\t\t\tparams: {\n\t\t\t\ttableId,\n\t\t\t\tincludeFieldPerms\n\t\t\t}\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Create a field\n\t *\n\t * Creates a field within a table, including the custom permissions of that field.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/createField)\n\t *\n\t * @param options Create a field method options object\n\t * @param options.tableId The unique identifier of the table.\n\t * @param options.audited Indicates if the field is being tracked as part of Quickbase Audit Logs. You can only set this property to \"true\" if the app has audit logs enabled. See Enable data change logs under [Quickbase Audit Logs](https://help.quickbase.com/user-assistance/audit_logs.html). Defaults to false.\n\t * @param options.fieldHelp The configured help text shown to users within the product.\n\t * @param options.bold Indicates if the field is configured to display in bold in the product. Defaults to false.\n\t * @param options.properties.comments The comments entered on the field properties by an administrator.\n\t * @param options.properties.doesTotal Whether this field totals in reports within the product.\n\t * @param options.properties.autoSave Whether the link field will auto save.\n\t * @param options.properties.defaultValueLuid Default user id value.\n\t * @param options.properties.useI18NFormat Whether phone numbers should be in E.164 standard international format\n\t * @param options.properties.maxVersions The maximum number of versions configured for a file attachment.\n\t * @param options.properties.format The format to display time.\n\t * @param options.properties.carryChoices Whether the field should carry its multiple choice fields when copied.\n\t * @param options.properties.maxLength The maximum number of characters allowed for entry in Quickbase for this field.\n\t * @param options.properties.linkText The configured text value that replaces the URL that users see within the product.\n\t * @param options.properties.parentFieldId The id of the parent composite field, when applicable.\n\t * @param options.properties.displayTimezone Indicates whether to display the timezone within the product.\n\t * @param options.properties.allowNewChoices Indicates if users can add new choices to a selection list.\n\t * @param options.properties.defaultToday Indicates if the field value is defaulted today for new records.\n\t * @param options.properties.units The units label.\n\t * @param options.properties.openTargetIn Indicates which target the URL should open in when a user clicks it within the product.\n\t * @param options.properties.sourceFieldId The id of the source field.\n\t * @param options.properties.doesAverage Whether this field averages in reports within the product.\n\t * @param options.properties.formula The formula of the field as configured in Quickbase.\n\t * @param options.properties.decimalPlaces The number of decimal places displayed in the product for this field.\n\t * @param options.properties.defaultCountryCode Controls the default country shown on international phone widgets on forms. Country code should be entered in the ISO 3166-1 alpha-2 format.\n\t * @param options.properties.displayMonth How to display months.\n\t * @param options.properties.seeVersions Indicates if the user can see other versions, aside from the most recent, of a file attachment within the product.\n\t * @param options.properties.numLines The number of lines shown in Quickbase for this text field.\n\t * @param options.properties.defaultKind The user default type.\n\t * @param options.properties.displayEmail How the email is displayed.\n\t * @param options.properties.coverText An alternate user friendly text that can be used to display a link in the browser.\n\t * @param options.properties.currencySymbol The current symbol used when displaying field values within the product.\n\t * @param options.properties.targetFieldId The id of the target field.\n\t * @param options.properties.displayUser The configured option for how users display within the product.\n\t * @param options.properties.blankIsZero Whether a blank value is treated the same as 0 in calculations within the product.\n\t * @param options.properties.exact Whether an exact match is required for a report link.\n\t * @param options.properties.defaultDomain Default email domain.\n\t * @param options.properties.defaultValue The default value configured for a field when a new record is added.\n\t * @param options.properties.abbreviate Don't show the URL protocol when showing the URL.\n\t * @param options.properties.numberFormat The format used for displaying numeric values in the product (decimal, separators, digit group).\n\t * @param options.properties.targetTableName The field's target table name.\n\t * @param options.properties.appearsAs The link text, if empty, the url will be used as link text.\n\t * @param options.properties.width The field's html input width in the product.\n\t * @param options.properties.currencyFormat The currency format used when displaying field values within the product.\n\t * @param options.properties.displayDayOfWeek Indicates whether to display the day of the week within the product.\n\t * @param options.properties.commaStart The number of digits before commas display in the product, when applicable.\n\t * @param options.properties.choices An array of entries that exist for a field that offers choices to the user. Note that these choices refer to the valid values of any records added in the future. You are allowed to remove values from the list of choices even if there are existing records with those values in this field. They will be displayed in red when users look at the data in the browser but there is no other effect. While updating a field with this property, the old choices are removed and replaced by the new choices.\n\t * @param options.properties.targetTableId The id of the target table.\n\t * @param options.properties.displayRelative Whether to display time as relative.\n\t * @param options.properties.compositeFields An array of the fields that make up a composite field (e.g., address).\n\t * @param options.properties.displayCheckboxAsText Indicates whether the checkbox values will be shown as text in reports.\n\t * @param options.properties.displayTime Indicates whether to display the time, in addition to the date.\n\t * @param options.properties.versionMode Version modes for files. Keep all versions vs keep last version.\n\t * @param options.properties.snapFieldId The id of the field that is used to snapshot values from, when applicable.\n\t * @param options.properties.hours24 Indicates whether or not to display time in the 24-hour format within the product.\n\t * @param options.properties.sortAlpha Whether to sort alphabetically, default sort is by record ID.\n\t * @param options.properties.sortAsGiven Indicates if the listed entries sort as entered vs alphabetically.\n\t * @param options.properties.hasExtension Whether this field has a phone extension.\n\t * @param options.properties.useNewWindow Indicates if the file should open a new window when a user clicks it within the product.\n\t * @param options.properties.appendOnly Whether this field is append only.\n\t * @param options.properties.displayAsLink Indicates if a field that is part of the relationship should be shown as a hyperlink to the parent record within the product.\n\t * @param options.appearsByDefault Indicates if the field is marked as a default in reports. Defaults to true.\n\t * @param options.fieldType The [field types](https://help.quickbase.com/user-assistance/field_types.html), click on any of the field type links for more info.\n\t * @param options.permissions[].role The role associated with a given permission for the field\n\t * @param options.permissions[].permissionType The permission given to the role for this field\n\t * @param options.permissions[].roleId The Id of the given role\n\t * @param options.addToForms Whether the field you are adding should appear on forms. Defaults to false.\n\t * @param options.label The label (name) of the field.\n\t * @param options.findEnabled Indicates if the field is marked as searchable. Defaults to true.\n\t * @param options.noWrap Indicates if the field is configured to not wrap when displayed in the product. Defaults to false.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async createField({ tableId, requestOptions, returnAxios, ...body }: QuickBaseRequestCreateField & { returnAxios?: false }): Promise<QuickBaseResponseCreateField>;\n\tpublic async createField({ tableId, requestOptions, returnAxios, ...body }: QuickBaseRequestCreateField & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseCreateField>>;\n\tpublic async createField({ tableId, requestOptions, returnAxios = false, ...body }: QuickBaseRequestCreateField): Promise<QuickBaseResponseCreateField | AxiosResponse<QuickBaseResponseCreateField>> {\n\t\tconst results = await this.api<QuickBaseResponseCreateField>({\n\t\t\tmethod: 'POST',\n\t\t\turl: `/fields`,\n\t\t\tdata: body,\n\t\t\tparams: {\n\t\t\t\ttableId\n\t\t\t}\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Delete field(s)\n\t *\n\t * Deletes one or many fields in a table, based on field id. This will also permanently delete any data or calculations in that field.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/deleteFields)\n\t *\n\t * @param options Delete field(s) method options object\n\t * @param options.tableId The unique identifier of the table.\n\t * @param options.fieldIds List of field ids to be deleted.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async deleteFields({ tableId, requestOptions, returnAxios, ...body }: QuickBaseRequestDeleteFields & { returnAxios?: false }): Promise<QuickBaseResponseDeleteFields>;\n\tpublic async deleteFields({ tableId, requestOptions, returnAxios, ...body }: QuickBaseRequestDeleteFields & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseDeleteFields>>;\n\tpublic async deleteFields({ tableId, requestOptions, returnAxios = false, ...body }: QuickBaseRequestDeleteFields): Promise<QuickBaseResponseDeleteFields | AxiosResponse<QuickBaseResponseDeleteFields>> {\n\t\tconst results = await this.api<QuickBaseResponseDeleteFields>({\n\t\t\tmethod: 'DELETE',\n\t\t\turl: `/fields`,\n\t\t\tdata: body,\n\t\t\tparams: {\n\t\t\t\ttableId\n\t\t\t}\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Get field\n\t *\n\t * Gets the properties of an individual field, based on field id.  \n\t * Properties present on all field types are returned at the top level. Properties unique to a specific type of field are returned under the 'properties' attribute. Please see [Field types page](../fieldInfo) for more details on the properties for each field type.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/getField)\n\t *\n\t * @param options Get field method options object\n\t * @param options.fieldId The unique identifier (fid) of the field.\n\t * @param options.tableId The unique identifier (dbid) of the table.\n\t * @param options.includeFieldPerms Set to 'true' if you'd like to get back the custom permissions for the field(s).\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async getField({ fieldId, tableId, includeFieldPerms, requestOptions, returnAxios }: QuickBaseRequestGetField & { returnAxios?: false }): Promise<QuickBaseResponseGetField>;\n\tpublic async getField({ fieldId, tableId, includeFieldPerms, requestOptions, returnAxios }: QuickBaseRequestGetField & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseGetField>>;\n\tpublic async getField({ fieldId, tableId, includeFieldPerms, requestOptions, returnAxios = false }: QuickBaseRequestGetField): Promise<QuickBaseResponseGetField | AxiosResponse<QuickBaseResponseGetField>> {\n\t\tconst results = await this.api<QuickBaseResponseGetField>({\n\t\t\tmethod: 'GET',\n\t\t\turl: `/fields/${fieldId}`,\n\t\t\tparams: {\n\t\t\t\ttableId,\n\t\t\t\tincludeFieldPerms\n\t\t\t}\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Update a field\n\t *\n\t * Updates the properties and custom permissions of a field. The attempt to update certain properties might cause existing data to no longer obey the field\u2019s new properties and may be rejected. See the descriptions of required, unique, and choices, below, for specific situations. Any properties of the field that you do not specify in the request body will remain unchanged.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/updateField)\n\t *\n\t * @param options Update a field method options object\n\t * @param options.fieldId The unique identifier (fid) of the field.\n\t * @param options.tableId The unique identifier of the table.\n\t * @param options.audited Indicates if the field is being tracked as part of Quickbase Audit Logs. You can only set this property to \"true\" if the app has audit logs enabled. See Enable data change logs under [Quickbase Audit Logs](https://help.quickbase.com/user-assistance/audit_logs.html).\n\t * @param options.fieldHelp The configured help text shown to users within the product.\n\t * @param options.bold Indicates if the field is configured to display in bold in the product.\n\t * @param options.required Indicates if the field is required (i.e. if every record must have a non-null value in this field). If you attempt to change a field from not-required to required, and the table currently contains records that have null values in that field, you will get an error indicating that there are null values of the field. In this case you need to find and update those records with null values of the field before changing the field to required.\n\t * @param options.properties.comments The comments entered on the field properties by an administrator.\n\t * @param options.properties.doesTotal Whether this field totals in reports within the product.\n\t * @param options.properties.autoSave Whether the link field will auto save.\n\t * @param options.properties.defaultValueLuid Default user id value.\n\t * @param options.properties.useI18NFormat Whether phone numbers should be in E.164 standard international format\n\t * @param options.properties.maxVersions The maximum number of versions configured for a file attachment.\n\t * @param options.properties.format The format to display time.\n\t * @param options.properties.carryChoices Whether the field should carry its multiple choice fields when copied.\n\t * @param options.properties.maxLength The maximum number of characters allowed for entry in Quickbase for this field.\n\t * @param options.properties.linkText The configured text value that replaces the URL that users see within the product.\n\t * @param options.properties.parentFieldId The id of the parent composite field, when applicable.\n\t * @param options.properties.displayTimezone Indicates whether to display the timezone within the product.\n\t * @param options.properties.summaryTargetFieldId The id of the field that is used to aggregate values from the child, when applicable. This displays 0 if the summary function doesn\u2019t require a field selection (like count).\n\t * @param options.properties.allowNewChoices Indicates if users can add new choices to a selection list.\n\t * @param options.properties.defaultToday Indicates if the field value is defaulted today for new records.\n\t * @param options.properties.units The units label.\n\t * @param options.properties.openTargetIn Indicates which target the URL should open in when a user clicks it within the product.\n\t * @param options.properties.lookupTargetFieldId The id of the field that is the target on the parent table for this lookup.\n\t * @param options.properties.summaryFunction The accumulation type for the summary field.\n\t * @param options.properties.sourceFieldId The id of the source field.\n\t * @param options.properties.doesAverage Whether this field averages in reports within the product.\n\t * @param options.properties.formula The formula of the field as configured in Quickbase.\n\t * @param options.properties.decimalPlaces The number of decimal places displayed in the product for this field.\n\t * @param options.properties.defaultCountryCode Controls the default country shown on international phone widgets on forms. Country code should be entered in the ISO 3166-1 alpha-2 format.\n\t * @param options.properties.displayMonth How to display months.\n\t * @param options.properties.seeVersions Indicates if the user can see other versions, aside from the most recent, of a file attachment within the product.\n\t * @param options.properties.numLines The number of lines shown in Quickbase for this text field.\n\t * @param options.properties.defaultKind The user default type.\n\t * @param options.properties.displayEmail How the email is displayed.\n\t * @param options.properties.coverText An alternate user friendly text that can be used to display a link in the browser.\n\t * @param options.properties.currencySymbol The current symbol used when displaying field values within the product.\n\t * @param options.properties.summaryQuery The summary query.\n\t * @param options.properties.targetFieldId The id of the target field.\n\t * @param options.properties.displayUser The configured option for how users display within the product.\n\t * @param options.properties.blankIsZero Whether a blank value is treated the same as 0 in calculations within the product.\n\t * @param options.properties.exact Whether an exact match is required for a report link.\n\t * @param options.properties.defaultDomain Default email domain.\n\t * @param options.properties.defaultValue The default value configured for a field when a new record is added.\n\t * @param options.properties.abbreviate Don't show the URL protocol when showing the URL.\n\t * @param options.properties.numberFormat The format used for displaying numeric values in the product (decimal, separators, digit group).\n\t * @param options.properties.targetTableName The field's target table name.\n\t * @param options.properties.appearsAs The link text, if empty, the url will be used as link text.\n\t * @param options.properties.width The field's html input width in the product.\n\t * @param options.properties.currencyFormat The currency format used when displaying field values within the product.\n\t * @param options.properties.displayDayOfWeek Indicates whether to display the day of the week within the product.\n\t * @param options.properties.summaryReferenceFieldId The id of the field that is the reference in the relationship for this summary.\n\t * @param options.properties.commaStart The number of digits before commas display in the product, when applicable.\n\t * @param options.properties.choices An array of entries that exist for a field that offers choices to the user. Note that these choices refer to the valid values of any records added in the future. You are allowed to remove values from the list of choices even if there are existing records with those values in this field. They will be displayed in red when users look at the data in the browser but there is no other effect. While updating a field with this property, the old choices are removed and replaced by the new choices.\n\t * @param options.properties.targetTableId The id of the target table.\n\t * @param options.properties.displayRelative Whether to display time as relative.\n\t * @param options.properties.compositeFields An array of the fields that make up a composite field (e.g., address).\n\t * @param options.properties.displayCheckboxAsText Indicates whether the checkbox values will be shown as text in reports.\n\t * @param options.properties.summaryTableId The table the summary field references fields from.\n\t * @param options.properties.displayTime Indicates whether to display the time, in addition to the date.\n\t * @param options.properties.versionMode Version modes for files. Keep all versions vs keep last version.\n\t * @param options.properties.snapFieldId The id of the field that is used to snapshot values from, when applicable.\n\t * @param options.properties.hours24 Indicates whether or not to display time in the 24-hour format within the product.\n\t * @param options.properties.sortAlpha Whether to sort alphabetically, default sort is by record ID.\n\t * @param options.properties.sortAsGiven Indicates if the listed entries sort as entered vs alphabetically.\n\t * @param options.properties.hasExtension Whether this field has a phone extension.\n\t * @param options.properties.useNewWindow Indicates if the file should open a new window when a user clicks it within the product.\n\t * @param options.properties.appendOnly Whether this field is append only.\n\t * @param options.properties.displayAsLink Indicates if a field that is part of the relationship should be shown as a hyperlink to the parent record within the product.\n\t * @param options.properties.lookupReferenceFieldId The id of the field that is the reference in the relationship for this lookup.\n\t * @param options.appearsByDefault Indicates if the field is marked as a default in reports.\n\t * @param options.unique Indicates if every record in the table must contain a unique value of this field. If you attempt to change a field from not-unique to unique, and the table currently contains records with the same value of this field, you will get an error. In this case you need to find and update those records with duplicate values of the field before changing the field to unique.\n\t * @param options.permissions[].role The role associated with a given permission for the field\n\t * @param options.permissions[].permissionType The permission given to the role for this field\n\t * @param options.permissions[].roleId The Id of the given role\n\t * @param options.addToForms Whether the field you are adding should appear on forms.\n\t * @param options.label The label (name) of the field.\n\t * @param options.findEnabled Indicates if the field is marked as searchable.\n\t * @param options.noWrap Indicates if the field is configured to not wrap when displayed in the product.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async updateField({ fieldId, tableId, requestOptions, returnAxios, ...body }: QuickBaseRequestUpdateField & { returnAxios?: false }): Promise<QuickBaseResponseUpdateField>;\n\tpublic async updateField({ fieldId, tableId, requestOptions, returnAxios, ...body }: QuickBaseRequestUpdateField & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseUpdateField>>;\n\tpublic async updateField({ fieldId, tableId, requestOptions, returnAxios = false, ...body }: QuickBaseRequestUpdateField): Promise<QuickBaseResponseUpdateField | AxiosResponse<QuickBaseResponseUpdateField>> {\n\t\tconst results = await this.api<QuickBaseResponseUpdateField>({\n\t\t\tmethod: 'POST',\n\t\t\turl: `/fields/${fieldId}`,\n\t\t\tdata: body,\n\t\t\tparams: {\n\t\t\t\ttableId\n\t\t\t}\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Get usage for all fields\n\t *\n\t * Get all the field usage statistics for a table. This is a summary of the information that can be found in the usage table of field properties.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/getFieldsUsage)\n\t *\n\t * @param options Get usage for all fields method options object\n\t * @param options.tableId The unique identifier (dbid) of the table.\n\t * @param options.skip The number of fields to skip from the list.\n\t * @param options.top The maximum number of fields to return.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async getFieldsUsage({ tableId, skip, top, requestOptions, returnAxios }: QuickBaseRequestGetFieldsUsage & { returnAxios?: false }): Promise<QuickBaseResponseGetFieldsUsage>;\n\tpublic async getFieldsUsage({ tableId, skip, top, requestOptions, returnAxios }: QuickBaseRequestGetFieldsUsage & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseGetFieldsUsage>>;\n\tpublic async getFieldsUsage({ tableId, skip, top, requestOptions, returnAxios = false }: QuickBaseRequestGetFieldsUsage): Promise<QuickBaseResponseGetFieldsUsage | AxiosResponse<QuickBaseResponseGetFieldsUsage>> {\n\t\tconst results = await this.api<QuickBaseResponseGetFieldsUsage>({\n\t\t\tmethod: 'GET',\n\t\t\turl: `/fields/usage`,\n\t\t\tparams: {\n\t\t\t\ttableId,\n\t\t\t\tskip,\n\t\t\t\ttop\n\t\t\t}\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Get usage for a field\n\t *\n\t * Get a single fields usage statistics. This is a summary of the information that can be found in the usage table of field properties.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/getFieldUsage)\n\t *\n\t * @param options Get usage for a field method options object\n\t * @param options.fieldId The unique identifier (fid) of the field.\n\t * @param options.tableId The unique identifier (dbid) of the table.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async getFieldUsage({ fieldId, tableId, requestOptions, returnAxios }: QuickBaseRequestGetFieldUsage & { returnAxios?: false }): Promise<QuickBaseResponseGetFieldUsage>;\n\tpublic async getFieldUsage({ fieldId, tableId, requestOptions, returnAxios }: QuickBaseRequestGetFieldUsage & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseGetFieldUsage>>;\n\tpublic async getFieldUsage({ fieldId, tableId, requestOptions, returnAxios = false }: QuickBaseRequestGetFieldUsage): Promise<QuickBaseResponseGetFieldUsage | AxiosResponse<QuickBaseResponseGetFieldUsage>> {\n\t\tconst results = await this.api<QuickBaseResponseGetFieldUsage>({\n\t\t\tmethod: 'GET',\n\t\t\turl: `/fields/usage/${fieldId}`,\n\t\t\tparams: {\n\t\t\t\ttableId\n\t\t\t}\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Run a formula\n\t *\n\t * Allows running a formula via an API call. Use this method in custom code to get the value back of a formula without a discrete field on a record.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/runFormula)\n\t *\n\t * @param options Run a formula method options object\n\t * @param options.formula The formula to run. This must be a valid Quickbase formula.\n\t * @param options.rid The record ID to run the formula against. Only necessary for formulas that are run in the context of a record. For example, the formula User() does not need a record ID.\n\t * @param options.tableId The unique identifier (dbid) of the table.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async runFormula({ tableId, requestOptions, returnAxios, ...body }: QuickBaseRequestRunFormula & { returnAxios?: false }): Promise<QuickBaseResponseRunFormula>;\n\tpublic async runFormula({ tableId, requestOptions, returnAxios, ...body }: QuickBaseRequestRunFormula & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseRunFormula>>;\n\tpublic async runFormula({ tableId, requestOptions, returnAxios = false, ...body }: QuickBaseRequestRunFormula): Promise<QuickBaseResponseRunFormula | AxiosResponse<QuickBaseResponseRunFormula>> {\n\t\tconst results = await this.api<QuickBaseResponseRunFormula>({\n\t\t\tmethod: 'POST',\n\t\t\turl: `/formula/run`,\n\t\t\tdata: {\n\t\t\t\tfrom: tableId,\n\t\t\t\t...body\n\t\t\t},\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Insert/Update record(s)\n\t *\n\t * Insert and/or update record(s) in a table. In this single API call, inserts and updates can be submitted. Update can use the key field on the table, or any other supported unique field. Refer to the [Field types page](../fieldInfo) for more information about how each field type should be formatted. This operation allows for incremental processing of successful records, even when some of the records fail.  \n\t * **Note:** This endpoint supports a maximum payload size of 25MB.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/upsert)\n\t *\n\t * @param options Insert/Update record(s) method options object\n\t * @param options.tableId The table identifier.\n\t * @param options.data Record data array, where each record contains key-value mappings of fields to be defined/updated and their values.\n\t * @param options.mergeFieldId The merge field id.\n\t * @param options.fieldsToReturn Specify an array of field ids that will return data for any updates or added record. Record ID (FID 3) is always returned if any field ID is requested.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async upsert({ tableId, requestOptions, returnAxios, ...body }: QuickBaseRequestUpsert & { returnAxios?: false }): Promise<QuickBaseResponseUpsert>;\n\tpublic async upsert({ tableId, requestOptions, returnAxios, ...body }: QuickBaseRequestUpsert & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseUpsert>>;\n\tpublic async upsert({ tableId, requestOptions, returnAxios = false, ...body }: QuickBaseRequestUpsert): Promise<QuickBaseResponseUpsert | AxiosResponse<QuickBaseResponseUpsert>> {\n\t\tconst results = await this.api<QuickBaseResponseUpsert>({\n\t\t\tmethod: 'POST',\n\t\t\turl: `/records`,\n\t\t\tdata: {\n\t\t\t\tto: tableId,\n\t\t\t\t...body\n\t\t\t},\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Delete record(s)\n\t *\n\t * Deletes record(s) in a table based on a query. Alternatively, all records in the table can be deleted.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/deleteRecords)\n\t *\n\t * @param options Delete record(s) method options object\n\t * @param options.tableId The unique identifier of the table.\n\t * @param options.where The filter to delete records. To delete all records specify a filter that will include all records, for example \\{3.GT.0\\} where 3 is the ID of the Record ID field.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async deleteRecords({ tableId, requestOptions, returnAxios, ...body }: QuickBaseRequestDeleteRecords & { returnAxios?: false }): Promise<QuickBaseResponseDeleteRecords>;\n\tpublic async deleteRecords({ tableId, requestOptions, returnAxios, ...body }: QuickBaseRequestDeleteRecords & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseDeleteRecords>>;\n\tpublic async deleteRecords({ tableId, requestOptions, returnAxios = false, ...body }: QuickBaseRequestDeleteRecords): Promise<QuickBaseResponseDeleteRecords | AxiosResponse<QuickBaseResponseDeleteRecords>> {\n\t\tconst results = await this.api<QuickBaseResponseDeleteRecords>({\n\t\t\tmethod: 'DELETE',\n\t\t\turl: `/records`,\n\t\t\tdata: {\n\t\t\t\tfrom: tableId,\n\t\t\t\t...body\n\t\t\t},\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Query for data\n\t *\n\t * Pass in a query in the [Quickbase query language](https://help.quickbase.com/api-guide/componentsquery.html). Returns record data with [intelligent pagination](../pagination) based on the approximate size of each record. The metadata object will include the necessary information to iterate over the response and gather more data.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/runQuery)\n\t *\n\t * @param options Query for data method options object\n\t * @param options.options.skip The number of records to skip.\n\t * @param options.options.compareWithAppLocalTime Whether to run the query against a date time field with respect to the application's local time. The query is run with UTC time by default.\n\t * @param options.options.top The maximum number of records to display.\n\t * @param options.where The filter, using the Quickbase query language, which determines the records to return. If this parameter is omitted, the query will return all records.\n\t * @param options.groupBy[].fieldId The unique identifier of a field in a table.\n\t * @param options.groupBy[].grouping Group by based on equal values (equal-values)\n\t * @param options.sortBy[].fieldId The unique identifier of a field in a table.\n\t * @param options.sortBy[].order Sort based on ascending order (ASC), descending order (DESC) or equal values (equal-values)\n\t * @param options.select An array of field ids for the fields that should be returned in the response. If empty, the default columns on the table will be returned.\n\t * @param options.tableId The table identifier.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async runQuery({ tableId, requestOptions, returnAxios, ...body }: QuickBaseRequestRunQuery & { returnAxios?: false }): Promise<QuickBaseResponseRunQuery>;\n\tpublic async runQuery({ tableId, requestOptions, returnAxios, ...body }: QuickBaseRequestRunQuery & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseRunQuery>>;\n\tpublic async runQuery({ tableId, requestOptions, returnAxios = false, ...body }: QuickBaseRequestRunQuery): Promise<QuickBaseResponseRunQuery | AxiosResponse<QuickBaseResponseRunQuery>> {\n\t\tconst results = await this.api<QuickBaseResponseRunQuery>({\n\t\t\tmethod: 'POST',\n\t\t\turl: `/records/query`,\n\t\t\tdata: {\n\t\t\t\tfrom: tableId,\n\t\t\t\t...body\n\t\t\t},\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Get a temporary token for a dbid\n\t *\n\t * Use this endpoint to get a temporary authorization token, scoped to either an app or a table. It can only be used inside of code pages for client-side authentication because it relies on the browser session. Learn more about [extending Quickbase](https://helpv2.quickbase.com/hc/en-us/articles/4570341709844-Extending-Quickbase). You can then use this token to make other API calls (see [authorization](../auth)).  This token expires in 5 minutes.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/getTempTokenDBID)\n\t *\n\t * @param options Get a temporary token for a dbid method options object\n\t * @param options.dbid The unique identifier of an app or table.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async getTempTokenDBID({ dbid, requestOptions, returnAxios }: QuickBaseRequestGetTempTokenDBID & { returnAxios?: false }): Promise<QuickBaseResponseGetTempTokenDBID>;\n\tpublic async getTempTokenDBID({ dbid, requestOptions, returnAxios }: QuickBaseRequestGetTempTokenDBID & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseGetTempTokenDBID>>;\n\tpublic async getTempTokenDBID({ dbid, requestOptions, returnAxios = false }: QuickBaseRequestGetTempTokenDBID): Promise<QuickBaseResponseGetTempTokenDBID | AxiosResponse<QuickBaseResponseGetTempTokenDBID>> {\n\t\tconst results = await this.api<QuickBaseResponseGetTempTokenDBID>({\n\t\t\tmethod: 'GET',\n\t\t\turl: `/auth/temporary/${dbid}`,\n\t\t\twithCredentials: true,\n\t\t}, requestOptions);\n\t\n\t\tthis.setTempToken(dbid, results.data.temporaryAuthorization);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Exchange an SSO token\n\t *\n\t * Use this endpoint to exchange a SAML assertion for a Quickbase token following [RFC 8693](https://www.rfc-editor.org/rfc/rfc8693.html). Callers can choose to return a token compatible with SCIM, XML, or RESTful APIs. The token duration is determined by the [SAML timeout session time](https://helpv2.quickbase.com/hc/en-us/articles/4570410646420-SAML-assertion-example#:~:text=Setting%20SAML%20timeout%20session%20time). You must be able to create a SAML assertion in your code to use this endpoint. The SAML assertion is verified against the configuration on the realm. Learn more about about [SAML assertions](https://helpv2.quickbase.com/hc/en-us/articles/4570410646420-SAML-assertion-example).\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/exchangeSsoToken)\n\t *\n\t * @param options Exchange an SSO token method options object\n\t * @param options.grant_type The value `urn:ietf:params:oauth:grant-type:token-exchange` indicates that a token exchange is being performed.\n\t * @param options.requested_token_type An identifier for the type of the requested security token. For the RESTful API, use `urn:quickbase:params:oauth:token-type:temp_token`. For the XML or SCIM APIs use `urn:quickbase:params:oauth:token-type:temp_ticket`.\n\t * @param options.subject_token A security token that represents the identity of the party on behalf of whom the request is being made. For SAML 2.0, the value should be a base64url-encoded SAML 2.0 assertion.\n\t * @param options.subject_token_type An identifier that indicates the type of the security token in the `subject_token` parameter.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async exchangeSsoToken({ requestOptions, returnAxios, ...body }: QuickBaseRequestExchangeSsoToken & { returnAxios?: false }): Promise<QuickBaseResponseExchangeSsoToken>;\n\tpublic async exchangeSsoToken({ requestOptions, returnAxios, ...body }: QuickBaseRequestExchangeSsoToken & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseExchangeSsoToken>>;\n\tpublic async exchangeSsoToken({ requestOptions, returnAxios = false, ...body }: QuickBaseRequestExchangeSsoToken): Promise<QuickBaseResponseExchangeSsoToken | AxiosResponse<QuickBaseResponseExchangeSsoToken>> {\n\t\tconst results = await this.api<QuickBaseResponseExchangeSsoToken>({\n\t\t\tmethod: 'POST',\n\t\t\turl: `/auth/oauth/token`,\n\t\t\tdata: body,\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Clone a user token\n\t *\n\t * Clones the authenticated user token. All applications associated with that token are automatically associated with the new token.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/cloneUserToken)\n\t *\n\t * @param options Clone a user token method options object\n\t * @param options.name The new name for the cloned user token.\n\t * @param options.description The description for the cloned user token.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async cloneUserToken({ requestOptions, returnAxios, ...body }: QuickBaseRequestCloneUserToken & { returnAxios?: false }): Promise<QuickBaseResponseCloneUserToken>;\n\tpublic async cloneUserToken({ requestOptions, returnAxios, ...body }: QuickBaseRequestCloneUserToken & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseCloneUserToken>>;\n\tpublic async cloneUserToken({ requestOptions, returnAxios = false, ...body }: QuickBaseRequestCloneUserToken): Promise<QuickBaseResponseCloneUserToken | AxiosResponse<QuickBaseResponseCloneUserToken>> {\n\t\tconst results = await this.api<QuickBaseResponseCloneUserToken>({\n\t\t\tmethod: 'POST',\n\t\t\turl: `/usertoken/clone`,\n\t\t\tdata: body,\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Deactivate a user token\n\t *\n\t * Deactivates the authenticated user token. Once this is done, the user token must be reactivated in the user interface.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/deactivateUserToken)\n\t *\n\t * @param options Deactivate a user token method options object\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async deactivateUserToken({ requestOptions, returnAxios }: QuickBaseRequestDeactivateUserToken & { returnAxios?: false }): Promise<QuickBaseResponseDeactivateUserToken>;\n\tpublic async deactivateUserToken({ requestOptions, returnAxios }: QuickBaseRequestDeactivateUserToken & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseDeactivateUserToken>>;\n\tpublic async deactivateUserToken({ requestOptions, returnAxios = false }: QuickBaseRequestDeactivateUserToken = {}): Promise<QuickBaseResponseDeactivateUserToken | AxiosResponse<QuickBaseResponseDeactivateUserToken>> {\n\t\tconst results = await this.api<QuickBaseResponseDeactivateUserToken>({\n\t\t\tmethod: 'POST',\n\t\t\turl: `/usertoken/deactivate`,\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Delete a user token\n\t *\n\t * Deletes the authenticated user token. This is not reversible.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/deleteUserToken)\n\t *\n\t * @param options Delete a user token method options object\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async deleteUserToken({ requestOptions, returnAxios }: QuickBaseRequestDeleteUserToken & { returnAxios?: false }): Promise<QuickBaseResponseDeleteUserToken>;\n\tpublic async deleteUserToken({ requestOptions, returnAxios }: QuickBaseRequestDeleteUserToken & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseDeleteUserToken>>;\n\tpublic async deleteUserToken({ requestOptions, returnAxios = false }: QuickBaseRequestDeleteUserToken = {}): Promise<QuickBaseResponseDeleteUserToken | AxiosResponse<QuickBaseResponseDeleteUserToken>> {\n\t\tconst results = await this.api<QuickBaseResponseDeleteUserToken>({\n\t\t\tmethod: 'DELETE',\n\t\t\turl: `/usertoken`,\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Download file\n\t *\n\t * Downloads the file attachment, with the file attachment content encoded in base64 format. The API response returns the file name in the `Content-Disposition` header. Meta-data about files can be retrieved from the /records and /reports endpoints, where applicable. Use those endpoints to get the necessary information to fetch files.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/downloadFile)\n\t *\n\t * @param options Download file method options object\n\t * @param options.tableId The unique identifier of the table.\n\t * @param options.recordId The unique identifier of the record.\n\t * @param options.fieldId The unique identifier of the field.\n\t * @param options.versionNumber The file attachment version number.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async downloadFile({ tableId, recordId, fieldId, versionNumber, requestOptions, returnAxios }: QuickBaseRequestDownloadFile & { returnAxios?: false }): Promise<QuickBaseResponseDownloadFile>;\n\tpublic async downloadFile({ tableId, recordId, fieldId, versionNumber, requestOptions, returnAxios }: QuickBaseRequestDownloadFile & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseDownloadFile>>;\n\tpublic async downloadFile({ tableId, recordId, fieldId, versionNumber, requestOptions, returnAxios = false }: QuickBaseRequestDownloadFile): Promise<QuickBaseResponseDownloadFile | AxiosResponse<QuickBaseResponseDownloadFile>> {\n\t\tconst results = await this.api<QuickBaseResponseDownloadFile>({\n\t\t\tmethod: 'GET',\n\t\t\turl: `/files/${tableId}/${recordId}/${fieldId}/${versionNumber}`,\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Delete file\n\t *\n\t * Deletes one file attachment version. Meta-data about files can be retrieved from the /records and /reports endpoints, where applicable. Use those endpoints to get the necessary information to delete file versions.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/deleteFile)\n\t *\n\t * @param options Delete file method options object\n\t * @param options.tableId The unique identifier of the table.\n\t * @param options.recordId The unique identifier of the record.\n\t * @param options.fieldId The unique identifier of the field.\n\t * @param options.versionNumber The file attachment version number.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async deleteFile({ tableId, recordId, fieldId, versionNumber, requestOptions, returnAxios }: QuickBaseRequestDeleteFile & { returnAxios?: false }): Promise<QuickBaseResponseDeleteFile>;\n\tpublic async deleteFile({ tableId, recordId, fieldId, versionNumber, requestOptions, returnAxios }: QuickBaseRequestDeleteFile & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseDeleteFile>>;\n\tpublic async deleteFile({ tableId, recordId, fieldId, versionNumber, requestOptions, returnAxios = false }: QuickBaseRequestDeleteFile): Promise<QuickBaseResponseDeleteFile | AxiosResponse<QuickBaseResponseDeleteFile>> {\n\t\tconst results = await this.api<QuickBaseResponseDeleteFile>({\n\t\t\tmethod: 'DELETE',\n\t\t\turl: `/files/${tableId}/${recordId}/${fieldId}/${versionNumber}`,\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Get users\n\t *\n\t * Get all users in an account or narrowed down list of users filtered by email(s). The returned users may be paginated depending on the user count. The count of the returned users may vary. When `nextPageToken` value in the response is not empty, that indicates that there are more results to be returned, you can use this value to get the next result set ('page').\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/getUsers)\n\t *\n\t * @param options Get users method options object\n\t * @param options.accountId The account id being used to get users. If no value is specified, the first account associated with the requesting user token is chosen.\n\t * @param options.emails When provided, the returned users will be narrowed down only to the users included in this list.\n\t * @param options.appIds When provided, the returned users will be narrowed down only to the users assigned to the app id's provided in this list. The provided app id's should belong to the same account.\n\t * @param options.nextPageToken Next page token used to get the next 'page' of results when available. When this field is empty, the first page is returned.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async getUsers({ accountId, requestOptions, returnAxios, ...body }: QuickBaseRequestGetUsers & { returnAxios?: false }): Promise<QuickBaseResponseGetUsers>;\n\tpublic async getUsers({ accountId, requestOptions, returnAxios, ...body }: QuickBaseRequestGetUsers & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseGetUsers>>;\n\tpublic async getUsers({ accountId, requestOptions, returnAxios = false, ...body }: QuickBaseRequestGetUsers): Promise<QuickBaseResponseGetUsers | AxiosResponse<QuickBaseResponseGetUsers>> {\n\t\tconst results = await this.api<QuickBaseResponseGetUsers>({\n\t\t\tmethod: 'POST',\n\t\t\turl: `/users`,\n\t\t\tdata: body,\n\t\t\tparams: {\n\t\t\t\taccountId\n\t\t\t}\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Deny users\n\t *\n\t * Denies users access to the realm but leaves them listed in groups they have been added to.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/denyUsers)\n\t *\n\t * @param options Deny users method options object\n\t * @param options.accountId The account id being used to deny users. If no value is specified, the first account associated with the requesting user token is chosen.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async denyUsers({ accountId, requestOptions, returnAxios }: QuickBaseRequestDenyUsers & { returnAxios?: false }): Promise<QuickBaseResponseDenyUsers>;\n\tpublic async denyUsers({ accountId, requestOptions, returnAxios }: QuickBaseRequestDenyUsers & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseDenyUsers>>;\n\tpublic async denyUsers({ accountId, requestOptions, returnAxios = false }: QuickBaseRequestDenyUsers): Promise<QuickBaseResponseDenyUsers | AxiosResponse<QuickBaseResponseDenyUsers>> {\n\t\tconst results = await this.api<QuickBaseResponseDenyUsers>({\n\t\t\tmethod: 'PUT',\n\t\t\turl: `/users/deny`,\n\t\t\tparams: {\n\t\t\t\taccountId\n\t\t\t}\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Deny and remove users from groups\n\t *\n\t * Denies users access to the realm and allows you to remove them from groups.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/denyUsersAndGroups)\n\t *\n\t * @param options Deny and remove users from groups method options object\n\t * @param options.shouldDeleteFromGroups Specifies if the users should also be removed from all groups.\n\t * @param options.accountId The account id being used to deny users. If no value is specified, the first account associated with the requesting user token is chosen.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async denyUsersAndGroups({ shouldDeleteFromGroups, accountId, requestOptions, returnAxios }: QuickBaseRequestDenyUsersAndGroups & { returnAxios?: false }): Promise<QuickBaseResponseDenyUsersAndGroups>;\n\tpublic async denyUsersAndGroups({ shouldDeleteFromGroups, accountId, requestOptions, returnAxios }: QuickBaseRequestDenyUsersAndGroups & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseDenyUsersAndGroups>>;\n\tpublic async denyUsersAndGroups({ shouldDeleteFromGroups, accountId, requestOptions, returnAxios = false }: QuickBaseRequestDenyUsersAndGroups): Promise<QuickBaseResponseDenyUsersAndGroups | AxiosResponse<QuickBaseResponseDenyUsersAndGroups>> {\n\t\tconst results = await this.api<QuickBaseResponseDenyUsersAndGroups>({\n\t\t\tmethod: 'PUT',\n\t\t\turl: `/users/deny/${shouldDeleteFromGroups}`,\n\t\t\tparams: {\n\t\t\t\taccountId\n\t\t\t}\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Undeny users\n\t *\n\t * Grants users that have previously been denied access to the realm.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/undenyUsers)\n\t *\n\t * @param options Undeny users method options object\n\t * @param options.accountId The account id being used to undeny users. If no value is specified, the first account associated with the requesting user token is chosen.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async undenyUsers({ accountId, requestOptions, returnAxios }: QuickBaseRequestUndenyUsers & { returnAxios?: false }): Promise<QuickBaseResponseUndenyUsers>;\n\tpublic async undenyUsers({ accountId, requestOptions, returnAxios }: QuickBaseRequestUndenyUsers & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseUndenyUsers>>;\n\tpublic async undenyUsers({ accountId, requestOptions, returnAxios = false }: QuickBaseRequestUndenyUsers): Promise<QuickBaseResponseUndenyUsers | AxiosResponse<QuickBaseResponseUndenyUsers>> {\n\t\tconst results = await this.api<QuickBaseResponseUndenyUsers>({\n\t\t\tmethod: 'PUT',\n\t\t\turl: `/users/undeny`,\n\t\t\tparams: {\n\t\t\t\taccountId\n\t\t\t}\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Add members\n\t *\n\t * Adds a list of users to a given group as members.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/addMembersToGroup)\n\t *\n\t * @param options Add members method options object\n\t * @param options.gid This is the ID of the group being modified.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async addMembersToGroup({ gid, requestOptions, returnAxios }: QuickBaseRequestAddMembersToGroup & { returnAxios?: false }): Promise<QuickBaseResponseAddMembersToGroup>;\n\tpublic async addMembersToGroup({ gid, requestOptions, returnAxios }: QuickBaseRequestAddMembersToGroup & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseAddMembersToGroup>>;\n\tpublic async addMembersToGroup({ gid, requestOptions, returnAxios = false }: QuickBaseRequestAddMembersToGroup): Promise<QuickBaseResponseAddMembersToGroup | AxiosResponse<QuickBaseResponseAddMembersToGroup>> {\n\t\tconst results = await this.api<QuickBaseResponseAddMembersToGroup>({\n\t\t\tmethod: 'POST',\n\t\t\turl: `/groups/${gid}/members`,\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Remove members\n\t *\n\t * Removes a list of members from a given group.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/removeMembersFromGroup)\n\t *\n\t * @param options Remove members method options object\n\t * @param options.gid This is the ID of the group being modified.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async removeMembersFromGroup({ gid, requestOptions, returnAxios }: QuickBaseRequestRemoveMembersFromGroup & { returnAxios?: false }): Promise<QuickBaseResponseRemoveMembersFromGroup>;\n\tpublic async removeMembersFromGroup({ gid, requestOptions, returnAxios }: QuickBaseRequestRemoveMembersFromGroup & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseRemoveMembersFromGroup>>;\n\tpublic async removeMembersFromGroup({ gid, requestOptions, returnAxios = false }: QuickBaseRequestRemoveMembersFromGroup): Promise<QuickBaseResponseRemoveMembersFromGroup | AxiosResponse<QuickBaseResponseRemoveMembersFromGroup>> {\n\t\tconst results = await this.api<QuickBaseResponseRemoveMembersFromGroup>({\n\t\t\tmethod: 'DELETE',\n\t\t\turl: `/groups/${gid}/members`,\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Add managers\n\t *\n\t * Adds a list of users to a given group as managers.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/addManagersToGroup)\n\t *\n\t * @param options Add managers method options object\n\t * @param options.gid This is the ID of the group being modified.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async addManagersToGroup({ gid, requestOptions, returnAxios }: QuickBaseRequestAddManagersToGroup & { returnAxios?: false }): Promise<QuickBaseResponseAddManagersToGroup>;\n\tpublic async addManagersToGroup({ gid, requestOptions, returnAxios }: QuickBaseRequestAddManagersToGroup & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseAddManagersToGroup>>;\n\tpublic async addManagersToGroup({ gid, requestOptions, returnAxios = false }: QuickBaseRequestAddManagersToGroup): Promise<QuickBaseResponseAddManagersToGroup | AxiosResponse<QuickBaseResponseAddManagersToGroup>> {\n\t\tconst results = await this.api<QuickBaseResponseAddManagersToGroup>({\n\t\t\tmethod: 'POST',\n\t\t\turl: `/groups/${gid}/managers`,\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Remove managers\n\t *\n\t * Removes a list of managers from a given group.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/removeManagersFromGroup)\n\t *\n\t * @param options Remove managers method options object\n\t * @param options.gid This is the ID of the group being modified.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async removeManagersFromGroup({ gid, requestOptions, returnAxios }: QuickBaseRequestRemoveManagersFromGroup & { returnAxios?: false }): Promise<QuickBaseResponseRemoveManagersFromGroup>;\n\tpublic async removeManagersFromGroup({ gid, requestOptions, returnAxios }: QuickBaseRequestRemoveManagersFromGroup & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseRemoveManagersFromGroup>>;\n\tpublic async removeManagersFromGroup({ gid, requestOptions, returnAxios = false }: QuickBaseRequestRemoveManagersFromGroup): Promise<QuickBaseResponseRemoveManagersFromGroup | AxiosResponse<QuickBaseResponseRemoveManagersFromGroup>> {\n\t\tconst results = await this.api<QuickBaseResponseRemoveManagersFromGroup>({\n\t\t\tmethod: 'DELETE',\n\t\t\turl: `/groups/${gid}/managers`,\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Add child groups\n\t *\n\t * Adds a list of groups to a given group.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/addSubgroupsToGroup)\n\t *\n\t * @param options Add child groups method options object\n\t * @param options.gid This is the ID of the group being modified.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async addSubgroupsToGroup({ gid, requestOptions, returnAxios }: QuickBaseRequestAddSubgroupsToGroup & { returnAxios?: false }): Promise<QuickBaseResponseAddSubgroupsToGroup>;\n\tpublic async addSubgroupsToGroup({ gid, requestOptions, returnAxios }: QuickBaseRequestAddSubgroupsToGroup & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseAddSubgroupsToGroup>>;\n\tpublic async addSubgroupsToGroup({ gid, requestOptions, returnAxios = false }: QuickBaseRequestAddSubgroupsToGroup): Promise<QuickBaseResponseAddSubgroupsToGroup | AxiosResponse<QuickBaseResponseAddSubgroupsToGroup>> {\n\t\tconst results = await this.api<QuickBaseResponseAddSubgroupsToGroup>({\n\t\t\tmethod: 'POST',\n\t\t\turl: `/groups/${gid}/subgroups`,\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Remove child groups\n\t *\n\t * Removes a list of groups from a given group.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/removeSubgroupsFromGroup)\n\t *\n\t * @param options Remove child groups method options object\n\t * @param options.gid This is the ID of the group being modified.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async removeSubgroupsFromGroup({ gid, requestOptions, returnAxios }: QuickBaseRequestRemoveSubgroupsFromGroup & { returnAxios?: false }): Promise<QuickBaseResponseRemoveSubgroupsFromGroup>;\n\tpublic async removeSubgroupsFromGroup({ gid, requestOptions, returnAxios }: QuickBaseRequestRemoveSubgroupsFromGroup & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseRemoveSubgroupsFromGroup>>;\n\tpublic async removeSubgroupsFromGroup({ gid, requestOptions, returnAxios = false }: QuickBaseRequestRemoveSubgroupsFromGroup): Promise<QuickBaseResponseRemoveSubgroupsFromGroup | AxiosResponse<QuickBaseResponseRemoveSubgroupsFromGroup>> {\n\t\tconst results = await this.api<QuickBaseResponseRemoveSubgroupsFromGroup>({\n\t\t\tmethod: 'DELETE',\n\t\t\turl: `/groups/${gid}/subgroups`,\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Get audit logs\n\t *\n\t * Gathers the audit logs for a single day from a realm. By default, this API returns 10,000 entries. This can be changed with the numRows parameter. Integrators can iterate through batches to get an entire day's worth of logs. Each realm has a maximum entitlement of querying 1,000 days per year (allowing lookbacks for up to two years). Requests for paginated data do not count towards the annual limit. Transactional rate limits are 10 per 10 seconds.  \n\t * **Note:** This API is available for enterprise users only.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/audit)\n\t *\n\t * @param options Get audit logs method options object\n\t * @param options.nextToken Token specifying start of page. For first page don't supply this.\n\t * @param options.numRows Number of logs to return per page, default is 10000, minimum is 1000, max is 50000.\n\t * @param options.queryId The query id of an audit log request. This id is needed to fetch subsequent paged results of a single query.\n\t * @param options.date The date for which audit logs need to be fetched. This must be date-time only, as YYYY-MM-DD, and a valid date in the past.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async audit({ requestOptions, returnAxios, ...body }: QuickBaseRequestAudit & { returnAxios?: false }): Promise<QuickBaseResponseAudit>;\n\tpublic async audit({ requestOptions, returnAxios, ...body }: QuickBaseRequestAudit & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseAudit>>;\n\tpublic async audit({ requestOptions, returnAxios = false, ...body }: QuickBaseRequestAudit): Promise<QuickBaseResponseAudit | AxiosResponse<QuickBaseResponseAudit>> {\n\t\tconst results = await this.api<QuickBaseResponseAudit>({\n\t\t\tmethod: 'POST',\n\t\t\turl: `/audit`,\n\t\t\tdata: body,\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Get read summaries\n\t *\n\t * Get user read and integration read summaries for any day in the past.  \n\t * **Note:** This API is available for enterprise users only.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/platformAnalyticReads)\n\t *\n\t * @param options Get read summaries method options object\n\t * @param options.day The date for which read summaries need to be fetched. This must be date-time only, as YYYY-MM-DD, and a valid date in the past.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async platformAnalyticReads({ day, requestOptions, returnAxios }: QuickBaseRequestPlatformAnalyticReads & { returnAxios?: false }): Promise<QuickBaseResponsePlatformAnalyticReads>;\n\tpublic async platformAnalyticReads({ day, requestOptions, returnAxios }: QuickBaseRequestPlatformAnalyticReads & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponsePlatformAnalyticReads>>;\n\tpublic async platformAnalyticReads({ day, requestOptions, returnAxios = false }: QuickBaseRequestPlatformAnalyticReads): Promise<QuickBaseResponsePlatformAnalyticReads | AxiosResponse<QuickBaseResponsePlatformAnalyticReads>> {\n\t\tconst results = await this.api<QuickBaseResponsePlatformAnalyticReads>({\n\t\t\tmethod: 'GET',\n\t\t\turl: `/analytics/reads`,\n\t\t\tparams: {\n\t\t\t\tday\n\t\t\t}\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Get event summaries\n\t *\n\t * Get event summaries for any span of days up to one year and excluding future dates.  \n\t * **Note:** This API is available for enterprise users only. Data is updated hourly; to ensure accuracy, query dates should be at least one hour in the past. Transactional rate limits are 100 per hour.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/platformAnalyticEventSummaries)\n\t *\n\t * @param options Get event summaries method options object\n\t * @param options.accountId The ID of the account to query. If no value is specified, the first account matching the provided domain is chosen.\n\t * @param options.start The start date and time of the requested summaries in ISO 8601 time format.\n\t * @param options.end The end date and time of the requested summaries in ISO 8601 time format.\n\t * @param options.groupBy How the events should be grouped.\n\t * @param options.nextToken A pagination token from a previous response. Used to fetch the next page.\n\t * @param options.where[].id Id of the item to filter by - the hash uid if filtering a user, or the app id if filtering an app.\n\t * @param options.where[].type The type of item to filter by.\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async platformAnalyticEventSummaries({ accountId, requestOptions, returnAxios, ...body }: QuickBaseRequestPlatformAnalyticEventSummaries & { returnAxios?: false }): Promise<QuickBaseResponsePlatformAnalyticEventSummaries>;\n\tpublic async platformAnalyticEventSummaries({ accountId, requestOptions, returnAxios, ...body }: QuickBaseRequestPlatformAnalyticEventSummaries & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponsePlatformAnalyticEventSummaries>>;\n\tpublic async platformAnalyticEventSummaries({ accountId, requestOptions, returnAxios = false, ...body }: QuickBaseRequestPlatformAnalyticEventSummaries): Promise<QuickBaseResponsePlatformAnalyticEventSummaries | AxiosResponse<QuickBaseResponsePlatformAnalyticEventSummaries>> {\n\t\tconst results = await this.api<QuickBaseResponsePlatformAnalyticEventSummaries>({\n\t\t\tmethod: 'POST',\n\t\t\turl: `/analytics/events/summaries`,\n\t\t\tdata: body,\n\t\t\tparams: {\n\t\t\t\taccountId\n\t\t\t}\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Export a solution\n\t *\n\t * Returns the QBL for the specified solution. [See QBL documentation](https://help.quickbase.com/hc/en-us/articles/24845511223828-What-is-QBL)\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/exportSolution)\n\t *\n\t * @param options Export a solution method options object\n\t * @param options.solutionId The unique identifier of a solution\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async exportSolution({ solutionId, requestOptions, returnAxios }: QuickBaseRequestExportSolution & { returnAxios?: false }): Promise<QuickBaseResponseExportSolution>;\n\tpublic async exportSolution({ solutionId, requestOptions, returnAxios }: QuickBaseRequestExportSolution & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseExportSolution>>;\n\tpublic async exportSolution({ solutionId, requestOptions, returnAxios = false }: QuickBaseRequestExportSolution): Promise<QuickBaseResponseExportSolution | AxiosResponse<QuickBaseResponseExportSolution>> {\n\t\tconst results = await this.api<QuickBaseResponseExportSolution>({\n\t\t\tmethod: 'GET',\n\t\t\turl: `/solutions/${solutionId}`,\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Update a solution\n\t *\n\t * Updates the solution using the provided QBL. [See QBL documentation](https://help.quickbase.com/hc/en-us/articles/24845511223828-What-is-QBL)\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/updateSolution)\n\t *\n\t * @param options Update a solution method options object\n\t * @param options.solutionId The unique identifier of a solution\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async updateSolution({ solutionId, requestOptions, returnAxios }: QuickBaseRequestUpdateSolution & { returnAxios?: false }): Promise<QuickBaseResponseUpdateSolution>;\n\tpublic async updateSolution({ solutionId, requestOptions, returnAxios }: QuickBaseRequestUpdateSolution & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseUpdateSolution>>;\n\tpublic async updateSolution({ solutionId, requestOptions, returnAxios = false }: QuickBaseRequestUpdateSolution): Promise<QuickBaseResponseUpdateSolution | AxiosResponse<QuickBaseResponseUpdateSolution>> {\n\t\tconst results = await this.api<QuickBaseResponseUpdateSolution>({\n\t\t\tmethod: 'PUT',\n\t\t\turl: `/solutions/${solutionId}`,\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n\t/**\n\t * Create a solution\n\t *\n\t * Creates a solution using the provided QBL. [See QBL documentation](https://help.quickbase.com/hc/en-us/articles/24845511223828-What-is-QBL)\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/operation/createSolution)\n\t *\n\t * @param options Create a solution method options object\n\t * @param options.requestOptions Override axios request configuration\n\t * @param options.returnAxios If `true`, the returned object will be the entire `AxiosResponse` object\n\t */\n\tpublic async createSolution({ requestOptions, returnAxios }: QuickBaseRequestCreateSolution & { returnAxios?: false }): Promise<QuickBaseResponseCreateSolution>;\n\tpublic async createSolution({ requestOptions, returnAxios }: QuickBaseRequestCreateSolution & { returnAxios: true }): Promise<AxiosResponse<QuickBaseResponseCreateSolution>>;\n\tpublic async createSolution({ requestOptions, returnAxios = false }: QuickBaseRequestCreateSolution = {}): Promise<QuickBaseResponseCreateSolution | AxiosResponse<QuickBaseResponseCreateSolution>> {\n\t\tconst results = await this.api<QuickBaseResponseCreateSolution>({\n\t\t\tmethod: 'POST',\n\t\t\turl: `/solutions`,\n\t\t}, requestOptions);\n\t\n\t\treturn returnAxios ? results : results.data;\n\t}\n\n}\n\n/* Types */\nexport type QuickBaseOptions = Partial<{\n\t/**\n\t * Quickbase API Server FQDN\n\t *\n\t * Default is `api.quickbase.com`\n\t */\n\tserver: string;\n\n\t/**\n\t * Quickbase API Version\n\t *\n\t * Default is `v1`\n\t */\n\tversion: string;\n\n\t/**\n\t * Quickbase Realm.\n\t *\n\t * For example, if your Quickbase url is: `demo.quickbase.com`\n\t * Your realm is: `demo`\n\t */\n\trealm: string;\n\n\t/**\n\t * A Quickbase User Token.\n\t *\n\t * If both a `userToken` and `tempToken` are defined, the `tempToken` will be used\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/auth)\n\t */\n\tuserToken: string;\n\n\t/**\n\t * A Temporary Authentication Token or Temporary Table Authentication Token.\n\t *\n\t * If both a `userToken` and `tempToken` are defined, the `tempToken` will be used\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/auth)\n\t */\n\ttempToken: string;\n\n\t/**\n\t * A Temporary Authentication Token or Temporary Table Authentication Token's Application or Table ID.\n\t *\n\t * [Quickbase Documentation](https://developer.quickbase.com/auth)\n\t */\n\ttempTokenDbid: string;\n\n\t/**\n\t * A Quickbase Application Token\n\t *\n\t * Only required when using Temporary Tokens\n\t *\n\t * [Quickbase Documentation](https://help.quickbase.com/user-assistance/app_tokens.html)\n\t */\n\tappToken: string;\n\n\t/**\n\t * Provide a custom User-Agent to help track API usage within your logs\n\t *\n\t * When used in the browser, this sets the X-User-Agent header instead\n\t * as the browser will block any attempt to set a custom User-Agent\n\t */\n\tuserAgent: string;\n\n\t/**\n\t * Automatically renew Temporary Tokens after they expire\n\t *\n\t * Default is `true`\n\t */\n\tautoRenewTempTokens: boolean;\n\n\t/**\n\t * The maximum number of open, pending API connections to Quickbase\n\t *\n\t * Default is `10`\n\t */\n\tconnectionLimit: number;\n\n\t/**\n\t * The period length, in milliseconds, of connection limit\n\t *\n\t * Default is `1000`\n\t */\n\tconnectionLimitPeriod: number;\n\n\t/**\n\t * Throw an error if the connection limit is exceeded\n\t *\n\t * Default is `false`\n\t */\n\terrorOnConnectionLimit: boolean;\n\n\t/**\n\t * Automatically retry if the Quickbase API rate limit is exceeded\n\t *\n\t * Default is `true`\n\t */\n\tretryOnQuotaExceeded: boolean;\n\n\t/**\n\t * Allows the use of a proxy for Quickbase API requests\n\t *\n\t * Default is `false`\n\t */\n\tproxy: false | {\n\t\thost: string;\n\t\tport: number;\n\t\tauth?: {\n\t\t\tusername: string;\n\t\t\tpassword: string;\n\t\t}\n\t}\n}>;\n\nexport type QuickBaseRequest = {\n\trequestOptions?: AxiosRequestConfig;\n\treturnAxios?: boolean;\n};\n\nexport type QuickBaseRequestCreateApp = QuickBaseRequest & {\n\t/**\n\t * Set to true if you would like to assign the app to the user token you used to create the application. The default is false.\n\t */\n\tassignToken?: boolean;\n\t/**\n\t * The app variables. A maximum of 10 variables can be inserted at a time. See [About Application Variables](https://help.quickbase.com/user-assistance/variables.html)\n\t */\n\tvariables?: {\n\t\t/**\n\t\t * The name for the variable.\n\t\t */\n\t\tname: string;\n\t\t/**\n\t\t * The value for the variable.\n\t\t */\n\t\tvalue: string;\n\t}[];\n\t/**\n\t * The app name. You are allowed to create multiple apps with the same name, in the same realm, because they will have different dbid values. We urge you to be careful about doing this.\n\t */\n\tname: string;\n\t/**\n\t * Application security properties.\n\t */\n\tsecurityProperties?: {\n\t\t/**\n\t\t * Hide from public application searches\n\t\t */\n\t\thideFromPublic: boolean;\n\t\t/**\n\t\t * Only \"approved\" users may access this application\n\t\t */\n\t\tmustBeRealmApproved: boolean;\n\t\t/**\n\t\t * Allow users who are not administrators to copy\n\t\t */\n\t\tallowClone: boolean;\n\t\t/**\n\t\t * Only users logging in from \"approved\" IP addresses may access this application\n\t\t */\n\t\tuseIPFilter: boolean;\n\t\t/**\n\t\t * Allow users who are not administrators to export data\n\t\t */\n\t\tallowExport: boolean;\n\t\t/**\n\t\t * Require Application Tokens\n\t\t */\n\t\tenableAppTokens: boolean;\n\t};\n\t/**\n\t * The description for the app. If this property is left out, the app description will be blank.\n\t */\n\tdescription?: string;\n};\n\nexport type QuickBaseRequestGetApp = QuickBaseRequest & {\n\t/**\n\t * The unique identifier of an app\n\t */\n\tappId: string;\n};\n\nexport type QuickBaseRequestUpdateApp = QuickBaseRequest & {\n\t/**\n\t * The unique identifier of an app\n\t */\n\tappId: string;\n\t/**\n\t * The app variables. A maximum of 10 variables can be updated at a time. See [About Application Variables](https://help.quickbase.com/user-assistance/variables.html)\n\t */\n\tvariables?: {\n\t\t/**\n\t\t * The name for the variable.\n\t\t */\n\t\tname: string;\n\t\t/**\n\t\t * The value for the variable.\n\t\t */\n\t\tvalue: string;\n\t}[];\n\t/**\n\t * The name for the app.\n\t */\n\tname?: string;\n\t/**\n\t * Security properties of the application\n\t */\n\tsecurityProperties?: {\n\t\t/**\n\t\t * Hide from public application searches\n\t\t */\n\t\thideFromPublic: boolean;\n\t\t/**\n\t\t * Only \"approved\" users may access this application\n\t\t */\n\t\tmustBeRealmApproved: boolean;\n\t\t/**\n\t\t * Allow users who are not administrators to copy\n\t\t */\n\t\tallowClone: boolean;\n\t\t/**\n\t\t * Only users logging in from \"approved\" IP addresses may access this application\n\t\t */\n\t\tuseIPFilter: boolean;\n\t\t/**\n\t\t * Allow users who are not administrators to export data\n\t\t */\n\t\tallowExport: boolean;\n\t\t/**\n\t\t * Require Application Tokens\n\t\t */\n\t\tenableAppTokens: boolean;\n\t};\n\t/**\n\t * The description for the app.\n\t */\n\tdescription?: string;\n};\n\nexport type QuickBaseRequestDeleteApp = QuickBaseRequest & {\n\t/**\n\t * The unique identifier of an app\n\t */\n\tappId: string;\n\t/**\n\t * To confirm application deletion we ask for application name.\n\t */\n\tname: string;\n};\n\nexport type QuickBaseRequestGetAppEvents = QuickBaseRequest & {\n\t/**\n\t * The unique identifier of an app\n\t */\n\tappId: string;\n};\n\nexport type QuickBaseRequestCopyApp = QuickBaseRequest & {\n\t/**\n\t * The unique identifier of an app\n\t */\n\tappId: string;\n\t/**\n\t * The name of the newly copied app\n\t */\n\tname: string;\n\t/**\n\t * The description of the newly copied app\n\t */\n\tdescription?: string;\n\t/**\n\t * The configuration properties for performing the app copy\n\t */\n\tproperties?: {\n\t\t/**\n\t\t * Whether to add the user token used to make this request to the new app\n\t\t */\n\t\tassignUserToken: boolean;\n\t\t/**\n\t\t * If keepData is true, whether to copy the file attachments as well. If keepData is false, this property is ignored\n\t\t */\n\t\texcludeFiles: boolean;\n\t\t/**\n\t\t * Whether to copy the app's data along with the schema\n\t\t */\n\t\tkeepData: boolean;\n\t\t/**\n\t\t * If true, users will be copied along with their assigned roles. If false, users and roles will be copied but roles will not be assigned\n\t\t */\n\t\tusersAndRoles: boolean;\n\t};\n};\n\nexport type QuickBaseRequestCreateTable = QuickBaseRequest & {\n\t/**\n\t * The unique identifier of an app\n\t */\n\tappId: string;\n\t/**\n\t * The name for the table.\n\t */\n\tname: string;\n\t/**\n\t * The plural noun for records in the table. If this value is not passed the default value is 'Records'.\n\t */\n\tpluralRecordName?: string;\n\t/**\n\t * The singular noun for records in the table. If this value is not passed the default value is 'Record'.\n\t */\n\tsingleRecordName?: string;\n\t/**\n\t * The description for the table. If this value is not passed the default value is blank.\n\t */\n\tdescription?: string;\n};\n\nexport type QuickBaseRequestGetAppTables = QuickBaseRequest & {\n\t/**\n\t * The unique identifier of an app\n\t */\n\tappId: string;\n};\n\nexport type QuickBaseRequestGetTable = QuickBaseRequest & {\n\t/**\n\t * The unique identifier (dbid) of the table.\n\t */\n\ttableId: string;\n\t/**\n\t * The unique identifier of an app\n\t */\n\tappId: string;\n};\n\nexport type QuickBaseRequestUpdateTable = QuickBaseRequest & {\n\t/**\n\t * The unique identifier (dbid) of the table.\n\t */\n\ttableId: string;\n\t/**\n\t * The unique identifier of an app\n\t */\n\tappId: string;\n\t/**\n\t * The name for the table.\n\t */\n\tname?: string;\n\t/**\n\t * The plural noun for records in the table. If this value is not passed the default value is 'Records'.\n\t */\n\tpluralRecordName?: string;\n\t/**\n\t * The singular noun for records in the table. If this value is not passed the default value is 'Record'.\n\t */\n\tsingleRecordName?: string;\n\t/**\n\t * The description for the table. If this value is not passed the default value is blank.\n\t */\n\tdescription?: string;\n};\n\nexport type QuickBaseRequestDeleteTable = QuickBaseRequest & {\n\t/**\n\t * The unique identifier (dbid) of the table.\n\t */\n\ttableId: string;\n\t/**\n\t * The unique identifier of an app\n\t */\n\tappId: string;\n};\n\nexport type QuickBaseRequestGetRelationships = QuickBaseRequest & {\n\t/**\n\t * The unique identifier (dbid) of the child table.\n\t */\n\tchildTableId: string;\n\t/**\n\t * The number of relationships to skip.\n\t */\n\tskip?: number;\n};\n\nexport type QuickBaseRequestCreateRelationship = QuickBaseRequest & {\n\t/**\n\t * The unique identifier (dbid) of the table. This will be the child table.\n\t */\n\tchildTableId: string;\n\t/**\n\t * Array of summary field objects which will turn into summary fields in the parent table. When you specify the 'COUNT' accumulation type, you have to specify 0 as the summaryFid (or not set it in the request). 'DISTINCT-COUNT' requires that summaryFid be set to an actual fid.\n\t */\n\tsummaryFields?: {\n\t\t/**\n\t\t * The field id to summarize.\n\t\t */\n\t\tsummaryFid?: number;\n\t\t/**\n\t\t * The label for the summary field.\n\t\t */\n\t\tlabel?: string;\n\t\t/**\n\t\t * The accumulation type for the summary field.\n\t\t */\n\t\taccumulationType: 'AVG' | 'SUM' | 'MAX' | 'MIN' | 'STD-DEV' | 'COUNT' | 'COMBINED-TEXT' | 'DISTINCT-COUNT';\n\t\t/**\n\t\t * The filter, using the Quickbase query language, which determines the records to return.\n\t\t */\n\t\twhere?: string;\n\t}[];\n\t/**\n\t * Array of field ids in the parent table that will become lookup fields in the child table.\n\t */\n\tlookupFieldIds?: number[];\n\t/**\n\t * The parent table id for the relationship.\n\t */\n\tparentTableId: string;\n\t/**\n\t * This property is optional.  If it is not provided, the foreign key field will be created with the label \u2018Related <record>\u2019, where <record> is the name of a record in the parent table.\n\t */\n\tforeignKeyField?: {\n\t\t/**\n\t\t * The label for the foreign key field.\n\t\t */\n\t\tlabel: string;\n\t};\n};\n\nexport type QuickBaseRequestUpdateRelationship = QuickBaseRequest & {\n\t/**\n\t * The unique identifier (dbid) of the table. This will be the child table.\n\t */\n\tchildTableId: string;\n\t/**\n\t * The relationship id. This is the field id of the reference field on the child table.\n\t */\n\trelationshipId: number;\n\t/**\n\t * An array of objects, each representing a configuration of one field from the child table, that will become summary fields on the parent table. When you specify the 'COUNT' accumulation type, you have to specify 0 as the summaryFid (or not set it in the request). 'DISTINCT-COUNT' requires that summaryFid be set to an actual fid.\n\t */\n\tsummaryFields?: {\n\t\t/**\n\t\t * The field id to summarize.\n\t\t */\n\t\tsummaryFid?: number;\n\t\t/**\n\t\t * The label for the summary field.\n\t\t */\n\t\tlabel?: string;\n\t\t/**\n\t\t * The accumulation type for the summary field.\n\t\t */\n\t\taccumulationType: 'AVG' | 'SUM' | 'MAX' | 'MIN' | 'STD-DEV' | 'COUNT' | 'COMBINED-TEXT' | 'DISTINCT-COUNT';\n\t\t/**\n\t\t * The filter, using the Quickbase query language, which determines the records to return.\n\t\t */\n\t\twhere?: string;\n\t}[];\n\t/**\n\t * An array of field ids on the parent table that will become lookup fields on the child table.\n\t */\n\tlookupFieldIds?: number[];\n};\n\nexport type QuickBaseRequestDeleteRelationship = QuickBaseRequest & {\n\t/**\n\t * The unique identifier (dbid) of the table. This will be the child table.\n\t */\n\tchildTableId: string;\n\t/**\n\t * The relationship id. This is the field id of the reference field on the child table.\n\t */\n\trelationshipId: number;\n};\n\nexport type QuickBaseRequestGetTableReports = QuickBaseRequest & {\n\t/**\n\t * The unique identifier of the table.\n\t */\n\ttableId: string;\n};\n\nexport type QuickBaseRequestGetReport = QuickBaseRequest & {\n\t/**\n\t * The identifier of the report, unique to the table.\n\t */\n\treportId: string;\n\t/**\n\t * The unique identifier of table.\n\t */\n\ttableId: string;\n};\n\nexport type QuickBaseRequestRunReport = QuickBaseRequest & {\n\t/**\n\t * The identifier of the report, unique to the table.\n\t */\n\treportId: string;\n\t/**\n\t * The identifier of the table for the report.\n\t */\n\ttableId: string;\n\t/**\n\t * The number of records to skip. You can set this value when paginating through a set of results.\n\t */\n\tskip?: number;\n\t/**\n\t * The maximum number of records to return. You can override the default Quickbase pagination to get more or fewer results. If your requested value here exceeds the dynamic maximums, we will return a subset of results and the rest can be gathered in subsequent API calls.\n\t */\n\ttop?: number;\n};\n\nexport type QuickBaseRequestGetFields = QuickBaseRequest & {\n\t/**\n\t * The unique identifier (dbid) of the table.\n\t */\n\ttableId: string;\n\t/**\n\t * Set to 'true' if you'd like to get back the custom permissions for the field(s).\n\t */\n\tincludeFieldPerms?: boolean;\n};\n\nexport type QuickBaseRequestCreateField = QuickBaseRequest & {\n\t/**\n\t * The unique identifier of the table.\n\t */\n\ttableId: string;\n\t/**\n\t * Indicates if the field is being tracked as part of Quickbase Audit Logs. You can only set this property to \"true\" if the app has audit logs enabled. See Enable data change logs under [Quickbase Audit Logs](https://help.quickbase.com/user-assistance/audit_logs.html). Defaults to false.\n\t */\n\taudited?: boolean;\n\t/**\n\t * The configured help text shown to users within the product.\n\t */\n\tfieldHelp?: string;\n\t/**\n\t * Indicates if the field is configured to display in bold in the product. Defaults to false.\n\t */\n\tbold?: boolean;\n\t/**\n\t * Specific field properties.\n\t */\n\tproperties?: {\n\t\t/**\n\t\t * The comments entered on the field properties by an administrator.\n\t\t */\n\t\tcomments?: string;\n\t\t/**\n\t\t * Whether this field totals in reports within the product.\n\t\t */\n\t\tdoesTotal?: boolean;\n\t\t/**\n\t\t * Whether the link field will auto save.\n\t\t */\n\t\tautoSave?: boolean;\n\t\t/**\n\t\t * Default user id value.\n\t\t */\n\t\tdefaultValueLuid?: number;\n\t\t/**\n\t\t * Whether phone numbers should be in E.164 standard international format\n\t\t */\n\t\tuseI18NFormat?: boolean;\n\t\t/**\n\t\t * The maximum number of versions configured for a file attachment.\n\t\t */\n\t\tmaxVersions?: number;\n\t\t/**\n\t\t * The format to display time.\n\t\t */\n\t\tformat?: number;\n\t\t/**\n\t\t * Whether the field should carry its multiple choice fields when copied.\n\t\t */\n\t\tcarryChoices?: boolean;\n\t\t/**\n\t\t * The maximum number of characters allowed for entry in Quickbase for this field.\n\t\t */\n\t\tmaxLength?: number;\n\t\t/**\n\t\t * The configured text value that replaces the URL that users see within the product.\n\t\t */\n\t\tlinkText?: string;\n\t\t/**\n\t\t * The id of the parent composite field, when applicable.\n\t\t */\n\t\tparentFieldId?: number;\n\t\t/**\n\t\t * Indicates whether to display the timezone within the product.\n\t\t */\n\t\tdisplayTimezone?: boolean;\n\t\t/**\n\t\t * Indicates if users can add new choices to a selection list.\n\t\t */\n\t\tallowNewChoices?: boolean;\n\t\t/**\n\t\t * Indicates if the field value is defaulted today for new records.\n\t\t */\n\t\tdefaultToday?: boolean;\n\t\t/**\n\t\t * The units label.\n\t\t */\n\t\tunits?: string;\n\t\t/**\n\t\t * Indicates which target the URL should open in when a user clicks it within the product.\n\t\t */\n\t\topenTargetIn?: 'sameWindow' | 'newWindow' | 'popup';\n\t\t/**\n\t\t * The id of the source field.\n\t\t */\n\t\tsourceFieldId?: number;\n\t\t/**\n\t\t * Whether this field averages in reports within the product.\n\t\t */\n\t\tdoesAverage?: boolean;\n\t\t/**\n\t\t * The formula of the field as configured in Quickbase.\n\t\t */\n\t\tformula?: string;\n\t\t/**\n\t\t * The number of decimal places displayed in the product for this field.\n\t\t */\n\t\tdecimalPlaces?: number;\n\t\t/**\n\t\t * Controls the default country shown on international phone widgets on forms. Country code should be entered in the ISO 3166-1 alpha-2 format.\n\t\t */\n\t\tdefaultCountryCode?: string;\n\t\t/**\n\t\t * How to display months.\n\t\t */\n\t\tdisplayMonth?: string;\n\t\t/**\n\t\t * Indicates if the user can see other versions, aside from the most recent, of a file attachment within the product.\n\t\t */\n\t\tseeVersions?: boolean;\n\t\t/**\n\t\t * The number of lines shown in Quickbase for this text field.\n\t\t */\n\t\tnumLines?: number;\n\t\t/**\n\t\t * The user default type.\n\t\t */\n\t\tdefaultKind?: string;\n\t\t/**\n\t\t * How the email is displayed.\n\t\t */\n\t\tdisplayEmail?: string;\n\t\t/**\n\t\t * An alternate user friendly text that can be used to display a link in the browser.\n\t\t */\n\t\tcoverText?: string;\n\t\t/**\n\t\t * The current symbol used when displaying field values within the product.\n\t\t */\n\t\tcurrencySymbol?: string;\n\t\t/**\n\t\t * The id of the target field.\n\t\t */\n\t\ttargetFieldId?: number;\n\t\t/**\n\t\t * The configured option for how users display within the product.\n\t\t */\n\t\tdisplayUser?: string;\n\t\t/**\n\t\t * Whether a blank value is treated the same as 0 in calculations within the product.\n\t\t */\n\t\tblankIsZero?: boolean;\n\t\t/**\n\t\t * Whether an exact match is required for a report link.\n\t\t */\n\t\texact?: boolean;\n\t\t/**\n\t\t * Default email domain.\n\t\t */\n\t\tdefaultDomain?: string;\n\t\t/**\n\t\t * The default value configured for a field when a new record is added.\n\t\t */\n\t\tdefaultValue?: string;\n\t\t/**\n\t\t * Don't show the URL protocol when showing the URL.\n\t\t */\n\t\tabbreviate?: boolean;\n\t\t/**\n\t\t * The format used for displaying numeric values in the product (decimal, separators, digit group).\n\t\t */\n\t\tnumberFormat?: number;\n\t\t/**\n\t\t * The field's target table name.\n\t\t */\n\t\ttargetTableName?: string;\n\t\t/**\n\t\t * The link text, if empty, the url will be used as link text.\n\t\t */\n\t\tappearsAs?: string;\n\t\t/**\n\t\t * The field's html input width in the product.\n\t\t */\n\t\twidth?: number;\n\t\t/**\n\t\t * The currency format used when displaying field values within the product.\n\t\t */\n\t\tcurrencyFormat?: 'left' | 'right' | 'middle';\n\t\t/**\n\t\t * Indicates whether to display the day of the week within the product.\n\t\t */\n\t\tdisplayDayOfWeek?: boolean;\n\t\t/**\n\t\t * The number of digits before commas display in the product, when applicable.\n\t\t */\n\t\tcommaStart?: number;\n\t\t/**\n\t\t * An array of entries that exist for a field that offers choices to the user. Note that these choices refer to the valid values of any records added in the future. You are allowed to remove values from the list of choices even if there are existing records with those values in this field. They will be displayed in red when users look at the data in the browser but there is no other effect. While updating a field with this property, the old choices are removed and replaced by the new choices.\n\t\t */\n\t\tchoices?: string[];\n\t\t/**\n\t\t * The id of the target table.\n\t\t */\n\t\ttargetTableId?: string;\n\t\t/**\n\t\t * Whether to display time as relative.\n\t\t */\n\t\tdisplayRelative?: boolean;\n\t\t/**\n\t\t * An array of the fields that make up a composite field (e.g., address).\n\t\t */\n\t\tcompositeFields?: number[];\n\t\t/**\n\t\t * Indicates whether the checkbox values will be shown as text in reports.\n\t\t */\n\t\tdisplayCheckboxAsText?: boolean;\n\t\t/**\n\t\t * Indicates whether to display the time, in addition to the date.\n\t\t */\n\t\tdisplayTime?: boolean;\n\t\t/**\n\t\t * Version modes for files. Keep all versions vs keep last version.\n\t\t */\n\t\tversionMode?: 'keepallversions' | 'keeplastversions';\n\t\t/**\n\t\t * The id of the field that is used to snapshot values from, when applicable.\n\t\t */\n\t\tsnapFieldId?: number;\n\t\t/**\n\t\t * Indicates whether or not to display time in the 24-hour format within the product.\n\t\t */\n\t\thours24?: boolean;\n\t\t/**\n\t\t * Whether to sort alphabetically, default sort is by record ID.\n\t\t */\n\t\tsortAlpha?: boolean;\n\t\t/**\n\t\t * Indicates if the listed entries sort as entered vs alphabetically.\n\t\t */\n\t\tsortAsGiven?: boolean;\n\t\t/**\n\t\t * Whether this field has a phone extension.\n\t\t */\n\t\thasExtension?: boolean;\n\t\t/**\n\t\t * Indicates if the file should open a new window when a user clicks it within the product.\n\t\t */\n\t\tuseNewWindow?: boolean;\n\t\t/**\n\t\t * Whether this field is append only.\n\t\t */\n\t\tappendOnly?: boolean;\n\t\t/**\n\t\t * Indicates if a field that is part of the relationship should be shown as a hyperlink to the parent record within the product.\n\t\t */\n\t\tdisplayAsLink?: boolean;\n\t};\n\t/**\n\t * Indicates if the field is marked as a default in reports. Defaults to true.\n\t */\n\tappearsByDefault?: boolean;\n\t/**\n\t * The [field types](https://help.quickbase.com/user-assistance/field_types.html), click on any of the field type links for more info.\n\t */\n\tfieldType: 'text' | 'text-multiple-choice' | 'text-multi-line' | 'rich-text' | 'numeric' | 'currency' | 'rating' | 'percent' | 'multitext' | 'email' | 'url' | 'duration' | 'date' | 'datetime' | 'timestamp' | 'timeofday' | 'checkbox' | 'user' | 'multiuser' | 'address' | 'phone' | 'file';\n\t/**\n\t * Field Permissions for different roles.\n\t */\n\tpermissions?: {\n\t\t/**\n\t\t * The role associated with a given permission for the field\n\t\t */\n\t\trole: string;\n\t\t/**\n\t\t * The permission given to the role for this field\n\t\t */\n\t\tpermissionType: 'None' | 'View' | 'Modify';\n\t\t/**\n\t\t * The Id of the given role\n\t\t */\n\t\troleId: number;\n\t}[];\n\t/**\n\t * Whether the field you are adding should appear on forms. Defaults to false.\n\t */\n\taddToForms?: boolean;\n\t/**\n\t * The label (name) of the field.\n\t */\n\tlabel: string;\n\t/**\n\t * Indicates if the field is marked as searchable. Defaults to true.\n\t */\n\tfindEnabled?: boolean;\n\t/**\n\t * Indicates if the field is configured to not wrap when displayed in the product. Defaults to false.\n\t */\n\tnoWrap?: boolean;\n};\n\nexport type QuickBaseRequestDeleteFields = QuickBaseRequest & {\n\t/**\n\t * The unique identifier of the table.\n\t */\n\ttableId: string;\n\t/**\n\t * List of field ids to be deleted.\n\t */\n\tfieldIds: number[];\n};\n\nexport type QuickBaseRequestGetField = QuickBaseRequest & {\n\t/**\n\t * The unique identifier (fid) of the field.\n\t */\n\tfieldId: number;\n\t/**\n\t * The unique identifier (dbid) of the table.\n\t */\n\ttableId: string;\n\t/**\n\t * Set to 'true' if you'd like to get back the custom permissions for the field(s).\n\t */\n\tincludeFieldPerms?: boolean;\n};\n\nexport type QuickBaseRequestUpdateField = QuickBaseRequest & {\n\t/**\n\t * The unique identifier (fid) of the field.\n\t */\n\tfieldId: number;\n\t/**\n\t * The unique identifier of the table.\n\t */\n\ttableId: string;\n\t/**\n\t * Indicates if the field is being tracked as part of Quickbase Audit Logs. You can only set this property to \"true\" if the app has audit logs enabled. See Enable data change logs under [Quickbase Audit Logs](https://help.quickbase.com/user-assistance/audit_logs.html).\n\t */\n\taudited?: boolean;\n\t/**\n\t * The configured help text shown to users within the product.\n\t */\n\tfieldHelp?: string;\n\t/**\n\t * Indicates if the field is configured to display in bold in the product.\n\t */\n\tbold?: boolean;\n\t/**\n\t * Indicates if the field is required (i.e. if every record must have a non-null value in this field). If you attempt to change a field from not-required to required, and the table currently contains records that have null values in that field, you will get an error indicating that there are null values of the field. In this case you need to find and update those records with null values of the field before changing the field to required.\n\t */\n\trequired?: boolean;\n\t/**\n\t * Specific field properties.\n\t */\n\tproperties?: {\n\t\t/**\n\t\t * The comments entered on the field properties by an administrator.\n\t\t */\n\t\tcomments?: string;\n\t\t/**\n\t\t * Whether this field totals in reports within the product.\n\t\t */\n\t\tdoesTotal?: boolean;\n\t\t/**\n\t\t * Whether the link field will auto save.\n\t\t */\n\t\tautoSave?: boolean;\n\t\t/**\n\t\t * Default user id value.\n\t\t */\n\t\tdefaultValueLuid?: number;\n\t\t/**\n\t\t * Whether phone numbers should be in E.164 standard international format\n\t\t */\n\t\tuseI18NFormat?: boolean;\n\t\t/**\n\t\t * The maximum number of versions configured for a file attachment.\n\t\t */\n\t\tmaxVersions?: number;\n\t\t/**\n\t\t * The format to display time.\n\t\t */\n\t\tformat?: number;\n\t\t/**\n\t\t * Whether the field should carry its multiple choice fields when copied.\n\t\t */\n\t\tcarryChoices?: boolean;\n\t\t/**\n\t\t * The maximum number of characters allowed for entry in Quickbase for this field.\n\t\t */\n\t\tmaxLength?: number;\n\t\t/**\n\t\t * The configured text value that replaces the URL that users see within the product.\n\t\t */\n\t\tlinkText?: string;\n\t\t/**\n\t\t * The id of the parent composite field, when applicable.\n\t\t */\n\t\tparentFieldId?: number;\n\t\t/**\n\t\t * Indicates whether to display the timezone within the product.\n\t\t */\n\t\tdisplayTimezone?: boolean;\n\t\t/**\n\t\t * The id of the field that is used to aggregate values from the child, when applicable. This displays 0 if the summary function doesn\u2019t require a field selection (like count).\n\t\t */\n\t\tsummaryTargetFieldId?: number;\n\t\t/**\n\t\t * Indicates if users can add new choices to a selection list.\n\t\t */\n\t\tallowNewChoices?: boolean;\n\t\t/**\n\t\t * Indicates if the field value is defaulted today for new records.\n\t\t */\n\t\tdefaultToday?: boolean;\n\t\t/**\n\t\t * The units label.\n\t\t */\n\t\tunits?: string;\n\t\t/**\n\t\t * Indicates which target the URL should open in when a user clicks it within the product.\n\t\t */\n\t\topenTargetIn?: 'sameWindow' | 'newWindow' | 'popup';\n\t\t/**\n\t\t * The id of the field that is the target on the parent table for this lookup.\n\t\t */\n\t\tlookupTargetFieldId?: number;\n\t\t/**\n\t\t * The accumulation type for the summary field.\n\t\t */\n\t\tsummaryFunction?: 'AVG' | 'SUM' | 'MAX' | 'MIN' | 'STD-DEV' | 'COUNT' | 'COMBINED-TEXT' | 'DISTINCT-COUNT';\n\t\t/**\n\t\t * The id of the source field.\n\t\t */\n\t\tsourceFieldId?: number;\n\t\t/**\n\t\t * Whether this field averages in reports within the product.\n\t\t */\n\t\tdoesAverage?: boolean;\n\t\t/**\n\t\t * The formula of the field as configured in Quickbase.\n\t\t */\n\t\tformula?: string;\n\t\t/**\n\t\t * The number of decimal places displayed in the product for this field.\n\t\t */\n\t\tdecimalPlaces?: number;\n\t\t/**\n\t\t * Controls the default country shown on international phone widgets on forms. Country code should be entered in the ISO 3166-1 alpha-2 format.\n\t\t */\n\t\tdefaultCountryCode?: string;\n\t\t/**\n\t\t * How to display months.\n\t\t */\n\t\tdisplayMonth?: string;\n\t\t/**\n\t\t * Indicates if the user can see other versions, aside from the most recent, of a file attachment within the product.\n\t\t */\n\t\tseeVersions?: boolean;\n\t\t/**\n\t\t * The number of lines shown in Quickbase for this text field.\n\t\t */\n\t\tnumLines?: number;\n\t\t/**\n\t\t * The user default type.\n\t\t */\n\t\tdefaultKind?: string;\n\t\t/**\n\t\t * How the email is displayed.\n\t\t */\n\t\tdisplayEmail?: string;\n\t\t/**\n\t\t * An alternate user friendly text that can be used to display a link in the browser.\n\t\t */\n\t\tcoverText?: string;\n\t\t/**\n\t\t * The current symbol used when displaying field values within the product.\n\t\t */\n\t\tcurrencySymbol?: string;\n\t\t/**\n\t\t * The summary query.\n\t\t */\n\t\tsummaryQuery?: string;\n\t\t/**\n\t\t * The id of the target field.\n\t\t */\n\t\ttargetFieldId?: number;\n\t\t/**\n\t\t * The configured option for how users display within the product.\n\t\t */\n\t\tdisplayUser?: string;\n\t\t/**\n\t\t * Whether a blank value is treated the same as 0 in calculations within the product.\n\t\t */\n\t\tblankIsZero?: boolean;\n\t\t/**\n\t\t * Whether an exact match is required for a report link.\n\t\t */\n\t\texact?: boolean;\n\t\t/**\n\t\t * Default email domain.\n\t\t */\n\t\tdefaultDomain?: string;\n\t\t/**\n\t\t * The default value configured for a field when a new record is added.\n\t\t */\n\t\tdefaultValue?: string;\n\t\t/**\n\t\t * Don't show the URL protocol when showing the URL.\n\t\t */\n\t\tabbreviate?: boolean;\n\t\t/**\n\t\t * The format used for displaying numeric values in the product (decimal, separators, digit group).\n\t\t */\n\t\tnumberFormat?: number;\n\t\t/**\n\t\t * The field's target table name.\n\t\t */\n\t\ttargetTableName?: string;\n\t\t/**\n\t\t * The link text, if empty, the url will be used as link text.\n\t\t */\n\t\tappearsAs?: string;\n\t\t/**\n\t\t * The field's html input width in the product.\n\t\t */\n\t\twidth?: number;\n\t\t/**\n\t\t * The currency format used when displaying field values within the product.\n\t\t */\n\t\tcurrencyFormat?: 'left' | 'right' | 'middle';\n\t\t/**\n\t\t * Indicates whether to display the day of the week within the product.\n\t\t */\n\t\tdisplayDayOfWeek?: boolean;\n\t\t/**\n\t\t * The id of the field that is the reference in the relationship for this summary.\n\t\t */\n\t\tsummaryReferenceFieldId?: number;\n\t\t/**\n\t\t * The number of digits before commas display in the product, when applicable.\n\t\t */\n\t\tcommaStart?: number;\n\t\t/**\n\t\t * An array of entries that exist for a field that offers choices to the user. Note that these choices refer to the valid values of any records added in the future. You are allowed to remove values from the list of choices even if there are existing records with those values in this field. They will be displayed in red when users look at the data in the browser but there is no other effect. While updating a field with this property, the old choices are removed and replaced by the new choices.\n\t\t */\n\t\tchoices?: string[];\n\t\t/**\n\t\t * The id of the target table.\n\t\t */\n\t\ttargetTableId?: string;\n\t\t/**\n\t\t * Whether to display time as relative.\n\t\t */\n\t\tdisplayRelative?: boolean;\n\t\t/**\n\t\t * An array of the fields that make up a composite field (e.g., address).\n\t\t */\n\t\tcompositeFields?: number[];\n\t\t/**\n\t\t * Indicates whether the checkbox values will be shown as text in reports.\n\t\t */\n\t\tdisplayCheckboxAsText?: boolean;\n\t\t/**\n\t\t * The table the summary field references fields from.\n\t\t */\n\t\tsummaryTableId?: string;\n\t\t/**\n\t\t * Indicates whether to display the time, in addition to the date.\n\t\t */\n\t\tdisplayTime?: boolean;\n\t\t/**\n\t\t * Version modes for files. Keep all versions vs keep last version.\n\t\t */\n\t\tversionMode?: 'keepallversions' | 'keeplastversions';\n\t\t/**\n\t\t * The id of the field that is used to snapshot values from, when applicable.\n\t\t */\n\t\tsnapFieldId?: number;\n\t\t/**\n\t\t * Indicates whether or not to display time in the 24-hour format within the product.\n\t\t */\n\t\thours24?: boolean;\n\t\t/**\n\t\t * Whether to sort alphabetically, default sort is by record ID.\n\t\t */\n\t\tsortAlpha?: boolean;\n\t\t/**\n\t\t * Indicates if the listed entries sort as entered vs alphabetically.\n\t\t */\n\t\tsortAsGiven?: boolean;\n\t\t/**\n\t\t * Whether this field has a phone extension.\n\t\t */\n\t\thasExtension?: boolean;\n\t\t/**\n\t\t * Indicates if the file should open a new window when a user clicks it within the product.\n\t\t */\n\t\tuseNewWindow?: boolean;\n\t\t/**\n\t\t * Whether this field is append only.\n\t\t */\n\t\tappendOnly?: boolean;\n\t\t/**\n\t\t * Indicates if a field that is part of the relationship should be shown as a hyperlink to the parent record within the product.\n\t\t */\n\t\tdisplayAsLink?: boolean;\n\t\t/**\n\t\t * The id of the field that is the reference in the relationship for this lookup.\n\t\t */\n\t\tlookupReferenceFieldId?: number;\n\t};\n\t/**\n\t * Indicates if the field is marked as a default in reports.\n\t */\n\tappearsByDefault?: boolean;\n\t/**\n\t * Indicates if every record in the table must contain a unique value of this field. If you attempt to change a field from not-unique to unique, and the table currently contains records with the same value of this field, you will get an error. In this case you need to find and update those records with duplicate values of the field before changing the field to unique.\n\t */\n\tunique?: boolean;\n\t/**\n\t * Field Permissions for different roles.\n\t */\n\tpermissions?: {\n\t\t/**\n\t\t * The role associated with a given permission for the field\n\t\t */\n\t\trole: string;\n\t\t/**\n\t\t * The permission given to the role for this field\n\t\t */\n\t\tpermissionType: 'None' | 'View' | 'Modify';\n\t\t/**\n\t\t * The Id of the given role\n\t\t */\n\t\troleId: number;\n\t}[];\n\t/**\n\t * Whether the field you are adding should appear on forms.\n\t */\n\taddToForms?: boolean;\n\t/**\n\t * The label (name) of the field.\n\t */\n\tlabel?: string;\n\t/**\n\t * Indicates if the field is marked as searchable.\n\t */\n\tfindEnabled?: boolean;\n\t/**\n\t * Indicates if the field is configured to not wrap when displayed in the product.\n\t */\n\tnoWrap?: boolean;\n};\n\nexport type QuickBaseRequestGetFieldsUsage = QuickBaseRequest & {\n\t/**\n\t * The unique identifier (dbid) of the table.\n\t */\n\ttableId: string;\n\t/**\n\t * The number of fields to skip from the list.\n\t */\n\tskip?: number;\n\t/**\n\t * The maximum number of fields to return.\n\t */\n\ttop?: number;\n};\n\nexport type QuickBaseRequestGetFieldUsage = QuickBaseRequest & {\n\t/**\n\t * The unique identifier (fid) of the field.\n\t */\n\tfieldId: number;\n\t/**\n\t * The unique identifier (dbid) of the table.\n\t */\n\ttableId: string;\n};\n\nexport type QuickBaseRequestRunFormula = QuickBaseRequest & {\n\t/**\n\t * The formula to run. This must be a valid Quickbase formula.\n\t */\n\tformula: string;\n\t/**\n\t * The record ID to run the formula against. Only necessary for formulas that are run in the context of a record. For example, the formula User() does not need a record ID.\n\t */\n\trid?: number;\n\t/**\n\t * The unique identifier (dbid) of the table.\n\t */\n\ttableId: string;\n};\n\nexport type QuickBaseRequestUpsert = QuickBaseRequest & {\n\t/**\n\t * The table identifier.\n\t */\n\ttableId: string;\n\t/**\n\t * Record data array, where each record contains key-value mappings of fields to be defined/updated and their values.\n\t */\n\tdata?: Record<string, { value: any }>[];\n\t/**\n\t * The merge field id.\n\t */\n\tmergeFieldId?: number;\n\t/**\n\t * Specify an array of field ids that will return data for any updates or added record. Record ID (FID 3) is always returned if any field ID is requested.\n\t */\n\tfieldsToReturn?: number[];\n};\n\nexport type QuickBaseRequestDeleteRecords = QuickBaseRequest & {\n\t/**\n\t * The unique identifier of the table.\n\t */\n\ttableId: string;\n\t/**\n\t * The filter to delete records. To delete all records specify a filter that will include all records, for example \\{3.GT.0\\} where 3 is the ID of the Record ID field.\n\t */\n\twhere: string;\n};\n\nexport type QuickBaseRequestRunQuery = QuickBaseRequest & {\n\t/**\n\t * Additional query options.\n\t */\n\toptions?: {\n\t\t/**\n\t\t * The number of records to skip.\n\t\t */\n\t\tskip: number;\n\t\t/**\n\t\t * Whether to run the query against a date time field with respect to the application's local time. The query is run with UTC time by default.\n\t\t */\n\t\tcompareWithAppLocalTime?: boolean;\n\t\t/**\n\t\t * The maximum number of records to display.\n\t\t */\n\t\ttop: number;\n\t};\n\t/**\n\t * The filter, using the Quickbase query language, which determines the records to return. If this parameter is omitted, the query will return all records.\n\t */\n\twhere?: string;\n\t/**\n\t * An array that contains the fields to group the records by.\n\t */\n\tgroupBy?: {\n\t\t/**\n\t\t * The unique identifier of a field in a table.\n\t\t */\n\t\tfieldId: number;\n\t\t/**\n\t\t * Group by based on equal values (equal-values)\n\t\t */\n\t\tgrouping: 'equal-values' | 'first-word' | 'first-letter' | 'equal-values' | '1000000' | '100000' | '10000' | '1000' | '100' | '10' | '1' | '.1' | '.01' | '.001';\n\t}[];\n\t/**\n\t * An array of field IDs and sort directions. If this attribute is not set or set to false, queries will be unsorted to improve performance.\n\t */\n\tsortBy?: {\n\t\t/**\n\t\t * The unique identifier of a field in a table.\n\t\t */\n\t\tfieldId: number;\n\t\t/**\n\t\t * Sort based on ascending order (ASC), descending order (DESC) or equal values (equal-values)\n\t\t */\n\t\torder: 'ASC' | 'DESC' | 'equal-values';\n\t}[] | false;\n\t/**\n\t * An array of field ids for the fields that should be returned in the response. If empty, the default columns on the table will be returned.\n\t */\n\tselect?: number[];\n\t/**\n\t * The table identifier.\n\t */\n\ttableId: string;\n};\n\nexport type QuickBaseRequestGetTempTokenDBID = QuickBaseRequest & {\n\t/**\n\t * The unique identifier of an app or table.\n\t */\n\tdbid: string;\n};\n\nexport type QuickBaseRequestExchangeSsoToken = QuickBaseRequest & {\n\t/**\n\t * The value `urn:ietf:params:oauth:grant-type:token-exchange` indicates that a token exchange is being performed.\n\t */\n\tgrant_type: 'urn:ietf:params:oauth:grant-type:token-exchange';\n\t/**\n\t * An identifier for the type of the requested security token. For the RESTful API, use `urn:quickbase:params:oauth:token-type:temp_token`. For the XML or SCIM APIs use `urn:quickbase:params:oauth:token-type:temp_ticket`.\n\t */\n\trequested_token_type: 'urn:quickbase:params:oauth:token-type:temp_ticket' | 'urn:quickbase:params:oauth:token-type:temp_token';\n\t/**\n\t * A security token that represents the identity of the party on behalf of whom the request is being made. For SAML 2.0, the value should be a base64url-encoded SAML 2.0 assertion.\n\t */\n\tsubject_token: string;\n\t/**\n\t * An identifier that indicates the type of the security token in the `subject_token` parameter.\n\t */\n\tsubject_token_type: 'urn:ietf:params:oauth:token-type:saml2';\n};\n\nexport type QuickBaseRequestCloneUserToken = QuickBaseRequest & {\n\t/**\n\t * The new name for the cloned user token.\n\t */\n\tname: string;\n\t/**\n\t * The description for the cloned user token.\n\t */\n\tdescription: string;\n};\n\nexport type QuickBaseRequestDeactivateUserToken = QuickBaseRequest & {\n};\n\nexport type QuickBaseRequestDeleteUserToken = QuickBaseRequest & {\n};\n\nexport type QuickBaseRequestDownloadFile = QuickBaseRequest & {\n\t/**\n\t * The unique identifier of the table.\n\t */\n\ttableId: string;\n\t/**\n\t * The unique identifier of the record.\n\t */\n\trecordId: number;\n\t/**\n\t * The unique identifier of the field.\n\t */\n\tfieldId: number;\n\t/**\n\t * The file attachment version number.\n\t */\n\tversionNumber: number;\n};\n\nexport type QuickBaseRequestDeleteFile = QuickBaseRequest & {\n\t/**\n\t * The unique identifier of the table.\n\t */\n\ttableId: string;\n\t/**\n\t * The unique identifier of the record.\n\t */\n\trecordId: number;\n\t/**\n\t * The unique identifier of the field.\n\t */\n\tfieldId: number;\n\t/**\n\t * The file attachment version number.\n\t */\n\tversionNumber: number;\n};\n\nexport type QuickBaseRequestGetUsers = QuickBaseRequest & {\n\t/**\n\t * The account id being used to get users. If no value is specified, the first account associated with the requesting user token is chosen.\n\t */\n\taccountId?: number;\n\t/**\n\t * When provided, the returned users will be narrowed down only to the users included in this list.\n\t */\n\temails: string[];\n\t/**\n\t * When provided, the returned users will be narrowed down only to the users assigned to the app id's provided in this list. The provided app id's should belong to the same account.\n\t */\n\tappIds: string[];\n\t/**\n\t * Next page token used to get the next 'page' of results when available. When this field is empty, the first page is returned.\n\t */\n\tnextPageToken: string;\n};\n\nexport type QuickBaseRequestDenyUsers = QuickBaseRequest & {\n\t/**\n\t * The account id being used to deny users. If no value is specified, the first account associated with the requesting user token is chosen.\n\t */\n\taccountId?: number;\n};\n\nexport type QuickBaseRequestDenyUsersAndGroups = QuickBaseRequest & {\n\t/**\n\t * Specifies if the users should also be removed from all groups.\n\t */\n\tshouldDeleteFromGroups: boolean;\n\t/**\n\t * The account id being used to deny users. If no value is specified, the first account associated with the requesting user token is chosen.\n\t */\n\taccountId?: number;\n};\n\nexport type QuickBaseRequestUndenyUsers = QuickBaseRequest & {\n\t/**\n\t * The account id being used to undeny users. If no value is specified, the first account associated with the requesting user token is chosen.\n\t */\n\taccountId?: number;\n};\n\nexport type QuickBaseRequestAddMembersToGroup = QuickBaseRequest & {\n\t/**\n\t * This is the ID of the group being modified.\n\t */\n\tgid: number;\n};\n\nexport type QuickBaseRequestRemoveMembersFromGroup = QuickBaseRequest & {\n\t/**\n\t * This is the ID of the group being modified.\n\t */\n\tgid: number;\n};\n\nexport type QuickBaseRequestAddManagersToGroup = QuickBaseRequest & {\n\t/**\n\t * This is the ID of the group being modified.\n\t */\n\tgid: number;\n};\n\nexport type QuickBaseRequestRemoveManagersFromGroup = QuickBaseRequest & {\n\t/**\n\t * This is the ID of the group being modified.\n\t */\n\tgid: number;\n};\n\nexport type QuickBaseRequestAddSubgroupsToGroup = QuickBaseRequest & {\n\t/**\n\t * This is the ID of the group being modified.\n\t */\n\tgid: number;\n};\n\nexport type QuickBaseRequestRemoveSubgroupsFromGroup = QuickBaseRequest & {\n\t/**\n\t * This is the ID of the group being modified.\n\t */\n\tgid: number;\n};\n\nexport type QuickBaseRequestAudit = QuickBaseRequest & {\n\t/**\n\t * Token specifying start of page. For first page don't supply this.\n\t */\n\tnextToken: string;\n\t/**\n\t * Number of logs to return per page, default is 10000, minimum is 1000, max is 50000.\n\t */\n\tnumRows: number;\n\t/**\n\t * The query id of an audit log request. This id is needed to fetch subsequent paged results of a single query.\n\t */\n\tqueryId: string;\n\t/**\n\t * The date for which audit logs need to be fetched. This must be date-time only, as YYYY-MM-DD, and a valid date in the past.\n\t */\n\tdate: string;\n};\n\nexport type QuickBaseRequestPlatformAnalyticReads = QuickBaseRequest & {\n\t/**\n\t * The date for which read summaries need to be fetched. This must be date-time only, as YYYY-MM-DD, and a valid date in the past.\n\t */\n\tday?: string;\n};\n\nexport type QuickBaseRequestPlatformAnalyticEventSummaries = QuickBaseRequest & {\n\t/**\n\t * The ID of the account to query. If no value is specified, the first account matching the provided domain is chosen.\n\t */\n\taccountId?: number;\n\t/**\n\t * The start date and time of the requested summaries in ISO 8601 time format.\n\t */\n\tstart: string;\n\t/**\n\t * The end date and time of the requested summaries in ISO 8601 time format.\n\t */\n\tend: string;\n\t/**\n\t * How the events should be grouped.\n\t */\n\tgroupBy: 'app' | 'user';\n\t/**\n\t * A pagination token from a previous response. Used to fetch the next page.\n\t */\n\tnextToken?: string;\n\t/**\n\t * A list of items to filter events by. Only events which match ALL criteria will be included in the results.\n\t */\n\twhere?: {\n\t\t/**\n\t\t * Id of the item to filter by - the hash uid if filtering a user, or the app id if filtering an app.\n\t\t */\n\t\tid: string;\n\t\t/**\n\t\t * The type of item to filter by.\n\t\t */\n\t\ttype: 'app' | 'user';\n\t}[];\n};\n\nexport type QuickBaseRequestExportSolution = QuickBaseRequest & {\n\t/**\n\t * The unique identifier of a solution\n\t */\n\tsolutionId: string;\n};\n\nexport type QuickBaseRequestUpdateSolution = QuickBaseRequest & {\n\t/**\n\t * The unique identifier of a solution\n\t */\n\tsolutionId: string;\n};\n\nexport type QuickBaseRequestCreateSolution = QuickBaseRequest & {\n};\n\nexport type QuickBaseResponseCreateApp = {\n\t/**\n\t * The app name. You are allowed to create multiple apps with the same name, in the same realm, because they will have different dbid values. We urge you to be careful about doing this.\n\t */\n\tname: string;\n\t/**\n\t * The description for the app. If this property is left out, the app description will be blank.\n\t */\n\tdescription: string;\n\t/**\n\t * The time and date the app was created, in the ISO 8601 time format YYYY-MM-DDThh:mm:ss.sssZ (in UTC time zone).\n\t */\n\tcreated: string;\n\t/**\n\t * The time and date the app was last updated, in the ISO 8601 time format YYYY-MM-DDThh:mm:ss.sssZ (in UTC time zone).\n\t */\n\tupdated: string;\n\t/**\n\t * A description of the format used when displaying date values in this app. Note that this is a browser-only parameter - see the [Field type details](../fieldInfo) page in the API Guide for how time values are returned in API calls. See [About Localizing Dates](https://help.quickbase.com/user-assistance/about_localizing_dates_numbers.html) to set the app\u2019s date format.\n\t */\n\tdateFormat: 'MM-DD-YYYY' | 'MM-DD-YY' | 'DD-MM-YYYY' | 'DD-MM-YY' | 'YYYY-MM-DD';\n\t/**\n\t * A description of the time zone used when displaying time values in this app. Note that this is a browser-only parameter - see the [Field type details](../fieldInfo) page in the portal for how time values are returned in API calls. See [Set the Time Zone for Both the Application and the Account](https://help.quickbase.com/user-assistance/application_local_timezone.html) to set the application\u2019s time zone.\n\t */\n\ttimeZone: string;\n\t/**\n\t * The unique identifier for this application.\n\t */\n\tid: string;\n\t/**\n\t * Indicates whether app includes Everyone On The Internet access. See [Sharing apps with Everyone on the Internet (EOTI).](https://help.quickbase.com/user-assistance/share_with_everyone_on_internet.html)\n\t */\n\thasEveryoneOnTheInternet: boolean;\n\t/**\n\t * The app variables. See [About Application Variables](https://help.quickbase.com/user-assistance/variables.html)\n\t */\n\tvariables: {\n\t\t/**\n\t\t * Variable name.\n\t\t */\n\t\tname: string;\n\t\t/**\n\t\t * Variable value.\n\t\t */\n\t\tvalue: string;\n\t}[];\n\t/**\n\t * The Data Classification label assigned to the application. If Data Classification is not turned on, this will not be returned. If Data Classification is turned on, but application is not labeled, we return \u201CNone\".  Data Classification labels can be added in the Admin Console by a Realm Administrator for Platform+ plans.\n\t */\n\tdataClassification?: string;\n\t/**\n\t * Security properties of the application\n\t */\n\tsecurityProperties: {\n\t\t/**\n\t\t * Allow users who are not administrators to copy\n\t\t */\n\t\tallowClone: boolean;\n\t\t/**\n\t\t * Allow users who are not administrators to export data\n\t\t */\n\t\tallowExport: boolean;\n\t\t/**\n\t\t * Hide from public application searches\n\t\t */\n\t\thideFromPublic: boolean;\n\t\t/**\n\t\t * Require Application Tokens\n\t\t */\n\t\tenableAppTokens: boolean;\n\t\t/**\n\t\t * Only users logging in from \"approved\" IP addresses may access this application\n\t\t */\n\t\tuseIPFilter: boolean;\n\t\t/**\n\t\t * Only \"approved\" users may access this application\n\t\t */\n\t\tmustBeRealmApproved: boolean;\n\t};\n};\n\nexport type QuickBaseResponseGetApp = {\n\t/**\n\t * The app name. You are allowed to create multiple apps with the same name, in the same realm, because they will have different dbid values. We urge you to be careful about doing this.\n\t */\n\tname: string;\n\t/**\n\t * The description for the app. If this property is left out, the app description will be blank.\n\t */\n\tdescription: string;\n\t/**\n\t * The time and date the app was created, in the ISO 8601 time format YYYY-MM-DDThh:mm:ss.sssZ (in UTC time zone).\n\t */\n\tcreated: string;\n\t/**\n\t * The time and date the app was last updated, in the ISO 8601 time format YYYY-MM-DDThh:mm:ss.sssZ (in UTC time zone).\n\t */\n\tupdated: string;\n\t/**\n\t * A description of the format used when displaying date values in this app. Note that this is a browser-only parameter - see the [Field type details](../fieldInfo) page in the API Guide for how time values are returned in API calls. See [About Localizing Dates](https://help.quickbase.com/user-assistance/about_localizing_dates_numbers.html) to set the app\u2019s date format.\n\t */\n\tdateFormat: string;\n\t/**\n\t * A description of the time zone used when displaying time values in this app. Note that this is a browser-only parameter - see the [Field type details](../fieldInfo) page in the portal for how time values are returned in API calls. See [Set the Time Zone for Both the Application and the Account](https://help.quickbase.com/user-assistance/application_local_timezone.html) to set the application\u2019s time zone.\n\t */\n\ttimeZone: string;\n\t/**\n\t * The unique identifier for this application.\n\t */\n\tid: string;\n\t/**\n\t * Indicates whether app includes Everyone On The Internet access. See [Sharing apps with Everyone on the Internet (EOTI).](https://help.quickbase.com/user-assistance/share_with_everyone_on_internet.html)\n\t */\n\thasEveryoneOnTheInternet: boolean;\n\t/**\n\t * The app variables. See [About Application Variables](https://help.quickbase.com/user-assistance/variables.html)\n\t */\n\tvariables: {\n\t\t/**\n\t\t * Variable name.\n\t\t */\n\t\tname: string;\n\t\t/**\n\t\t * Variable value.\n\t\t */\n\t\tvalue: string;\n\t}[];\n\t/**\n\t * The Data Classification label assigned to the application. If Data Classification is not turned on, this will not be returned. If Data Classification is turned on, but application is not labeled, we return \u201CNone\".  Data Classification labels can be added in the Admin Console by a Realm Administrator for Platform+ plans.\n\t */\n\tdataClassification?: string;\n\t/**\n\t * Security properties of the application\n\t */\n\tsecurityProperties: {\n\t\t/**\n\t\t * Allow users who are not administrators to copy\n\t\t */\n\t\tallowClone: boolean;\n\t\t/**\n\t\t * Allow users who are not administrators to export data\n\t\t */\n\t\tallowExport: boolean;\n\t\t/**\n\t\t * Hide from public application searches\n\t\t */\n\t\thideFromPublic: boolean;\n\t\t/**\n\t\t * Require Application Tokens\n\t\t */\n\t\tenableAppTokens: boolean;\n\t\t/**\n\t\t * Only users logging in from \"approved\" IP addresses may access this application\n\t\t */\n\t\tuseIPFilter: boolean;\n\t\t/**\n\t\t * Only \"approved\" users may access this application\n\t\t */\n\t\tmustBeRealmApproved: boolean;\n\t};\n};\n\nexport type QuickBaseResponseUpdateApp = {\n\t/**\n\t * The app name. You are allowed to create multiple apps with the same name, in the same realm, because they will have different dbid values. We urge you to be careful about doing this.\n\t */\n\tname: string;\n\t/**\n\t * The description for the app. If this property is left out, the app description will be blank.\n\t */\n\tdescription: string;\n\t/**\n\t * The time and date the app was created, in the ISO 8601 time format YYYY-MM-DDThh:mm:ss.sssZ (in UTC time zone).\n\t */\n\tcreated: string;\n\t/**\n\t * The time and date the app was last updated, in the ISO 8601 time format YYYY-MM-DDThh:mm:ss.sssZ (in UTC time zone).\n\t */\n\tupdated: string;\n\t/**\n\t * A description of the format used when displaying date values in this app. Note that this is a browser-only parameter - see the [Field type details](../fieldInfo) page in the API Guide for how time values are returned in API calls. See [About Localizing Dates](https://help.quickbase.com/user-assistance/about_localizing_dates_numbers.html) to set the app\u2019s date format.\n\t */\n\tdateFormat: string;\n\t/**\n\t * A description of the time zone used when displaying time values in this app. Note that this is a browser-only parameter - see the [Field type details](../fieldInfo) page in the portal for how time values are returned in API calls. See [Set the Time Zone for Both the Application and the Account](https://help.quickbase.com/user-assistance/application_local_timezone.html) to set the application\u2019s time zone.\n\t */\n\ttimeZone: string;\n\t/**\n\t * The unique identifier for this application.\n\t */\n\tid: string;\n\t/**\n\t * Indicates whether app includes Everyone On The Internet access. See [Sharing apps with Everyone on the Internet (EOTI).](https://help.quickbase.com/user-assistance/share_with_everyone_on_internet.html)\n\t */\n\thasEveryoneOnTheInternet: boolean;\n\t/**\n\t * The app variables. See [About Application Variables](https://help.quickbase.com/user-assistance/variables.html)\n\t */\n\tvariables: {\n\t\t/**\n\t\t * Variable name.\n\t\t */\n\t\tname: string;\n\t\t/**\n\t\t * Variable value.\n\t\t */\n\t\tvalue: string;\n\t}[];\n\t/**\n\t * The Data Classification label assigned to the application. If Data Classification is not turned on, this will not be returned. If Data Classification is turned on, but application is not labeled, we return \u201CNone\".  Data Classification labels can be added in the Admin Console by a Realm Administrator for Platform+ plans.\n\t */\n\tdataClassification?: string;\n\t/**\n\t * Security properties of the application\n\t */\n\tsecurityProperties: {\n\t\t/**\n\t\t * Allow users who are not administrators to copy\n\t\t */\n\t\tallowClone: boolean;\n\t\t/**\n\t\t * Allow users who are not administrators to export data\n\t\t */\n\t\tallowExport: boolean;\n\t\t/**\n\t\t * Hide from public application searches\n\t\t */\n\t\thideFromPublic: boolean;\n\t\t/**\n\t\t * Require Application Tokens\n\t\t */\n\t\tenableAppTokens: boolean;\n\t\t/**\n\t\t * Only users logging in from \"approved\" IP addresses may access this application\n\t\t */\n\t\tuseIPFilter: boolean;\n\t\t/**\n\t\t * Only \"approved\" users may access this application\n\t\t */\n\t\tmustBeRealmApproved: boolean;\n\t};\n};\n\nexport type QuickBaseResponseDeleteApp = {\n\t/**\n\t * An ID of deleted application.\n\t */\n\tdeletedAppId: string;\n};\n\nexport type QuickBaseResponseGetAppEvents = {\n\t/**\n\t * Indication of whether current event is active.\n\t */\n\tisActive: boolean;\n\t/**\n\t * Type of an event.\n\t */\n\ttype: 'webhook' | 'qb-action' | 'email-notification' | 'subscription' | 'reminder' | 'automation';\n\t/**\n\t * The name of the event. This property is not returned for automations.\n\t */\n\tname: string;\n\t/**\n\t * The url to automation that can be accessed from the browser. Only returned for automations.\n\t */\n\turl: string;\n\t/**\n\t * The user that owns the event.\n\t */\n\towner: {\n\t\t/**\n\t\t * User full name.\n\t\t */\n\t\tname: string;\n\t\t/**\n\t\t * User Id.\n\t\t */\n\t\tid: string;\n\t\t/**\n\t\t * User email.\n\t\t */\n\t\temail: string;\n\t\t/**\n\t\t * User Name as updated in user properties. Optional, appears if not the same as user email.\n\t\t */\n\t\tuserName: string;\n\t};\n\t/**\n\t * The unique identifier of the table to which event belongs to.\n\t */\n\ttableId: string;\n}[];\n\nexport type QuickBaseResponseCopyApp = {\n\t/**\n\t * The app name. You are allowed to create multiple apps with the same name, in the same realm, because they will have different dbid values. We urge you to be careful about doing this.\n\t */\n\tname: string;\n\t/**\n\t * The description for the app\n\t */\n\tdescription: string;\n\t/**\n\t * The time and date the app was created, in the ISO 8601 time format YYYY-MM-DDThh:mm:ss.sssZ (in UTC time zone).\n\t */\n\tcreated: string;\n\t/**\n\t * The time and date the app was last updated, in the ISO 8601 time format YYYY-MM-DDThh:mm:ss.sssZ (in UTC time zone).\n\t */\n\tupdated: string;\n\t/**\n\t * A description of the format used when displaying date values in this app. Note that this is a browser-only parameter - see the [Field type details](../fieldInfo) page in the API Guide for how time values are returned in API calls. See [About Localizing Dates](https://help.quickbase.com/user-assistance/about_localizing_dates_numbers.html) to set the app\u2019s date format.\n\t */\n\tdateFormat: string;\n\t/**\n\t * A description of the time zone used when displaying time values in this app. Note that this is a browser-only parameter - see the [Field type details](../fieldInfo) page in the portal for how time values are returned in API calls. See [Set the Time Zone for Both the Application and the Account](https://help.quickbase.com/user-assistance/application_local_timezone.html) to set the application\u2019s time zone.\n\t */\n\ttimeZone: string;\n\t/**\n\t * The unique identifier for this application.\n\t */\n\tid: string;\n\t/**\n\t * Indicates whether app includes Everyone On The Internet access. See [Sharing apps with Everyone on the Internet (EOTI).](https://help.quickbase.com/user-assistance/share_with_everyone_on_internet.html)\n\t */\n\thasEveryoneOnTheInternet: boolean;\n\t/**\n\t * The app variables. See [About Application Variables](https://help.quickbase.com/user-assistance/variables.html)\n\t */\n\tvariables: {\n\t\t/**\n\t\t * Variable name.\n\t\t */\n\t\tname: string;\n\t\t/**\n\t\t * Variable value.\n\t\t */\n\t\tvalue: string;\n\t}[];\n\t/**\n\t * The id of the app from which this app was copied\n\t */\n\tancestorId: string;\n\t/**\n\t * The Data Classification label assigned to the application. If Data Classification is not turned on, this will not be returned. If Data Classification is turned on, but application is not labeled, we return \u201CNone\".  Data Classification labels can be added in the Admin Console by a Realm Administrator for Platform+ plans.\n\t */\n\tdataClassification?: string;\n};\n\nexport type QuickBaseResponseCreateTable = {\n\t/**\n\t * The name of the table.\n\t */\n\tname: string;\n\t/**\n\t * The unique identifier (dbid) of the table.\n\t */\n\tid: string;\n\t/**\n\t * The automatically-created table alias for the table.\n\t */\n\talias: string;\n\t/**\n\t * The description of the table, as configured by an application administrator.\n\t */\n\tdescription: string;\n\t/**\n\t * The time and date when the table was created, in the ISO 8601 time format YYYY-MM-DDThh:mm:ss.sssZ (in UTC time zone).\n\t */\n\tcreated: string;\n\t/**\n\t * The time and date when the table schema or data was last updated, in the ISO 8601 time format YYYY-MM-DDThh:mm:ss.sssZ (in UTC time zone).\n\t */\n\tupdated: string;\n\t/**\n\t * The incremental Record ID that will be used when the next record is created, as determined when the API call was ran.\n\t */\n\tnextRecordId: number;\n\t/**\n\t * The incremental Field ID that will be used when the next field is created, as determined when the API call was ran.\n\t */\n\tnextFieldId: number;\n\t/**\n\t * The id of the field that is configured for default sorting.\n\t */\n\tdefaultSortFieldId: number;\n\t/**\n\t * The configuration of the default sort order on the table.\n\t */\n\tdefaultSortOrder: 'ASC' | 'DESC';\n\t/**\n\t * The id of the field that is configured to be the key on this table, which is usually the Quickbase Record ID.\n\t */\n\tkeyFieldId: number;\n\t/**\n\t * The builder-configured singular noun of the table.\n\t */\n\tsingleRecordName: string;\n\t/**\n\t * The builder-configured plural noun of the table.\n\t */\n\tpluralRecordName: string;\n\t/**\n\t * The size limit for the table.\n\t */\n\tsizeLimit: string;\n\t/**\n\t * The amount of space currently being used by the table.\n\t */\n\tspaceUsed: string;\n\t/**\n\t * The amount of space remaining for use by the table.\n\t */\n\tspaceRemaining: string;\n};\n\nexport type QuickBaseResponseGetAppTables = {\n\t/**\n\t * The name of the table.\n\t */\n\tname: string;\n\t/**\n\t * The unique identifier (dbid) of the table.\n\t */\n\tid: string;\n\t/**\n\t * The automatically-created table alias for the table.\n\t */\n\talias: string;\n\t/**\n\t * The description of the table, as configured by an application administrator.\n\t */\n\tdescription: string;\n\t/**\n\t * The time and date when the table was created, in the ISO 8601 time format YYYY-MM-DDThh:mm:ss.sssZ (in UTC time zone).\n\t */\n\tcreated: string;\n\t/**\n\t * The time and date when the table schema or data was last updated, in the ISO 8601 time format YYYY-MM-DDThh:mm:ss.sssZ (in UTC time zone).\n\t */\n\tupdated: string;\n\t/**\n\t * The incremental Record ID that will be used when the next record is created, as determined when the API call was ran.\n\t */\n\tnextRecordId: number;\n\t/**\n\t * The incremental Field ID that will be used when the next field is created, as determined when the API call was ran.\n\t */\n\tnextFieldId: number;\n\t/**\n\t * The id of the field that is configured for default sorting.\n\t */\n\tdefaultSortFieldId: number;\n\t/**\n\t * The configuration of the default sort order on the table.\n\t */\n\tdefaultSortOrder: 'ASC' | 'DESC';\n\t/**\n\t * The id of the field that is configured to be the key on this table, which is usually the Quickbase Record ID.\n\t */\n\tkeyFieldId: number;\n\t/**\n\t * The builder-configured singular noun of the table.\n\t */\n\tsingleRecordName: string;\n\t/**\n\t * The builder-configured plural noun of the table.\n\t */\n\tpluralRecordName: string;\n\t/**\n\t * The size limit for the table.\n\t */\n\tsizeLimit: string;\n\t/**\n\t * The amount of space currently being used by the table.\n\t */\n\tspaceUsed: string;\n\t/**\n\t * The amount of space remaining for use by the table.\n\t */\n\tspaceRemaining: string;\n}[];\n\nexport type QuickBaseResponseGetTable = {\n\t/**\n\t * The name of the table.\n\t */\n\tname: string;\n\t/**\n\t * The unique identifier (dbid) of the table.\n\t */\n\tid: string;\n\t/**\n\t * The automatically-created table alias for the table.\n\t */\n\talias: string;\n\t/**\n\t * The description of the table, as configured by an application administrator.\n\t */\n\tdescription: string;\n\t/**\n\t * The time and date when the table was created, in the ISO 8601 time format YYYY-MM-DDThh:mm:ss.sssZ (in UTC time zone).\n\t */\n\tcreated: string;\n\t/**\n\t * The time and date when the table schema or data was last updated, in the ISO 8601 time format YYYY-MM-DDThh:mm:ss.sssZ (in UTC time zone).\n\t */\n\tupdated: string;\n\t/**\n\t * The incremental Record ID that will be used when the next record is created, as determined when the API call was ran.\n\t */\n\tnextRecordId: number;\n\t/**\n\t * The incremental Field ID that will be used when the next field is created, as determined when the API call was ran.\n\t */\n\tnextFieldId: number;\n\t/**\n\t * The id of the field that is configured for default sorting.\n\t */\n\tdefaultSortFieldId: number;\n\t/**\n\t * The configuration of the default sort order on the table.\n\t */\n\tdefaultSortOrder: 'ASC' | 'DESC';\n\t/**\n\t * The id of the field that is configured to be the key on this table, which is usually the Quickbase Record ID.\n\t */\n\tkeyFieldId: number;\n\t/**\n\t * The builder-configured singular noun of the table.\n\t */\n\tsingleRecordName: string;\n\t/**\n\t * The builder-configured plural noun of the table.\n\t */\n\tpluralRecordName: string;\n\t/**\n\t * The size limit for the table.\n\t */\n\tsizeLimit: string;\n\t/**\n\t * The amount of space currently being used by the table.\n\t */\n\tspaceUsed: string;\n\t/**\n\t * The amount of space remaining for use by the table.\n\t */\n\tspaceRemaining: string;\n};\n\nexport type QuickBaseResponseUpdateTable = {\n\t/**\n\t * The name of the table.\n\t */\n\tname: string;\n\t/**\n\t * The unique identifier (dbid) of the table.\n\t */\n\tid: string;\n\t/**\n\t * The automatically-created table alias for the table.\n\t */\n\talias: string;\n\t/**\n\t * The description of the table, as configured by an application administrator.\n\t */\n\tdescription: string;\n\t/**\n\t * The time and date when the table was created, in the ISO 8601 time format YYYY-MM-DDThh:mm:ss.sssZ (in UTC time zone).\n\t */\n\tcreated: string;\n\t/**\n\t * The time and date when the table schema or data was last updated, in the ISO 8601 time format YYYY-MM-DDThh:mm:ss.sssZ (in UTC time zone).\n\t */\n\tupdated: string;\n\t/**\n\t * The incremental Record ID that will be used when the next record is created, as determined when the API call was ran.\n\t */\n\tnextRecordId: number;\n\t/**\n\t * The incremental Field ID that will be used when the next field is created, as determined when the API call was ran.\n\t */\n\tnextFieldId: number;\n\t/**\n\t * The id of the field that is configured for default sorting.\n\t */\n\tdefaultSortFieldId: number;\n\t/**\n\t * The configuration of the default sort order on the table.\n\t */\n\tdefaultSortOrder: 'ASC' | 'DESC';\n\t/**\n\t * The id of the field that is configured to be the key on this table, which is usually the Quickbase Record ID.\n\t */\n\tkeyFieldId: number;\n\t/**\n\t * The builder-configured singular noun of the table.\n\t */\n\tsingleRecordName: string;\n\t/**\n\t * The builder-configured plural noun of the table.\n\t */\n\tpluralRecordName: string;\n\t/**\n\t * The size limit for the table.\n\t */\n\tsizeLimit: string;\n\t/**\n\t * The amount of space currently being used by the table.\n\t */\n\tspaceUsed: string;\n\t/**\n\t * The amount of space remaining for use by the table.\n\t */\n\tspaceRemaining: string;\n};\n\nexport type QuickBaseResponseDeleteTable = {\n\t/**\n\t * The deleted table id.\n\t */\n\tdeletedTableId: string;\n};\n\nexport type QuickBaseResponseGetRelationships = {\n\t/**\n\t * The relationships in a table.\n\t */\n\trelationships: {\n\t\t/**\n\t\t * The relationship id (foreign key field id).\n\t\t */\n\t\tid: number;\n\t\t/**\n\t\t * The parent table id of the relationship.\n\t\t */\n\t\tparentTableId: string;\n\t\t/**\n\t\t * The child table id of the relationship.\n\t\t */\n\t\tchildTableId: string;\n\t\t/**\n\t\t * The foreign key field information.\n\t\t */\n\t\tforeignKeyField?: {\n\t\t\t/**\n\t\t\t * Field id.\n\t\t\t */\n\t\t\tid: number;\n\t\t\t/**\n\t\t\t * Field label.\n\t\t\t */\n\t\t\tlabel: string;\n\t\t\t/**\n\t\t\t * Field type.\n\t\t\t */\n\t\t\ttype: 'text' | 'text-multiple-choice' | 'text-multi-line' | 'rich-text' | 'numeric' | 'currency' | 'rating' | 'percent' | 'multitext' | 'email' | 'url' | 'duration' | 'date' | 'datetime' | 'timestamp' | 'timeofday' | 'checkbox' | 'user' | 'multiuser' | 'address' | 'phone' | 'file';\n\t\t};\n\t\t/**\n\t\t * Whether this is a cross-app relationship.\n\t\t */\n\t\tisCrossApp: boolean;\n\t\t/**\n\t\t * The lookup fields array.\n\t\t */\n\t\tlookupFields?: {\n\t\t\t/**\n\t\t\t * Field id.\n\t\t\t */\n\t\t\tid: number;\n\t\t\t/**\n\t\t\t * Field label.\n\t\t\t */\n\t\t\tlabel: string;\n\t\t\t/**\n\t\t\t * Field type.\n\t\t\t */\n\t\t\ttype: 'text' | 'text-multiple-choice' | 'text-multi-line' | 'rich-text' | 'numeric' | 'currency' | 'rating' | 'percent' | 'multitext' | 'email' | 'url' | 'duration' | 'date' | 'datetime' | 'timestamp' | 'timeofday' | 'checkbox' | 'user' | 'multiuser' | 'address' | 'phone' | 'file';\n\t\t}[];\n\t\t/**\n\t\t * The summary fields array.\n\t\t */\n\t\tsummaryFields?: {\n\t\t\t/**\n\t\t\t * Field id.\n\t\t\t */\n\t\t\tid: number;\n\t\t\t/**\n\t\t\t * Field label.\n\t\t\t */\n\t\t\tlabel: string;\n\t\t\t/**\n\t\t\t * Field type.\n\t\t\t */\n\t\t\ttype: 'text' | 'text-multiple-choice' | 'text-multi-line' | 'rich-text' | 'numeric' | 'currency' | 'rating' | 'percent' | 'multitext' | 'email' | 'url' | 'duration' | 'date' | 'datetime' | 'timestamp' | 'timeofday' | 'checkbox' | 'user' | 'multiuser' | 'address' | 'phone' | 'file';\n\t\t}[];\n\t}[];\n\t/**\n\t * Additional information about the results that may be helpful.\n\t */\n\tmetadata?: {\n\t\t/**\n\t\t * The number of relationships to skip.\n\t\t */\n\t\tskip: number;\n\t\t/**\n\t\t * The total number of relationships.\n\t\t */\n\t\ttotalRelationships: number;\n\t\t/**\n\t\t * The number of relationships in the current response object.\n\t\t */\n\t\tnumRelationships: number;\n\t};\n};\n\nexport type QuickBaseResponseCreateRelationship = {\n\t/**\n\t * The relationship id (foreign key field id).\n\t */\n\tid: number;\n\t/**\n\t * The parent table id of the relationship.\n\t */\n\tparentTableId: string;\n\t/**\n\t * The child table id of the relationship.\n\t */\n\tchildTableId: string;\n\t/**\n\t * The foreign key field information.\n\t */\n\tforeignKeyField: {\n\t\t/**\n\t\t * Field id.\n\t\t */\n\t\tid: number;\n\t\t/**\n\t\t * Field label.\n\t\t */\n\t\tlabel: string;\n\t\t/**\n\t\t * Field type.\n\t\t */\n\t\ttype: 'text' | 'text-multiple-choice' | 'text-multi-line' | 'rich-text' | 'numeric' | 'currency' | 'rating' | 'percent' | 'multitext' | 'email' | 'url' | 'duration' | 'date' | 'datetime' | 'timestamp' | 'timeofday' | 'checkbox' | 'user' | 'multiuser' | 'address' | 'phone' | 'file';\n\t};\n\t/**\n\t * Whether this is a cross-app relationship.\n\t */\n\tisCrossApp: boolean;\n\t/**\n\t * The lookup fields array.\n\t */\n\tlookupFields: {\n\t\t/**\n\t\t * Field id.\n\t\t */\n\t\tid: number;\n\t\t/**\n\t\t * Field label.\n\t\t */\n\t\tlabel: string;\n\t\t/**\n\t\t * Field type.\n\t\t */\n\t\ttype: 'text' | 'text-multiple-choice' | 'text-multi-line' | 'rich-text' | 'numeric' | 'currency' | 'rating' | 'percent' | 'multitext' | 'email' | 'url' | 'duration' | 'date' | 'datetime' | 'timestamp' | 'timeofday' | 'checkbox' | 'user' | 'multiuser' | 'address' | 'phone' | 'file';\n\t}[];\n\t/**\n\t * The summary fields array.\n\t */\n\tsummaryFields: {\n\t\t/**\n\t\t * Field id.\n\t\t */\n\t\tid: number;\n\t\t/**\n\t\t * Field label.\n\t\t */\n\t\tlabel: string;\n\t\t/**\n\t\t * Field type.\n\t\t */\n\t\ttype: 'text' | 'text-multiple-choice' | 'text-multi-line' | 'rich-text' | 'numeric' | 'currency' | 'rating' | 'percent' | 'multitext' | 'email' | 'url' | 'duration' | 'date' | 'datetime' | 'timestamp' | 'timeofday' | 'checkbox' | 'user' | 'multiuser' | 'address' | 'phone' | 'file';\n\t}[];\n};\n\nexport type QuickBaseResponseUpdateRelationship = {\n\t/**\n\t * The relationship id (foreign key field id).\n\t */\n\tid: number;\n\t/**\n\t * The parent table id of the relationship.\n\t */\n\tparentTableId: string;\n\t/**\n\t * The child table id of the relationship.\n\t */\n\tchildTableId: string;\n\t/**\n\t * The foreign key field information.\n\t */\n\tforeignKeyField?: {\n\t\t/**\n\t\t * Field id.\n\t\t */\n\t\tid: number;\n\t\t/**\n\t\t * Field label.\n\t\t */\n\t\tlabel: string;\n\t\t/**\n\t\t * Field type.\n\t\t */\n\t\ttype: 'text' | 'text-multiple-choice' | 'text-multi-line' | 'rich-text' | 'numeric' | 'currency' | 'rating' | 'percent' | 'multitext' | 'email' | 'url' | 'duration' | 'date' | 'datetime' | 'timestamp' | 'timeofday' | 'checkbox' | 'user' | 'multiuser' | 'address' | 'phone' | 'file';\n\t};\n\t/**\n\t * Whether this is a cross-app relationship.\n\t */\n\tisCrossApp: boolean;\n\t/**\n\t * The lookup fields array.\n\t */\n\tlookupFields?: {\n\t\t/**\n\t\t * Field id.\n\t\t */\n\t\tid: number;\n\t\t/**\n\t\t * Field label.\n\t\t */\n\t\tlabel: string;\n\t\t/**\n\t\t * Field type.\n\t\t */\n\t\ttype: 'text' | 'text-multiple-choice' | 'text-multi-line' | 'rich-text' | 'numeric' | 'currency' | 'rating' | 'percent' | 'multitext' | 'email' | 'url' | 'duration' | 'date' | 'datetime' | 'timestamp' | 'timeofday' | 'checkbox' | 'user' | 'multiuser' | 'address' | 'phone' | 'file';\n\t}[];\n\t/**\n\t * The summary fields array.\n\t */\n\tsummaryFields?: {\n\t\t/**\n\t\t * Field id.\n\t\t */\n\t\tid: number;\n\t\t/**\n\t\t * Field label.\n\t\t */\n\t\tlabel: string;\n\t\t/**\n\t\t * Field type.\n\t\t */\n\t\ttype: 'text' | 'text-multiple-choice' | 'text-multi-line' | 'rich-text' | 'numeric' | 'currency' | 'rating' | 'percent' | 'multitext' | 'email' | 'url' | 'duration' | 'date' | 'datetime' | 'timestamp' | 'timeofday' | 'checkbox' | 'user' | 'multiuser' | 'address' | 'phone' | 'file';\n\t}[];\n};\n\nexport type QuickBaseResponseDeleteRelationship = {\n\t/**\n\t * The relationship id.\n\t */\n\trelationshipId: number;\n};\n\nexport type QuickBaseResponseGetTableReports = {\n\t/**\n\t * The identifier of the report, unique to the table.\n\t */\n\tid: string;\n\t/**\n\t * The configured name of the report.\n\t */\n\tname: string;\n\t/**\n\t * The type of report in Quickbase (e.g., chart).\n\t */\n\ttype: 'map' | 'gedit' | 'chart' | 'summary' | 'table' | 'timeline' | 'calendar';\n\t/**\n\t * The configured description of a report.\n\t */\n\tdescription: string;\n\t/**\n\t * Optional, showed only for personal reports. The user ID of report owner.\n\t */\n\townerId: number;\n\t/**\n\t * The query definition as configured in Quickbase that gets executed when the report is run.\n\t */\n\tquery: {\n\t\t/**\n\t\t * The table identifier for the report.\n\t\t */\n\t\ttableId: string;\n\t\t/**\n\t\t * Filter used to query for data.\n\t\t */\n\t\tfilter: string;\n\t\t/**\n\t\t * Calculated formula fields.\n\t\t */\n\t\tformulaFields: {\n\t\t\t/**\n\t\t\t * Formula field identifier.\n\t\t\t */\n\t\t\tid: number;\n\t\t\t/**\n\t\t\t * Formula field label.\n\t\t\t */\n\t\t\tlabel: string;\n\t\t\t/**\n\t\t\t * Resulting formula value type.\n\t\t\t */\n\t\t\tfieldType: 'rich-text' | 'text' | 'numeric' | 'currency' | 'percent' | 'rating' | 'date' | 'timestamp' | 'timeofday' | 'duration' | 'checkbox' | 'phone' | 'email' | 'user' | 'multiuser' | 'url';\n\t\t\t/**\n\t\t\t * Formula text.\n\t\t\t */\n\t\t\tformula: string;\n\t\t\t/**\n\t\t\t * For numeric formula the number precision.\n\t\t\t */\n\t\t\tdecimalPrecision: number;\n\t\t}[];\n\t};\n\t/**\n\t * A list of properties specific to the report type. To see a detailed description of the properties for each report type, See [Report Types.](../reportTypes)\n\t */\n\tproperties: any;\n\t/**\n\t * The instant at which a report was last used.\n\t */\n\tusedLast: string;\n\t/**\n\t * The number of times a report has been used.\n\t */\n\tusedCount: number;\n}[];\n\nexport type QuickBaseResponseGetReport = {\n\t/**\n\t * The identifier of the report, unique to the table.\n\t */\n\tid: string;\n\t/**\n\t * The configured name of the report.\n\t */\n\tname: string;\n\t/**\n\t * The type of report in Quickbase (e.g., chart).\n\t */\n\ttype: 'map' | 'gedit' | 'chart' | 'summary' | 'table' | 'timeline' | 'calendar';\n\t/**\n\t * The configured description of a report.\n\t */\n\tdescription: string;\n\t/**\n\t * Optional, showed only for personal reports. The user ID of report owner.\n\t */\n\townerId: number;\n\t/**\n\t * The query definition as configured in Quickbase that gets executed when the report is run.\n\t */\n\tquery: {\n\t\t/**\n\t\t * The table identifier for the report.\n\t\t */\n\t\ttableId: string;\n\t\t/**\n\t\t * Filter used to query for data.\n\t\t */\n\t\tfilter: string;\n\t\t/**\n\t\t * Calculated formula fields.\n\t\t */\n\t\tformulaFields: {\n\t\t\t/**\n\t\t\t * Formula field identifier.\n\t\t\t */\n\t\t\tid: number;\n\t\t\t/**\n\t\t\t * Formula field label.\n\t\t\t */\n\t\t\tlabel: string;\n\t\t\t/**\n\t\t\t * Resulting formula value type.\n\t\t\t */\n\t\t\tfieldType: 'rich-text' | 'text' | 'numeric' | 'currency' | 'percent' | 'rating' | 'date' | 'timestamp' | 'timeofday' | 'duration' | 'checkbox' | 'phone' | 'email' | 'user' | 'multiuser' | 'url';\n\t\t\t/**\n\t\t\t * Formula text.\n\t\t\t */\n\t\t\tformula: string;\n\t\t\t/**\n\t\t\t * For numeric formula the number precision.\n\t\t\t */\n\t\t\tdecimalPrecision: number;\n\t\t}[];\n\t\t/**\n\t\t * An array of field ids used in the report\n\t\t */\n\t\tfields: number[];\n\t\t/**\n\t\t * An array of fields used in sorting the report\n\t\t */\n\t\tsortBy: {\n\t\t\t/**\n\t\t\t * Field ID to sort by\n\t\t\t */\n\t\t\tfieldId: number;\n\t\t\t/**\n\t\t\t * Order to sort the field by\n\t\t\t */\n\t\t\torder: 'ASC' | 'DESC';\n\t\t}[];\n\t\t/**\n\t\t * An array of fields used in grouping the report\n\t\t */\n\t\tgroupBy: {\n\t\t\t/**\n\t\t\t * Field ID to group by\n\t\t\t */\n\t\t\tfieldId: number;\n\t\t\t/**\n\t\t\t * Function to group the field by\n\t\t\t */\n\t\t\tgrouping: 'first-word' | 'first-letter' | 'equal-values' | '1000000' | '100000' | '10000' | '1000' | '100' | '10' | '1' | '.1' | '.01' | '.001';\n\t\t}[];\n\t};\n\t/**\n\t * A list of properties specific to the report type. To see a detailed description of the properties for each report type, See [Report Types.](../reportTypes)\n\t */\n\tproperties: any;\n\t/**\n\t * The instant at which a report was last used.\n\t */\n\tusedLast: string;\n\t/**\n\t * The number of times a report has been used.\n\t */\n\tusedCount: number;\n};\n\nexport type QuickBaseResponseRunReport = {\n\t/**\n\t * An array of objects that contains limited meta-data of each field displayed in the report. This assists in building logic that depends on field types and IDs.\n\t */\n\tfields: {\n\t\t/**\n\t\t * Field id.\n\t\t */\n\t\tid: number;\n\t\t/**\n\t\t * Field label.\n\t\t */\n\t\tlabel: string;\n\t\t/**\n\t\t * Field type.\n\t\t */\n\t\ttype: 'text' | 'text-multiple-choice' | 'text-multi-line' | 'rich-text' | 'numeric' | 'currency' | 'rating' | 'percent' | 'multitext' | 'email' | 'url' | 'duration' | 'date' | 'datetime' | 'timestamp' | 'timeofday' | 'checkbox' | 'user' | 'multiuser' | 'address' | 'phone' | 'file';\n\t\t/**\n\t\t * Column heading label override for field in report.\n\t\t */\n\t\tlabelOverride: string;\n\t}[];\n\t/**\n\t * An array of objects that either represents the record data or summarized values, depending on the report type.\n\t */\n\tdata: Record<string, { value: any }>[];\n\t/**\n\t * Additional information about the results that may be helpful. Pagination may be needed if either you specify a smaller number of results to skip than is available, or if the API automatically returns fewer results. numRecords can be compared to totalRecords to determine if further pagination is needed.\n\t */\n\tmetadata: {\n\t\t/**\n\t\t * The number of records to skip\n\t\t */\n\t\tskip?: number;\n\t\t/**\n\t\t * The number of fields in each record in the current response object\n\t\t */\n\t\tnumFields: number;\n\t\t/**\n\t\t * If present, the maximum number of records requested by the caller\n\t\t */\n\t\ttop?: number;\n\t\t/**\n\t\t * The total number of records in the result set\n\t\t */\n\t\ttotalRecords: number;\n\t\t/**\n\t\t * The number of records in the current response object\n\t\t */\n\t\tnumRecords: number;\n\t};\n};\n\nexport type QuickBaseResponseGetFields = {\n\t/**\n\t * The id of the field, unique to this table.\n\t */\n\tid: number;\n\t/**\n\t * The type of field, as described [here](https://help.quickbase.com/user-assistance/field_types.html).\n\t */\n\tfieldType?: string;\n\t/**\n\t * For derived fields, this will be 'lookup', 'summary', or 'formula', to indicate the type of derived field.  For non-derived fields, this will be blank.\n\t */\n\tmode?: string;\n\t/**\n\t * The label (name) of the field.\n\t */\n\tlabel?: string;\n\t/**\n\t * Indicates if the field is configured to not wrap when displayed in the product.\n\t */\n\tnoWrap?: boolean;\n\t/**\n\t * Indicates if the field is configured to display in bold in the product.\n\t */\n\tbold?: boolean;\n\t/**\n\t * Indicates if the field is marked required.\n\t */\n\trequired?: boolean;\n\t/**\n\t * Indicates if the field is marked as a default in reports.\n\t */\n\tappearsByDefault?: boolean;\n\t/**\n\t * Indicates if the field is marked as searchable.\n\t */\n\tfindEnabled?: boolean;\n\t/**\n\t * Indicates if the field is marked unique.\n\t */\n\tunique?: boolean;\n\t/**\n\t * Indicates if the field data will copy when a user copies the record.\n\t */\n\tdoesDataCopy?: boolean;\n\t/**\n\t * The configured help text shown to users within the product.\n\t */\n\tfieldHelp?: string;\n\t/**\n\t * Indicates if the field is being tracked as part of Quickbase Audit Logs.\n\t */\n\taudited?: boolean;\n\t/**\n\t * Additional properties for the field. Please see [Field type details](../fieldInfo) page for more details on the properties for each field type.\n\t */\n\tproperties?: {\n\t\t/**\n\t\t * The comments entered on the field properties by an administrator.\n\t\t */\n\t\tcomments: string;\n\t\t/**\n\t\t * Whether this field totals in reports within the product.\n\t\t */\n\t\tdoesTotal: boolean;\n\t\t/**\n\t\t * Whether the link field will auto save.\n\t\t */\n\t\tautoSave: boolean;\n\t\t/**\n\t\t * Default user id value.\n\t\t */\n\t\tdefaultValueLuid: number;\n\t\t/**\n\t\t * Whether phone numbers should be in E.164 standard international format.\n\t\t */\n\t\tuseI18NFormat: boolean;\n\t\t/**\n\t\t * The maximum number of versions configured for a file attachment.\n\t\t */\n\t\tmaxVersions: number;\n\t\t/**\n\t\t * Whether the field should carry its multiple choice fields when copied.\n\t\t */\n\t\tcarryChoices: boolean;\n\t\t/**\n\t\t * The format to display time.\n\t\t */\n\t\tformat: number;\n\t\t/**\n\t\t * The maximum number of characters allowed for entry in Quickbase for this field.\n\t\t */\n\t\tmaxLength: number;\n\t\t/**\n\t\t * The configured text value that replaces the URL that users see within the product.\n\t\t */\n\t\tlinkText: string;\n\t\t/**\n\t\t * The id of the parent composite field, when applicable.\n\t\t */\n\t\tparentFieldId: number;\n\t\t/**\n\t\t * Indicates whether to display the timezone within the product.\n\t\t */\n\t\tdisplayTimezone: boolean;\n\t\t/**\n\t\t * The id of the field that is used to aggregate values from the child, when applicable. This displays 0 if the summary function doesn\u2019t require a field selection (like count).\n\t\t */\n\t\tsummaryTargetFieldId: number;\n\t\t/**\n\t\t * Indicates if users can add new choices to a selection list.\n\t\t */\n\t\tallowNewChoices: boolean;\n\t\t/**\n\t\t * The id of the field that is the reference in the relationship.\n\t\t */\n\t\tmasterChoiceFieldId: number;\n\t\t/**\n\t\t * Indicates if the field value is defaulted today for new records.\n\t\t */\n\t\tdefaultToday: boolean;\n\t\t/**\n\t\t * The units label.\n\t\t */\n\t\tunits: string;\n\t\t/**\n\t\t * The id of the field that is the target on the master table for this lookup.\n\t\t */\n\t\tlookupTargetFieldId: number;\n\t\t/**\n\t\t * The summary accumulation function type.\n\t\t */\n\t\tsummaryFunction: 'AVG' | 'SUM' | 'MAX' | 'MIN' | 'STD-DEV' | 'COUNT' | 'COMBINED-TEXT' | 'DISTINCT-COUNT';\n\t\t/**\n\t\t * The id of the source field.\n\t\t */\n\t\tsourceFieldId: number;\n\t\t/**\n\t\t * The table alias for the master table in the relationship this field is part of.\n\t\t */\n\t\tmasterTableTag: string;\n\t\t/**\n\t\t * Whether this field averages in reports within the product.\n\t\t */\n\t\tdoesAverage: boolean;\n\t\t/**\n\t\t * The formula of the field as configured in Quickbase.\n\t\t */\n\t\tformula: string;\n\t\t/**\n\t\t * The number of decimal places displayed in the product for this field.\n\t\t */\n\t\tdecimalPlaces: number;\n\t\t/**\n\t\t * Controls the default country shown on international phone widgets on forms. Country code should be entered in the ISO 3166-1 alpha-2 format.\n\t\t */\n\t\tdefaultCountryCode: string;\n\t\t/**\n\t\t * Indicates if the user can see other versions, aside from the most recent, of a file attachment within the product.\n\t\t */\n\t\tseeVersions: boolean;\n\t\t/**\n\t\t * How to display months.\n\t\t */\n\t\tdisplayMonth: string;\n\t\t/**\n\t\t * The number of lines shown in Quickbase for this text field.\n\t\t */\n\t\tnumLines: number;\n\t\t/**\n\t\t * How the email is displayed.\n\t\t */\n\t\tdisplayEmail: string;\n\t\t/**\n\t\t * The user default type.\n\t\t */\n\t\tdefaultKind: string;\n\t\t/**\n\t\t * An alternate user friendly text that can be used to display a link in the browser.\n\t\t */\n\t\tcoverText: string;\n\t\t/**\n\t\t * The current symbol used when displaying field values within the product.\n\t\t */\n\t\tcurrencySymbol: string;\n\t\t/**\n\t\t * The id of the table that is the master in this relationship.\n\t\t */\n\t\tmasterChoiceTableId: string;\n\t\t/**\n\t\t * The id of the target field.\n\t\t */\n\t\ttargetFieldId: number;\n\t\t/**\n\t\t * The configured option for how users display within the product.\n\t\t */\n\t\tdisplayUser: string;\n\t\t/**\n\t\t * Whether a blank value is treated the same as 0 in calculations within the product.\n\t\t */\n\t\tblankIsZero: boolean;\n\t\t/**\n\t\t * Whether an exact match is required for a report link.\n\t\t */\n\t\texact: boolean;\n\t\t/**\n\t\t * The start field id.\n\t\t */\n\t\tstartField: number;\n\t\t/**\n\t\t * Default email domain.\n\t\t */\n\t\tdefaultDomain: string;\n\t\t/**\n\t\t * The default value configured for a field when a new record is added.\n\t\t */\n\t\tdefaultValue: string;\n\t\t/**\n\t\t * List of user choices.\n\t\t */\n\t\tchoicesLuid: string[];\n\t\t/**\n\t\t * Don't show the URL protocol when showing the URL.\n\t\t */\n\t\tabbreviate: boolean;\n\t\t/**\n\t\t * The field's xml tag.\n\t\t */\n\t\txmlTag: string;\n\t\t/**\n\t\t * The field's target table name.\n\t\t */\n\t\ttargetTableName: string;\n\t\t/**\n\t\t * The format used for displaying numeric values in the product (decimal, separators, digit group).\n\t\t */\n\t\tnumberFormat: number;\n\t\t/**\n\t\t * The link text, if empty, the url will be used as link text.\n\t\t */\n\t\tappearsAs: string;\n\t\t/**\n\t\t * The field's html input width in the product.\n\t\t */\n\t\twidth: number;\n\t\t/**\n\t\t * The currency format used when displaying field values within the product.\n\t\t */\n\t\tcurrencyFormat: 'left' | 'right' | 'middle';\n\t\t/**\n\t\t * Indicates if the field is a foreign key (or reference field) in a relationship.\n\t\t */\n\t\tforeignKey: boolean;\n\t\t/**\n\t\t * Indicates whether to display the day of the week within the product.\n\t\t */\n\t\tdisplayDayOfWeek: boolean;\n\t\t/**\n\t\t * The id of the field that is the reference in the relationship for this summary.\n\t\t */\n\t\tsummaryReferenceFieldId: number;\n\t\t/**\n\t\t * The number of digits before commas display in the product, when applicable.\n\t\t */\n\t\tcommaStart: number;\n\t\t/**\n\t\t * An array of entries that exist for a field that offers choices to the user.\n\t\t */\n\t\tchoices: string[];\n\t\t/**\n\t\t * The id of the target table.\n\t\t */\n\t\ttargetTableId: string;\n\t\t/**\n\t\t * Whether to display time as relative.\n\t\t */\n\t\tdisplayRelative: boolean;\n\t\t/**\n\t\t * An array of the fields that make up a composite field (e.g., address).\n\t\t */\n\t\tcompositeFields: number[];\n\t\t/**\n\t\t * Indicates whether the checkbox values will be shown as text in reports.\n\t\t */\n\t\tdisplayCheckboxAsText: boolean;\n\t\t/**\n\t\t * Version modes for files. Keep all versions vs keep last version.\n\t\t */\n\t\tversionMode: 'keepallversions' | 'keeplastversions';\n\t\t/**\n\t\t * Indicates whether to display the time, in addition to the date.\n\t\t */\n\t\tdisplayTime: boolean;\n\t\t/**\n\t\t * The duration field id.\n\t\t */\n\t\tdurationField: number;\n\t\t/**\n\t\t * The id of the field that is used to snapshot values from, when applicable.\n\t\t */\n\t\tsnapFieldId: number;\n\t\t/**\n\t\t * Indicates whether or not to display time in the 24-hour format within the product.\n\t\t */\n\t\thours24: boolean;\n\t\t/**\n\t\t * Whether to sort alphabetically, default sort is by record ID.\n\t\t */\n\t\tsortAlpha: boolean;\n\t\t/**\n\t\t * Indicates if the listed entries sort as entered vs alphabetically.\n\t\t */\n\t\tsortAsGiven: boolean;\n\t\t/**\n\t\t * Whether this field has a phone extension.\n\t\t */\n\t\thasExtension: boolean;\n\t\t/**\n\t\t * The work week type.\n\t\t */\n\t\tworkWeek: number;\n\t\t/**\n\t\t * Indicates if the URL should open a new window when a user clicks it within the product.\n\t\t */\n\t\tuseNewWindow: boolean;\n\t\t/**\n\t\t * Whether this field is append only.\n\t\t */\n\t\tappendOnly: boolean;\n\t\t/**\n\t\t * Indicates if a field that is part of the relationship should be shown as a hyperlink to the parent record within the product.\n\t\t */\n\t\tdisplayAsLink: boolean;\n\t\t/**\n\t\t * Whether this field allows html.\n\t\t */\n\t\tallowHTML: boolean;\n\t\t/**\n\t\t * The id of the field that is the reference in the relationship for this lookup.\n\t\t */\n\t\tlookupReferenceFieldId: number;\n\t};\n\t/**\n\t * Field Permissions for different roles.\n\t */\n\tpermissions?: {\n\t\t/**\n\t\t * The role associated with a given permission for the field\n\t\t */\n\t\trole: string;\n\t\t/**\n\t\t * The permission given to the role for this field\n\t\t */\n\t\tpermissionType: 'None' | 'View' | 'Modify';\n\t\t/**\n\t\t * The Id of the given role\n\t\t */\n\t\troleId: number;\n\t}[];\n}[];\n\nexport type QuickBaseResponseCreateField = {\n\t/**\n\t * The id of the field, unique to this table.\n\t */\n\tid: number;\n\t/**\n\t * The type of field, as described [here](https://help.quickbase.com/user-assistance/field_types.html).\n\t */\n\tfieldType?: string;\n\t/**\n\t * For derived fields, this will be 'lookup', 'summary', or 'formula', to indicate the type of derived field.  For non-derived fields, this will be blank.\n\t */\n\tmode?: string;\n\t/**\n\t * The label (name) of the field.\n\t */\n\tlabel?: string;\n\t/**\n\t * Indicates if the field is configured to not wrap when displayed in the product.\n\t */\n\tnoWrap?: boolean;\n\t/**\n\t * Indicates if the field is configured to display in bold in the product.\n\t */\n\tbold?: boolean;\n\t/**\n\t * Indicates if the field is marked required.\n\t */\n\trequired?: boolean;\n\t/**\n\t * Indicates if the field is marked as a default in reports.\n\t */\n\tappearsByDefault?: boolean;\n\t/**\n\t * Indicates if the field is marked as searchable.\n\t */\n\tfindEnabled?: boolean;\n\t/**\n\t * Indicates if the field is marked unique.\n\t */\n\tunique?: boolean;\n\t/**\n\t * Indicates if the field data will copy when a user copies the record.\n\t */\n\tdoesDataCopy?: boolean;\n\t/**\n\t * The configured help text shown to users within the product.\n\t */\n\tfieldHelp?: string;\n\t/**\n\t * Indicates if the field is being tracked as part of Quickbase Audit Logs.\n\t */\n\taudited?: boolean;\n\t/**\n\t * Additional properties for the field. Please see [Field type details](../fieldInfo) page for more details on the properties for each field type.\n\t */\n\tproperties?: {\n\t\t/**\n\t\t * The comments entered on the field properties by an administrator.\n\t\t */\n\t\tcomments: string;\n\t\t/**\n\t\t * Whether this field totals in reports within the product.\n\t\t */\n\t\tdoesTotal: boolean;\n\t\t/**\n\t\t * Whether the link field will auto save.\n\t\t */\n\t\tautoSave: boolean;\n\t\t/**\n\t\t * Default user id value.\n\t\t */\n\t\tdefaultValueLuid: number;\n\t\t/**\n\t\t * Whether phone numbers should be in E.164 standard international format.\n\t\t */\n\t\tuseI18NFormat: boolean;\n\t\t/**\n\t\t * The maximum number of versions configured for a file attachment.\n\t\t */\n\t\tmaxVersions: number;\n\t\t/**\n\t\t * Whether the field should carry its multiple choice fields when copied.\n\t\t */\n\t\tcarryChoices: boolean;\n\t\t/**\n\t\t * The format to display time.\n\t\t */\n\t\tformat: number;\n\t\t/**\n\t\t * The maximum number of characters allowed for entry in Quickbase for this field.\n\t\t */\n\t\tmaxLength: number;\n\t\t/**\n\t\t * The configured text value that replaces the URL that users see within the product.\n\t\t */\n\t\tlinkText: string;\n\t\t/**\n\t\t * The id of the parent composite field, when applicable.\n\t\t */\n\t\tparentFieldId: number;\n\t\t/**\n\t\t * Indicates whether to display the timezone within the product.\n\t\t */\n\t\tdisplayTimezone: boolean;\n\t\t/**\n\t\t * The id of the field that is used to aggregate values from the child, when applicable. This displays 0 if the summary function doesn\u2019t require a field selection (like count).\n\t\t */\n\t\tsummaryTargetFieldId: number;\n\t\t/**\n\t\t * Indicates if users can add new choices to a selection list.\n\t\t */\n\t\tallowNewChoices: boolean;\n\t\t/**\n\t\t * The id of the field that is the reference in the relationship.\n\t\t */\n\t\tmasterChoiceFieldId: number;\n\t\t/**\n\t\t * Indicates if the field value is defaulted today for new records.\n\t\t */\n\t\tdefaultToday: boolean;\n\t\t/**\n\t\t * The units label.\n\t\t */\n\t\tunits: string;\n\t\t/**\n\t\t * The id of the field that is the target on the master table for this lookup.\n\t\t */\n\t\tlookupTargetFieldId: number;\n\t\t/**\n\t\t * The summary accumulation function type.\n\t\t */\n\t\tsummaryFunction: 'AVG' | 'SUM' | 'MAX' | 'MIN' | 'STD-DEV' | 'COUNT' | 'COMBINED-TEXT' | 'DISTINCT-COUNT';\n\t\t/**\n\t\t * The id of the source field.\n\t\t */\n\t\tsourceFieldId: number;\n\t\t/**\n\t\t * The table alias for the master table in the relationship this field is part of.\n\t\t */\n\t\tmasterTableTag: string;\n\t\t/**\n\t\t * Whether this field averages in reports within the product.\n\t\t */\n\t\tdoesAverage: boolean;\n\t\t/**\n\t\t * The formula of the field as configured in Quickbase.\n\t\t */\n\t\tformula: string;\n\t\t/**\n\t\t * The number of decimal places displayed in the product for this field.\n\t\t */\n\t\tdecimalPlaces: number;\n\t\t/**\n\t\t * Controls the default country shown on international phone widgets on forms. Country code should be entered in the ISO 3166-1 alpha-2 format.\n\t\t */\n\t\tdefaultCountryCode: string;\n\t\t/**\n\t\t * Indicates if the user can see other versions, aside from the most recent, of a file attachment within the product.\n\t\t */\n\t\tseeVersions: boolean;\n\t\t/**\n\t\t * How to display months.\n\t\t */\n\t\tdisplayMonth: string;\n\t\t/**\n\t\t * The number of lines shown in Quickbase for this text field.\n\t\t */\n\t\tnumLines: number;\n\t\t/**\n\t\t * How the email is displayed.\n\t\t */\n\t\tdisplayEmail: string;\n\t\t/**\n\t\t * The user default type.\n\t\t */\n\t\tdefaultKind: string;\n\t\t/**\n\t\t * An alternate user friendly text that can be used to display a link in the browser.\n\t\t */\n\t\tcoverText: string;\n\t\t/**\n\t\t * The current symbol used when displaying field values within the product.\n\t\t */\n\t\tcurrencySymbol: string;\n\t\t/**\n\t\t * The id of the table that is the master in this relationship.\n\t\t */\n\t\tmasterChoiceTableId: string;\n\t\t/**\n\t\t * The id of the target field.\n\t\t */\n\t\ttargetFieldId: number;\n\t\t/**\n\t\t * The configured option for how users display within the product.\n\t\t */\n\t\tdisplayUser: string;\n\t\t/**\n\t\t * Whether a blank value is treated the same as 0 in calculations within the product.\n\t\t */\n\t\tblankIsZero: boolean;\n\t\t/**\n\t\t * Whether an exact match is required for a report link.\n\t\t */\n\t\texact: boolean;\n\t\t/**\n\t\t * The start field id.\n\t\t */\n\t\tstartField: number;\n\t\t/**\n\t\t * Default email domain.\n\t\t */\n\t\tdefaultDomain: string;\n\t\t/**\n\t\t * The default value configured for a field when a new record is added.\n\t\t */\n\t\tdefaultValue: string;\n\t\t/**\n\t\t * List of user choices.\n\t\t */\n\t\tchoicesLuid: string[];\n\t\t/**\n\t\t * Don't show the URL protocol when showing the URL.\n\t\t */\n\t\tabbreviate: boolean;\n\t\t/**\n\t\t * The field's xml tag.\n\t\t */\n\t\txmlTag: string;\n\t\t/**\n\t\t * The field's target table name.\n\t\t */\n\t\ttargetTableName: string;\n\t\t/**\n\t\t * The format used for displaying numeric values in the product (decimal, separators, digit group).\n\t\t */\n\t\tnumberFormat: number;\n\t\t/**\n\t\t * The link text, if empty, the url will be used as link text.\n\t\t */\n\t\tappearsAs: string;\n\t\t/**\n\t\t * The field's html input width in the product.\n\t\t */\n\t\twidth: number;\n\t\t/**\n\t\t * The currency format used when displaying field values within the product.\n\t\t */\n\t\tcurrencyFormat: 'left' | 'right' | 'middle';\n\t\t/**\n\t\t * Indicates if the field is a foreign key (or reference field) in a relationship.\n\t\t */\n\t\tforeignKey: boolean;\n\t\t/**\n\t\t * Indicates whether to display the day of the week within the product.\n\t\t */\n\t\tdisplayDayOfWeek: boolean;\n\t\t/**\n\t\t * The id of the field that is the reference in the relationship for this summary.\n\t\t */\n\t\tsummaryReferenceFieldId: number;\n\t\t/**\n\t\t * The number of digits before commas display in the product, when applicable.\n\t\t */\n\t\tcommaStart: number;\n\t\t/**\n\t\t * An array of entries that exist for a field that offers choices to the user.\n\t\t */\n\t\tchoices: string[];\n\t\t/**\n\t\t * The id of the target table.\n\t\t */\n\t\ttargetTableId: string;\n\t\t/**\n\t\t * Whether to display time as relative.\n\t\t */\n\t\tdisplayRelative: boolean;\n\t\t/**\n\t\t * An array of the fields that make up a composite field (e.g., address).\n\t\t */\n\t\tcompositeFields: number[];\n\t\t/**\n\t\t * Indicates whether the checkbox values will be shown as text in reports.\n\t\t */\n\t\tdisplayCheckboxAsText: boolean;\n\t\t/**\n\t\t * Version modes for files. Keep all versions vs keep last version.\n\t\t */\n\t\tversionMode: 'keepallversions' | 'keeplastversions';\n\t\t/**\n\t\t * Indicates whether to display the time, in addition to the date.\n\t\t */\n\t\tdisplayTime: boolean;\n\t\t/**\n\t\t * The duration field id.\n\t\t */\n\t\tdurationField: number;\n\t\t/**\n\t\t * The id of the field that is used to snapshot values from, when applicable.\n\t\t */\n\t\tsnapFieldId: number;\n\t\t/**\n\t\t * Indicates whether or not to display time in the 24-hour format within the product.\n\t\t */\n\t\thours24: boolean;\n\t\t/**\n\t\t * Whether to sort alphabetically, default sort is by record ID.\n\t\t */\n\t\tsortAlpha: boolean;\n\t\t/**\n\t\t * Indicates if the listed entries sort as entered vs alphabetically.\n\t\t */\n\t\tsortAsGiven: boolean;\n\t\t/**\n\t\t * Whether this field has a phone extension.\n\t\t */\n\t\thasExtension: boolean;\n\t\t/**\n\t\t * The work week type.\n\t\t */\n\t\tworkWeek: number;\n\t\t/**\n\t\t * Indicates if the URL should open a new window when a user clicks it within the product.\n\t\t */\n\t\tuseNewWindow: boolean;\n\t\t/**\n\t\t * Whether this field is append only.\n\t\t */\n\t\tappendOnly: boolean;\n\t\t/**\n\t\t * Indicates if a field that is part of the relationship should be shown as a hyperlink to the parent record within the product.\n\t\t */\n\t\tdisplayAsLink: boolean;\n\t\t/**\n\t\t * Whether this field allows html.\n\t\t */\n\t\tallowHTML: boolean;\n\t\t/**\n\t\t * The id of the field that is the reference in the relationship for this lookup.\n\t\t */\n\t\tlookupReferenceFieldId: number;\n\t};\n\t/**\n\t * Field Permissions for different roles.\n\t */\n\tpermissions?: {\n\t\t/**\n\t\t * The role associated with a given permission for the field\n\t\t */\n\t\trole: string;\n\t\t/**\n\t\t * The permission given to the role for this field\n\t\t */\n\t\tpermissionType: 'None' | 'View' | 'Modify';\n\t\t/**\n\t\t * The Id of the given role\n\t\t */\n\t\troleId: number;\n\t}[];\n};\n\nexport type QuickBaseResponseDeleteFields = {\n\t/**\n\t * List of field ids to were deleted.\n\t */\n\tdeletedFieldIds: number[];\n\t/**\n\t * List of errors found.\n\t */\n\terrors: string[];\n};\n\nexport type QuickBaseResponseGetField = {\n\t/**\n\t * The id of the field, unique to this table.\n\t */\n\tid: number;\n\t/**\n\t * The type of field, as described [here](https://help.quickbase.com/user-assistance/field_types.html).\n\t */\n\tfieldType?: string;\n\t/**\n\t * For derived fields, this will be 'lookup', 'summary', or 'formula', to indicate the type of derived field.  For non-derived fields, this will be blank.\n\t */\n\tmode?: string;\n\t/**\n\t * The label (name) of the field.\n\t */\n\tlabel?: string;\n\t/**\n\t * Indicates if the field is configured to not wrap when displayed in the product.\n\t */\n\tnoWrap?: boolean;\n\t/**\n\t * Indicates if the field is configured to display in bold in the product.\n\t */\n\tbold?: boolean;\n\t/**\n\t * Indicates if the field is marked required.\n\t */\n\trequired?: boolean;\n\t/**\n\t * Indicates if the field is marked as a default in reports.\n\t */\n\tappearsByDefault?: boolean;\n\t/**\n\t * Indicates if the field is marked as searchable.\n\t */\n\tfindEnabled?: boolean;\n\t/**\n\t * Indicates if the field is marked unique.\n\t */\n\tunique?: boolean;\n\t/**\n\t * Indicates if the field data will copy when a user copies the record.\n\t */\n\tdoesDataCopy?: boolean;\n\t/**\n\t * The configured help text shown to users within the product.\n\t */\n\tfieldHelp?: string;\n\t/**\n\t * Indicates if the field is being tracked as part of Quickbase Audit Logs.\n\t */\n\taudited?: boolean;\n\t/**\n\t * Additional properties for the field. Please see [Field type details](../fieldInfo) page for more details on the properties for each field type.\n\t */\n\tproperties?: {\n\t\t/**\n\t\t * The comments entered on the field properties by an administrator.\n\t\t */\n\t\tcomments: string;\n\t\t/**\n\t\t * Whether this field totals in reports within the product.\n\t\t */\n\t\tdoesTotal: boolean;\n\t\t/**\n\t\t * Whether the link field will auto save.\n\t\t */\n\t\tautoSave: boolean;\n\t\t/**\n\t\t * Default user id value.\n\t\t */\n\t\tdefaultValueLuid: number;\n\t\t/**\n\t\t * Whether phone numbers should be in E.164 standard international format.\n\t\t */\n\t\tuseI18NFormat: boolean;\n\t\t/**\n\t\t * The maximum number of versions configured for a file attachment.\n\t\t */\n\t\tmaxVersions: number;\n\t\t/**\n\t\t * Whether the field should carry its multiple choice fields when copied.\n\t\t */\n\t\tcarryChoices: boolean;\n\t\t/**\n\t\t * The format to display time.\n\t\t */\n\t\tformat: number;\n\t\t/**\n\t\t * The maximum number of characters allowed for entry in Quickbase for this field.\n\t\t */\n\t\tmaxLength: number;\n\t\t/**\n\t\t * The configured text value that replaces the URL that users see within the product.\n\t\t */\n\t\tlinkText: string;\n\t\t/**\n\t\t * The id of the parent composite field, when applicable.\n\t\t */\n\t\tparentFieldId: number;\n\t\t/**\n\t\t * Indicates whether to display the timezone within the product.\n\t\t */\n\t\tdisplayTimezone: boolean;\n\t\t/**\n\t\t * The id of the field that is used to aggregate values from the child, when applicable. This displays 0 if the summary function doesn\u2019t require a field selection (like count).\n\t\t */\n\t\tsummaryTargetFieldId: number;\n\t\t/**\n\t\t * Indicates if users can add new choices to a selection list.\n\t\t */\n\t\tallowNewChoices: boolean;\n\t\t/**\n\t\t * The id of the field that is the reference in the relationship.\n\t\t */\n\t\tmasterChoiceFieldId: number;\n\t\t/**\n\t\t * Indicates if the field value is defaulted today for new records.\n\t\t */\n\t\tdefaultToday: boolean;\n\t\t/**\n\t\t * The units label.\n\t\t */\n\t\tunits: string;\n\t\t/**\n\t\t * The id of the field that is the target on the master table for this lookup.\n\t\t */\n\t\tlookupTargetFieldId: number;\n\t\t/**\n\t\t * The summary accumulation function type.\n\t\t */\n\t\tsummaryFunction: 'AVG' | 'SUM' | 'MAX' | 'MIN' | 'STD-DEV' | 'COUNT' | 'COMBINED-TEXT' | 'DISTINCT-COUNT';\n\t\t/**\n\t\t * The id of the source field.\n\t\t */\n\t\tsourceFieldId: number;\n\t\t/**\n\t\t * The table alias for the master table in the relationship this field is part of.\n\t\t */\n\t\tmasterTableTag: string;\n\t\t/**\n\t\t * Whether this field averages in reports within the product.\n\t\t */\n\t\tdoesAverage: boolean;\n\t\t/**\n\t\t * The formula of the field as configured in Quickbase.\n\t\t */\n\t\tformula: string;\n\t\t/**\n\t\t * The number of decimal places displayed in the product for this field.\n\t\t */\n\t\tdecimalPlaces: number;\n\t\t/**\n\t\t * Controls the default country shown on international phone widgets on forms. Country code should be entered in the ISO 3166-1 alpha-2 format.\n\t\t */\n\t\tdefaultCountryCode: string;\n\t\t/**\n\t\t * Indicates if the user can see other versions, aside from the most recent, of a file attachment within the product.\n\t\t */\n\t\tseeVersions: boolean;\n\t\t/**\n\t\t * How to display months.\n\t\t */\n\t\tdisplayMonth: string;\n\t\t/**\n\t\t * The number of lines shown in Quickbase for this text field.\n\t\t */\n\t\tnumLines: number;\n\t\t/**\n\t\t * How the email is displayed.\n\t\t */\n\t\tdisplayEmail: string;\n\t\t/**\n\t\t * The user default type.\n\t\t */\n\t\tdefaultKind: string;\n\t\t/**\n\t\t * An alternate user friendly text that can be used to display a link in the browser.\n\t\t */\n\t\tcoverText: string;\n\t\t/**\n\t\t * The current symbol used when displaying field values within the product.\n\t\t */\n\t\tcurrencySymbol: string;\n\t\t/**\n\t\t * The id of the table that is the master in this relationship.\n\t\t */\n\t\tmasterChoiceTableId: string;\n\t\t/**\n\t\t * The id of the target field.\n\t\t */\n\t\ttargetFieldId: number;\n\t\t/**\n\t\t * The configured option for how users display within the product.\n\t\t */\n\t\tdisplayUser: string;\n\t\t/**\n\t\t * Whether a blank value is treated the same as 0 in calculations within the product.\n\t\t */\n\t\tblankIsZero: boolean;\n\t\t/**\n\t\t * Whether an exact match is required for a report link.\n\t\t */\n\t\texact: boolean;\n\t\t/**\n\t\t * The start field id.\n\t\t */\n\t\tstartField: number;\n\t\t/**\n\t\t * Default email domain.\n\t\t */\n\t\tdefaultDomain: string;\n\t\t/**\n\t\t * The default value configured for a field when a new record is added.\n\t\t */\n\t\tdefaultValue: string;\n\t\t/**\n\t\t * List of user choices.\n\t\t */\n\t\tchoicesLuid: string[];\n\t\t/**\n\t\t * Don't show the URL protocol when showing the URL.\n\t\t */\n\t\tabbreviate: boolean;\n\t\t/**\n\t\t * The field's xml tag.\n\t\t */\n\t\txmlTag: string;\n\t\t/**\n\t\t * The field's target table name.\n\t\t */\n\t\ttargetTableName: string;\n\t\t/**\n\t\t * The format used for displaying numeric values in the product (decimal, separators, digit group).\n\t\t */\n\t\tnumberFormat: number;\n\t\t/**\n\t\t * The link text, if empty, the url will be used as link text.\n\t\t */\n\t\tappearsAs: string;\n\t\t/**\n\t\t * The field's html input width in the product.\n\t\t */\n\t\twidth: number;\n\t\t/**\n\t\t * The currency format used when displaying field values within the product.\n\t\t */\n\t\tcurrencyFormat: 'left' | 'right' | 'middle';\n\t\t/**\n\t\t * Indicates if the field is a foreign key (or reference field) in a relationship.\n\t\t */\n\t\tforeignKey: boolean;\n\t\t/**\n\t\t * Indicates whether to display the day of the week within the product.\n\t\t */\n\t\tdisplayDayOfWeek: boolean;\n\t\t/**\n\t\t * The id of the field that is the reference in the relationship for this summary.\n\t\t */\n\t\tsummaryReferenceFieldId: number;\n\t\t/**\n\t\t * The number of digits before commas display in the product, when applicable.\n\t\t */\n\t\tcommaStart: number;\n\t\t/**\n\t\t * An array of entries that exist for a field that offers choices to the user.\n\t\t */\n\t\tchoices: string[];\n\t\t/**\n\t\t * The id of the target table.\n\t\t */\n\t\ttargetTableId: string;\n\t\t/**\n\t\t * Whether to display time as relative.\n\t\t */\n\t\tdisplayRelative: boolean;\n\t\t/**\n\t\t * An array of the fields that make up a composite field (e.g., address).\n\t\t */\n\t\tcompositeFields: number[];\n\t\t/**\n\t\t * Indicates whether the checkbox values will be shown as text in reports.\n\t\t */\n\t\tdisplayCheckboxAsText: boolean;\n\t\t/**\n\t\t * Version modes for files. Keep all versions vs keep last version.\n\t\t */\n\t\tversionMode: 'keepallversions' | 'keeplastversions';\n\t\t/**\n\t\t * Indicates whether to display the time, in addition to the date.\n\t\t */\n\t\tdisplayTime: boolean;\n\t\t/**\n\t\t * The duration field id.\n\t\t */\n\t\tdurationField: number;\n\t\t/**\n\t\t * The id of the field that is used to snapshot values from, when applicable.\n\t\t */\n\t\tsnapFieldId: number;\n\t\t/**\n\t\t * Indicates whether or not to display time in the 24-hour format within the product.\n\t\t */\n\t\thours24: boolean;\n\t\t/**\n\t\t * Whether to sort alphabetically, default sort is by record ID.\n\t\t */\n\t\tsortAlpha: boolean;\n\t\t/**\n\t\t * Indicates if the listed entries sort as entered vs alphabetically.\n\t\t */\n\t\tsortAsGiven: boolean;\n\t\t/**\n\t\t * Whether this field has a phone extension.\n\t\t */\n\t\thasExtension: boolean;\n\t\t/**\n\t\t * The work week type.\n\t\t */\n\t\tworkWeek: number;\n\t\t/**\n\t\t * Indicates if the URL should open a new window when a user clicks it within the product.\n\t\t */\n\t\tuseNewWindow: boolean;\n\t\t/**\n\t\t * Whether this field is append only.\n\t\t */\n\t\tappendOnly: boolean;\n\t\t/**\n\t\t * Indicates if a field that is part of the relationship should be shown as a hyperlink to the parent record within the product.\n\t\t */\n\t\tdisplayAsLink: boolean;\n\t\t/**\n\t\t * Whether this field allows html.\n\t\t */\n\t\tallowHTML: boolean;\n\t\t/**\n\t\t * The id of the field that is the reference in the relationship for this lookup.\n\t\t */\n\t\tlookupReferenceFieldId: number;\n\t};\n\t/**\n\t * Field Permissions for different roles.\n\t */\n\tpermissions?: {\n\t\t/**\n\t\t * The role associated with a given permission for the field\n\t\t */\n\t\trole: string;\n\t\t/**\n\t\t * The permission given to the role for this field\n\t\t */\n\t\tpermissionType: 'None' | 'View' | 'Modify';\n\t\t/**\n\t\t * The Id of the given role\n\t\t */\n\t\troleId: number;\n\t}[];\n};\n\nexport type QuickBaseResponseUpdateField = {\n\t/**\n\t * The id of the field, unique to this table.\n\t */\n\tid: number;\n\t/**\n\t * The type of field, as described [here](https://help.quickbase.com/user-assistance/field_types.html).\n\t */\n\tfieldType?: string;\n\t/**\n\t * For derived fields, this will be 'lookup', 'summary', or 'formula', to indicate the type of derived field.  For non-derived fields, this will be blank.\n\t */\n\tmode?: string;\n\t/**\n\t * The label (name) of the field.\n\t */\n\tlabel?: string;\n\t/**\n\t * Indicates if the field is configured to not wrap when displayed in the product.\n\t */\n\tnoWrap?: boolean;\n\t/**\n\t * Indicates if the field is configured to display in bold in the product.\n\t */\n\tbold?: boolean;\n\t/**\n\t * Indicates if the field is marked required.\n\t */\n\trequired?: boolean;\n\t/**\n\t * Indicates if the field is marked as a default in reports.\n\t */\n\tappearsByDefault?: boolean;\n\t/**\n\t * Indicates if the field is marked as searchable.\n\t */\n\tfindEnabled?: boolean;\n\t/**\n\t * Indicates if the field is marked unique.\n\t */\n\tunique?: boolean;\n\t/**\n\t * Indicates if the field data will copy when a user copies the record.\n\t */\n\tdoesDataCopy?: boolean;\n\t/**\n\t * The configured help text shown to users within the product.\n\t */\n\tfieldHelp?: string;\n\t/**\n\t * Indicates if the field is being tracked as part of Quickbase Audit Logs.\n\t */\n\taudited?: boolean;\n\t/**\n\t * Additional properties for the field. Please see [Field type details](../fieldInfo) page for more details on the properties for each field type.\n\t */\n\tproperties?: {\n\t\t/**\n\t\t * The comments entered on the field properties by an administrator.\n\t\t */\n\t\tcomments: string;\n\t\t/**\n\t\t * Whether this field totals in reports within the product.\n\t\t */\n\t\tdoesTotal: boolean;\n\t\t/**\n\t\t * Whether the link field will auto save.\n\t\t */\n\t\tautoSave: boolean;\n\t\t/**\n\t\t * Default user id value.\n\t\t */\n\t\tdefaultValueLuid: number;\n\t\t/**\n\t\t * Whether phone numbers should be in E.164 standard international format.\n\t\t */\n\t\tuseI18NFormat: boolean;\n\t\t/**\n\t\t * The maximum number of versions configured for a file attachment.\n\t\t */\n\t\tmaxVersions: number;\n\t\t/**\n\t\t * Whether the field should carry its multiple choice fields when copied.\n\t\t */\n\t\tcarryChoices: boolean;\n\t\t/**\n\t\t * The format to display time.\n\t\t */\n\t\tformat: number;\n\t\t/**\n\t\t * The maximum number of characters allowed for entry in Quickbase for this field.\n\t\t */\n\t\tmaxLength: number;\n\t\t/**\n\t\t * The configured text value that replaces the URL that users see within the product.\n\t\t */\n\t\tlinkText: string;\n\t\t/**\n\t\t * The id of the parent composite field, when applicable.\n\t\t */\n\t\tparentFieldId: number;\n\t\t/**\n\t\t * Indicates whether to display the timezone within the product.\n\t\t */\n\t\tdisplayTimezone: boolean;\n\t\t/**\n\t\t * The id of the field that is used to aggregate values from the child, when applicable. This displays 0 if the summary function doesn\u2019t require a field selection (like count).\n\t\t */\n\t\tsummaryTargetFieldId: number;\n\t\t/**\n\t\t * Indicates if users can add new choices to a selection list.\n\t\t */\n\t\tallowNewChoices: boolean;\n\t\t/**\n\t\t * The id of the field that is the reference in the relationship.\n\t\t */\n\t\tmasterChoiceFieldId: number;\n\t\t/**\n\t\t * Indicates if the field value is defaulted today for new records.\n\t\t */\n\t\tdefaultToday: boolean;\n\t\t/**\n\t\t * The units label.\n\t\t */\n\t\tunits: string;\n\t\t/**\n\t\t * The id of the field that is the target on the master table for this lookup.\n\t\t */\n\t\tlookupTargetFieldId: number;\n\t\t/**\n\t\t * The summary accumulation function type.\n\t\t */\n\t\tsummaryFunction: 'AVG' | 'SUM' | 'MAX' | 'MIN' | 'STD-DEV' | 'COUNT' | 'COMBINED-TEXT' | 'DISTINCT-COUNT';\n\t\t/**\n\t\t * The id of the source field.\n\t\t */\n\t\tsourceFieldId: number;\n\t\t/**\n\t\t * The table alias for the master table in the relationship this field is part of.\n\t\t */\n\t\tmasterTableTag: string;\n\t\t/**\n\t\t * Whether this field averages in reports within the product.\n\t\t */\n\t\tdoesAverage: boolean;\n\t\t/**\n\t\t * The formula of the field as configured in Quickbase.\n\t\t */\n\t\tformula: string;\n\t\t/**\n\t\t * The number of decimal places displayed in the product for this field.\n\t\t */\n\t\tdecimalPlaces: number;\n\t\t/**\n\t\t * Controls the default country shown on international phone widgets on forms. Country code should be entered in the ISO 3166-1 alpha-2 format.\n\t\t */\n\t\tdefaultCountryCode: string;\n\t\t/**\n\t\t * Indicates if the user can see other versions, aside from the most recent, of a file attachment within the product.\n\t\t */\n\t\tseeVersions: boolean;\n\t\t/**\n\t\t * How to display months.\n\t\t */\n\t\tdisplayMonth: string;\n\t\t/**\n\t\t * The number of lines shown in Quickbase for this text field.\n\t\t */\n\t\tnumLines: number;\n\t\t/**\n\t\t * How the email is displayed.\n\t\t */\n\t\tdisplayEmail: string;\n\t\t/**\n\t\t * The user default type.\n\t\t */\n\t\tdefaultKind: string;\n\t\t/**\n\t\t * An alternate user friendly text that can be used to display a link in the browser.\n\t\t */\n\t\tcoverText: string;\n\t\t/**\n\t\t * The current symbol used when displaying field values within the product.\n\t\t */\n\t\tcurrencySymbol: string;\n\t\t/**\n\t\t * The id of the table that is the master in this relationship.\n\t\t */\n\t\tmasterChoiceTableId: string;\n\t\t/**\n\t\t * The id of the target field.\n\t\t */\n\t\ttargetFieldId: number;\n\t\t/**\n\t\t * The configured option for how users display within the product.\n\t\t */\n\t\tdisplayUser: string;\n\t\t/**\n\t\t * Whether a blank value is treated the same as 0 in calculations within the product.\n\t\t */\n\t\tblankIsZero: boolean;\n\t\t/**\n\t\t * Whether an exact match is required for a report link.\n\t\t */\n\t\texact: boolean;\n\t\t/**\n\t\t * The start field id.\n\t\t */\n\t\tstartField: number;\n\t\t/**\n\t\t * Default email domain.\n\t\t */\n\t\tdefaultDomain: string;\n\t\t/**\n\t\t * The default value configured for a field when a new record is added.\n\t\t */\n\t\tdefaultValue: string;\n\t\t/**\n\t\t * List of user choices.\n\t\t */\n\t\tchoicesLuid: string[];\n\t\t/**\n\t\t * Don't show the URL protocol when showing the URL.\n\t\t */\n\t\tabbreviate: boolean;\n\t\t/**\n\t\t * The field's xml tag.\n\t\t */\n\t\txmlTag: string;\n\t\t/**\n\t\t * The field's target table name.\n\t\t */\n\t\ttargetTableName: string;\n\t\t/**\n\t\t * The format used for displaying numeric values in the product (decimal, separators, digit group).\n\t\t */\n\t\tnumberFormat: number;\n\t\t/**\n\t\t * The link text, if empty, the url will be used as link text.\n\t\t */\n\t\tappearsAs: string;\n\t\t/**\n\t\t * The field's html input width in the product.\n\t\t */\n\t\twidth: number;\n\t\t/**\n\t\t * The currency format used when displaying field values within the product.\n\t\t */\n\t\tcurrencyFormat: 'left' | 'right' | 'middle';\n\t\t/**\n\t\t * Indicates if the field is a foreign key (or reference field) in a relationship.\n\t\t */\n\t\tforeignKey: boolean;\n\t\t/**\n\t\t * Indicates whether to display the day of the week within the product.\n\t\t */\n\t\tdisplayDayOfWeek: boolean;\n\t\t/**\n\t\t * The id of the field that is the reference in the relationship for this summary.\n\t\t */\n\t\tsummaryReferenceFieldId: number;\n\t\t/**\n\t\t * The number of digits before commas display in the product, when applicable.\n\t\t */\n\t\tcommaStart: number;\n\t\t/**\n\t\t * An array of entries that exist for a field that offers choices to the user.\n\t\t */\n\t\tchoices: string[];\n\t\t/**\n\t\t * The id of the target table.\n\t\t */\n\t\ttargetTableId: string;\n\t\t/**\n\t\t * Whether to display time as relative.\n\t\t */\n\t\tdisplayRelative: boolean;\n\t\t/**\n\t\t * An array of the fields that make up a composite field (e.g., address).\n\t\t */\n\t\tcompositeFields: number[];\n\t\t/**\n\t\t * Indicates whether the checkbox values will be shown as text in reports.\n\t\t */\n\t\tdisplayCheckboxAsText: boolean;\n\t\t/**\n\t\t * Version modes for files. Keep all versions vs keep last version.\n\t\t */\n\t\tversionMode: 'keepallversions' | 'keeplastversions';\n\t\t/**\n\t\t * Indicates whether to display the time, in addition to the date.\n\t\t */\n\t\tdisplayTime: boolean;\n\t\t/**\n\t\t * The duration field id.\n\t\t */\n\t\tdurationField: number;\n\t\t/**\n\t\t * The id of the field that is used to snapshot values from, when applicable.\n\t\t */\n\t\tsnapFieldId: number;\n\t\t/**\n\t\t * Indicates whether or not to display time in the 24-hour format within the product.\n\t\t */\n\t\thours24: boolean;\n\t\t/**\n\t\t * Whether to sort alphabetically, default sort is by record ID.\n\t\t */\n\t\tsortAlpha: boolean;\n\t\t/**\n\t\t * Indicates if the listed entries sort as entered vs alphabetically.\n\t\t */\n\t\tsortAsGiven: boolean;\n\t\t/**\n\t\t * Whether this field has a phone extension.\n\t\t */\n\t\thasExtension: boolean;\n\t\t/**\n\t\t * The work week type.\n\t\t */\n\t\tworkWeek: number;\n\t\t/**\n\t\t * Indicates if the URL should open a new window when a user clicks it within the product.\n\t\t */\n\t\tuseNewWindow: boolean;\n\t\t/**\n\t\t * Whether this field is append only.\n\t\t */\n\t\tappendOnly: boolean;\n\t\t/**\n\t\t * Indicates if a field that is part of the relationship should be shown as a hyperlink to the parent record within the product.\n\t\t */\n\t\tdisplayAsLink: boolean;\n\t\t/**\n\t\t * Whether this field allows html.\n\t\t */\n\t\tallowHTML: boolean;\n\t\t/**\n\t\t * The id of the field that is the reference in the relationship for this lookup.\n\t\t */\n\t\tlookupReferenceFieldId: number;\n\t};\n\t/**\n\t * Field Permissions for different roles.\n\t */\n\tpermissions?: {\n\t\t/**\n\t\t * The role associated with a given permission for the field\n\t\t */\n\t\trole: string;\n\t\t/**\n\t\t * The permission given to the role for this field\n\t\t */\n\t\tpermissionType: 'None' | 'View' | 'Modify';\n\t\t/**\n\t\t * The Id of the given role\n\t\t */\n\t\troleId: number;\n\t}[];\n};\n\nexport type QuickBaseResponseGetFieldsUsage = {\n\t/**\n\t * Basic information about the field.\n\t */\n\tfield: {\n\t\t/**\n\t\t * Field name.\n\t\t */\n\t\tname: string;\n\t\t/**\n\t\t * Field id.\n\t\t */\n\t\tid: number;\n\t\t/**\n\t\t * Field type.\n\t\t */\n\t\ttype: 'text' | 'text-multiple-choice' | 'text-multi-line' | 'rich-text' | 'numeric' | 'currency' | 'rating' | 'percent' | 'multitext' | 'email' | 'url' | 'duration' | 'date' | 'datetime' | 'timestamp' | 'timeofday' | 'checkbox' | 'user' | 'multiuser' | 'address' | 'phone' | 'file';\n\t};\n\t/**\n\t * Usage Information about the field.\n\t */\n\tusage: {\n\t\t/**\n\t\t * The number of quickbase actions where the given field is referenced.\n\t\t */\n\t\tactions: {\n\t\t\t/**\n\t\t\t * the number of times a field has been used for the given item.\n\t\t\t */\n\t\t\tcount: number;\n\t\t};\n\t\t/**\n\t\t * The number of app home pages where the given field is referenced.\n\t\t */\n\t\tappHomePages: {\n\t\t\t/**\n\t\t\t * the number of times a field has been used for the given item.\n\t\t\t */\n\t\t\tcount: number;\n\t\t};\n\t\t/**\n\t\t * The number of dashboards where the given field is referenced.\n\t\t */\n\t\tdashboards: {\n\t\t\t/**\n\t\t\t * the number of times a field has been used for the given item.\n\t\t\t */\n\t\t\tcount: number;\n\t\t};\n\t\t/**\n\t\t * The number of default reports where the given field is referenced.\n\t\t */\n\t\tdefaultReports: {\n\t\t\t/**\n\t\t\t * the number of times a field has been used for the given item.\n\t\t\t */\n\t\t\tcount: number;\n\t\t};\n\t\t/**\n\t\t * The number of exact forms where the given field is referenced.\n\t\t */\n\t\texactForms: {\n\t\t\t/**\n\t\t\t * the number of times a field has been used for the given item.\n\t\t\t */\n\t\t\tcount: number;\n\t\t};\n\t\t/**\n\t\t * The number of fields where the given field is referenced.\n\t\t */\n\t\tfields: {\n\t\t\t/**\n\t\t\t * the number of times a field has been used for the given item.\n\t\t\t */\n\t\t\tcount: number;\n\t\t};\n\t\t/**\n\t\t * The number of forms where the given field is referenced.\n\t\t */\n\t\tforms: {\n\t\t\t/**\n\t\t\t * the number of times a field has been used for the given item.\n\t\t\t */\n\t\t\tcount: number;\n\t\t};\n\t\t/**\n\t\t * The number of notifications where the given field is referenced.\n\t\t */\n\t\tnotifications: {\n\t\t\t/**\n\t\t\t * the number of times a field has been used for the given item.\n\t\t\t */\n\t\t\tcount: number;\n\t\t};\n\t\t/**\n\t\t * The number of personal reports where the given field is referenced.\n\t\t */\n\t\tpersonalReports: {\n\t\t\t/**\n\t\t\t * the number of times a field has been used for the given item.\n\t\t\t */\n\t\t\tcount: number;\n\t\t};\n\t\t/**\n\t\t * The number of pipelines where the given field is referenced.\n\t\t */\n\t\tpipelines: {\n\t\t\t/**\n\t\t\t * the number of times a field has been used for the given item.\n\t\t\t */\n\t\t\tcount: number;\n\t\t};\n\t\t/**\n\t\t * The number of relationships where the given field is referenced.\n\t\t */\n\t\trelationships: {\n\t\t\t/**\n\t\t\t * the number of times a field has been used for the given item.\n\t\t\t */\n\t\t\tcount: number;\n\t\t};\n\t\t/**\n\t\t * The number of reminders where the given field is referenced.\n\t\t */\n\t\treminders: {\n\t\t\t/**\n\t\t\t * the number of times a field has been used for the given item.\n\t\t\t */\n\t\t\tcount: number;\n\t\t};\n\t\t/**\n\t\t * The number of reports where the given field is referenced.\n\t\t */\n\t\treports: {\n\t\t\t/**\n\t\t\t * the number of times a field has been used for the given item.\n\t\t\t */\n\t\t\tcount: number;\n\t\t};\n\t\t/**\n\t\t * The number of roles where the given field is referenced.\n\t\t */\n\t\troles: {\n\t\t\t/**\n\t\t\t * the number of times a field has been used for the given item.\n\t\t\t */\n\t\t\tcount: number;\n\t\t};\n\t\t/**\n\t\t * The number of table imports where the given field is referenced.\n\t\t */\n\t\ttableImports: {\n\t\t\t/**\n\t\t\t * the number of times a field has been used for the given item.\n\t\t\t */\n\t\t\tcount: number;\n\t\t};\n\t\t/**\n\t\t * The number of table rules where the given field is referenced.\n\t\t */\n\t\ttableRules: {\n\t\t\t/**\n\t\t\t * the number of times a field has been used for the given item.\n\t\t\t */\n\t\t\tcount: number;\n\t\t};\n\t\t/**\n\t\t * The number of webhooks where the given field is referenced.\n\t\t */\n\t\twebhooks: {\n\t\t\t/**\n\t\t\t * the number of times a field has been used for the given item.\n\t\t\t */\n\t\t\tcount: number;\n\t\t};\n\t};\n}[];\n\nexport type QuickBaseResponseGetFieldUsage = {\n\t/**\n\t * Basic information about the field.\n\t */\n\tfield: {\n\t\t/**\n\t\t * Field name.\n\t\t */\n\t\tname: string;\n\t\t/**\n\t\t * Field id.\n\t\t */\n\t\tid: number;\n\t\t/**\n\t\t * Field type.\n\t\t */\n\t\ttype: 'text' | 'text-multiple-choice' | 'text-multi-line' | 'rich-text' | 'numeric' | 'currency' | 'rating' | 'percent' | 'multitext' | 'email' | 'url' | 'duration' | 'date' | 'datetime' | 'timestamp' | 'timeofday' | 'checkbox' | 'user' | 'multiuser' | 'address' | 'phone' | 'file';\n\t};\n\t/**\n\t * Usage Information about the field.\n\t */\n\tusage: {\n\t\t/**\n\t\t * The number of quickbase actions where the given field is referenced.\n\t\t */\n\t\tactions: {\n\t\t\t/**\n\t\t\t * the number of times a field has been used for the given item.\n\t\t\t */\n\t\t\tcount: number;\n\t\t};\n\t\t/**\n\t\t * The number of app home pages where the given field is referenced.\n\t\t */\n\t\tappHomePages: {\n\t\t\t/**\n\t\t\t * the number of times a field has been used for the given item.\n\t\t\t */\n\t\t\tcount: number;\n\t\t};\n\t\t/**\n\t\t * The number of dashboards where the given field is referenced.\n\t\t */\n\t\tdashboards: {\n\t\t\t/**\n\t\t\t * the number of times a field has been used for the given item.\n\t\t\t */\n\t\t\tcount: number;\n\t\t};\n\t\t/**\n\t\t * The number of default reports where the given field is referenced.\n\t\t */\n\t\tdefaultReports: {\n\t\t\t/**\n\t\t\t * the number of times a field has been used for the given item.\n\t\t\t */\n\t\t\tcount: number;\n\t\t};\n\t\t/**\n\t\t * The number of exact forms where the given field is referenced.\n\t\t */\n\t\texactForms: {\n\t\t\t/**\n\t\t\t * the number of times a field has been used for the given item.\n\t\t\t */\n\t\t\tcount: number;\n\t\t};\n\t\t/**\n\t\t * The number of fields where the given field is referenced.\n\t\t */\n\t\tfields: {\n\t\t\t/**\n\t\t\t * the number of times a field has been used for the given item.\n\t\t\t */\n\t\t\tcount: number;\n\t\t};\n\t\t/**\n\t\t * The number of forms where the given field is referenced.\n\t\t */\n\t\tforms: {\n\t\t\t/**\n\t\t\t * the number of times a field has been used for the given item.\n\t\t\t */\n\t\t\tcount: number;\n\t\t};\n\t\t/**\n\t\t * The number of notifications where the given field is referenced.\n\t\t */\n\t\tnotifications: {\n\t\t\t/**\n\t\t\t * the number of times a field has been used for the given item.\n\t\t\t */\n\t\t\tcount: number;\n\t\t};\n\t\t/**\n\t\t * The number of personal reports where the given field is referenced.\n\t\t */\n\t\tpersonalReports: {\n\t\t\t/**\n\t\t\t * the number of times a field has been used for the given item.\n\t\t\t */\n\t\t\tcount: number;\n\t\t};\n\t\t/**\n\t\t * The number of pipelines where the given field is referenced.\n\t\t */\n\t\tpipelines: {\n\t\t\t/**\n\t\t\t * the number of times a field has been used for the given item.\n\t\t\t */\n\t\t\tcount: number;\n\t\t};\n\t\t/**\n\t\t * The number of relationships where the given field is referenced.\n\t\t */\n\t\trelationships: {\n\t\t\t/**\n\t\t\t * the number of times a field has been used for the given item.\n\t\t\t */\n\t\t\tcount: number;\n\t\t};\n\t\t/**\n\t\t * The number of reminders where the given field is referenced.\n\t\t */\n\t\treminders: {\n\t\t\t/**\n\t\t\t * the number of times a field has been used for the given item.\n\t\t\t */\n\t\t\tcount: number;\n\t\t};\n\t\t/**\n\t\t * The number of reports where the given field is referenced.\n\t\t */\n\t\treports: {\n\t\t\t/**\n\t\t\t * the number of times a field has been used for the given item.\n\t\t\t */\n\t\t\tcount: number;\n\t\t};\n\t\t/**\n\t\t * The number of roles where the given field is referenced.\n\t\t */\n\t\troles: {\n\t\t\t/**\n\t\t\t * the number of times a field has been used for the given item.\n\t\t\t */\n\t\t\tcount: number;\n\t\t};\n\t\t/**\n\t\t * The number of table imports where the given field is referenced.\n\t\t */\n\t\ttableImports: {\n\t\t\t/**\n\t\t\t * the number of times a field has been used for the given item.\n\t\t\t */\n\t\t\tcount: number;\n\t\t};\n\t\t/**\n\t\t * The number of table rules where the given field is referenced.\n\t\t */\n\t\ttableRules: {\n\t\t\t/**\n\t\t\t * the number of times a field has been used for the given item.\n\t\t\t */\n\t\t\tcount: number;\n\t\t};\n\t\t/**\n\t\t * The number of webhooks where the given field is referenced.\n\t\t */\n\t\twebhooks: {\n\t\t\t/**\n\t\t\t * the number of times a field has been used for the given item.\n\t\t\t */\n\t\t\tcount: number;\n\t\t};\n\t};\n}[];\n\nexport type QuickBaseResponseRunFormula = {\n\t/**\n\t * The formula execution result.\n\t */\n\tresult: string;\n};\n\nexport type QuickBaseResponseUpsert = {\n\t/**\n\t * Information about created records, updated records, referenced but unchanged records, and records having any errors while being processed.\n\t */\n\tmetadata: {\n\t\t/**\n\t\t * Array containing the created record ids.\n\t\t */\n\t\tcreatedRecordIds: number[];\n\t\t/**\n\t\t * This will only be returned in the case of failed records. It is a collection of errors that occurred when processing the incoming data that resulted in records not being processed. Each object has a key representing the sequence number of the record in the original payload (starting from 1). The value is a list of errors occurred.\n\t\t */\n\t\tlineErrors: Record<string, string[]>;\n\t\t/**\n\t\t * Array containing the unchanged record ids.\n\t\t */\n\t\tunchangedRecordIds: number[];\n\t\t/**\n\t\t * Array containing the updated record ids.\n\t\t */\n\t\tupdatedRecordIds: number[];\n\t\t/**\n\t\t * Number of records processed. Includes successful and failed record updates.\n\t\t */\n\t\ttotalNumberOfRecordsProcessed: number;\n\t};\n\t/**\n\t * The data that is expected to be returned.\n\t */\n\tdata: Record<string, { value: any }>[];\n};\n\nexport type QuickBaseResponseDeleteRecords = {\n\t/**\n\t * The number of records deleted.\n\t */\n\tnumberDeleted: number;\n};\n\nexport type QuickBaseResponseRunQuery = {\n\t/**\n\t * An array of objects that contains limited meta-data of each field displayed in the report. This assists in building logic that depends on field types and IDs.\n\t */\n\tfields: {\n\t\t/**\n\t\t * Field id.\n\t\t */\n\t\tid: number;\n\t\t/**\n\t\t * Field label.\n\t\t */\n\t\tlabel: string;\n\t\t/**\n\t\t * Field type.\n\t\t */\n\t\ttype: 'text' | 'text-multiple-choice' | 'text-multi-line' | 'rich-text' | 'numeric' | 'currency' | 'rating' | 'percent' | 'multitext' | 'email' | 'url' | 'duration' | 'date' | 'datetime' | 'timestamp' | 'timeofday' | 'checkbox' | 'user' | 'multiuser' | 'address' | 'phone' | 'file';\n\t}[];\n\t/**\n\t * An array of objects that either represents the record data or summarized values, depending on the report type.\n\t */\n\tdata: Record<string, { value: any }>[];\n\t/**\n\t * Additional information about the results that may be helpful. Pagination may be needed if either you specify a smaller number of results to skip than is available, or if the API automatically returns fewer results. numRecords can be compared to totalRecords to determine if further pagination is needed.\n\t */\n\tmetadata: {\n\t\t/**\n\t\t * The number of records to skip\n\t\t */\n\t\tskip?: number;\n\t\t/**\n\t\t * The number of fields in each record in the current response object\n\t\t */\n\t\tnumFields: number;\n\t\t/**\n\t\t * If present, the maximum number of records requested by the caller\n\t\t */\n\t\ttop?: number;\n\t\t/**\n\t\t * The total number of records in the result set\n\t\t */\n\t\ttotalRecords: number;\n\t\t/**\n\t\t * The number of records in the current response object\n\t\t */\n\t\tnumRecords: number;\n\t};\n};\n\nexport type QuickBaseResponseGetTempTokenDBID = {\n\t/**\n\t * Temporary authorization token.\n\t */\n\ttemporaryAuthorization: string;\n};\n\nexport type QuickBaseResponseExchangeSsoToken = {\n\t/**\n\t * The security token issued by the authorization server in response to the token exchange request. The identifier `access_token` is used for historical reasons and the issued token need not be an OAuth access token.\n\t */\n\taccess_token: string;\n\t/**\n\t * An identifier for the representation of the issued security token.\n\t */\n\tissued_token_type: 'urn:quickbase:params:oauth:token-type:temp_ticket' | 'urn:quickbase:params:oauth:token-type:temp_token';\n\t/**\n\t * Will always return `N_A`\n\t */\n\ttoken_type: 'N_A';\n};\n\nexport type QuickBaseResponseCloneUserToken = {\n\t/**\n\t * Whether the user token is active.\n\t */\n\tactive: boolean;\n\t/**\n\t * The list of apps this user token is assigned to.\n\t */\n\tapps: {\n\t\t/**\n\t\t * The unique identifier for this application.\n\t\t */\n\t\tid: string;\n\t\t/**\n\t\t * The application's name.\n\t\t */\n\t\tname: string;\n\t}[];\n\t/**\n\t * The last date this user token was used, in the ISO 8601 time format YYYY-MM-DDThh:mm:ss.sssZ (in UTC time zone).\n\t */\n\tlastUsed: string;\n\t/**\n\t * User Token description.\n\t */\n\tdescription: string;\n\t/**\n\t * User Token id.\n\t */\n\tid: number;\n\t/**\n\t * User Token name.\n\t */\n\tname: string;\n\t/**\n\t * User Token value.\n\t */\n\ttoken: string;\n};\n\nexport type QuickBaseResponseDeactivateUserToken = {\n\t/**\n\t * The user token id.\n\t */\n\tid: number;\n};\n\nexport type QuickBaseResponseDeleteUserToken = {\n\t/**\n\t * The user token id.\n\t */\n\tid: number;\n};\n\nexport type QuickBaseResponseDownloadFile = string;\n\nexport type QuickBaseResponseDeleteFile = {\n\t/**\n\t * The number of deleted version.\n\t */\n\tversionNumber: number;\n\t/**\n\t * The name of file associated with deleted version.\n\t */\n\tfileName: string;\n\t/**\n\t * The timestamp when the version was originally uploaded.\n\t */\n\tuploaded: string;\n\t/**\n\t * The user that uploaded version.\n\t */\n\tcreator: {\n\t\t/**\n\t\t * User full name.\n\t\t */\n\t\tname: string;\n\t\t/**\n\t\t * User Id.\n\t\t */\n\t\tid: string;\n\t\t/**\n\t\t * User email.\n\t\t */\n\t\temail: string;\n\t\t/**\n\t\t * User Name as updated in user properties. Optional, appears if not the same as user email.\n\t\t */\n\t\tuserName: string;\n\t};\n};\n\nexport type QuickBaseResponseGetUsers = {\n\t/**\n\t * A list of users found in an account with the given criterias\n\t */\n\tusers: {\n\t\tuserName: string;\n\t\tfirstName: string;\n\t\tlastName: string;\n\t\temailAddress: string;\n\t\thashId: string;\n\t}[];\n\t/**\n\t * Additional request information\n\t */\n\tmetadata: {\n\t\tnextPageToken: string;\n\t};\n};\n\nexport type QuickBaseResponseDenyUsers = {\n\t/**\n\t * A list of users that couldn't be denied. This also includes the ID's of users that are not valid.\n\t */\n\tfailure: string[];\n\t/**\n\t * A list of users that have successfully been denied.\n\t */\n\tsuccess: string[];\n};\n\nexport type QuickBaseResponseDenyUsersAndGroups = {\n\t/**\n\t * A list of users that couldn't be denied. This also includes the ID's of users that are not valid.\n\t */\n\tfailure: string[];\n\t/**\n\t * A list of users that have successfully been denied.\n\t */\n\tsuccess: string[];\n};\n\nexport type QuickBaseResponseUndenyUsers = {\n\t/**\n\t * A list of users that couldn't be undenied. This also includes the ID's of users that are not valid.\n\t */\n\tfailure: string[];\n\t/**\n\t * A list of users that have successfully been undenied.\n\t */\n\tsuccess: string[];\n};\n\nexport type QuickBaseResponseAddMembersToGroup = {\n\t/**\n\t * A list of users that couldn\u2019t be added to the group. This includes a list of IDs that represent invalid users and users who have already been added to the group.\n\t */\n\tfailure: string[];\n\t/**\n\t * A list of users that have been added to the group successfully.\n\t */\n\tsuccess: string[];\n};\n\nexport type QuickBaseResponseRemoveMembersFromGroup = {\n\t/**\n\t * A list of users that couldn\u2019t be removed from the group. This includes a list of IDs that represent invalid users.\n\t */\n\tfailure: string[];\n\t/**\n\t * A list of users that have been removed from the group successfully.\n\t */\n\tsuccess: string[];\n};\n\nexport type QuickBaseResponseAddManagersToGroup = {\n\t/**\n\t * A list of users that couldn\u2019t be added to the group. This includes a list of IDs that represent invalid users and users who have already been added to the group.\n\t */\n\tfailure: string[];\n\t/**\n\t * A list of users that have been added to the group successfully.\n\t */\n\tsuccess: string[];\n};\n\nexport type QuickBaseResponseRemoveManagersFromGroup = {\n\t/**\n\t * A list of users that couldn\u2019t be removed from the group. This includes a list of IDs that represent invalid users.\n\t */\n\tfailure: string[];\n\t/**\n\t * A list of users that have been removed from the group successfully.\n\t */\n\tsuccess: string[];\n};\n\nexport type QuickBaseResponseAddSubgroupsToGroup = {\n\t/**\n\t * A list of child groups that couldn\u2019t be added to the group. This includes a list of IDs that represent invalid groups and groups that have already been added to the group.\n\t */\n\tfailure: string[];\n\t/**\n\t * A list of child groups that have been added to the group successfully.\n\t */\n\tsuccess: string[];\n};\n\nexport type QuickBaseResponseRemoveSubgroupsFromGroup = {\n\t/**\n\t * A list of child groups that couldn\u2019t be removed from the group. This includes a list of IDs that represent invalid groups.\n\t */\n\tfailure: string[];\n\t/**\n\t * A list of child groups that have been removed from the group successfully.\n\t */\n\tsuccess: string[];\n};\n\nexport type QuickBaseResponseAudit = {\n\t/**\n\t * Query id of the requested audit log.\n\t */\n\tqueryId: string;\n\t/**\n\t * All events of the audit log.\n\t */\n\tevents?: {\n\t\t/**\n\t\t * Log ID.\n\t\t */\n\t\tid: string;\n\t\t/**\n\t\t * User's first name.\n\t\t */\n\t\tfirstname: string;\n\t\t/**\n\t\t * User's last name.\n\t\t */\n\t\tlastname: string;\n\t\t/**\n\t\t * User's email address.\n\t\t */\n\t\temail: string;\n\t\t/**\n\t\t * What action was taken, such as log in, create app, report access, or table search.\n\t\t */\n\t\ttopic: string;\n\t\t/**\n\t\t * Exact time the action was taken, including date, and time with hour, minutes and seconds. Time zone is the browser time zone.\n\t\t */\n\t\ttime: string;\n\t\t/**\n\t\t * The IP address the action was taken from.\n\t\t */\n\t\tipaddress: string;\n\t\t/**\n\t\t * The browser and OS the action was taken from.\n\t\t */\n\t\tuseragent: string;\n\t\t/**\n\t\t * UI for user interface or API for an API call.\n\t\t */\n\t\tapplication: string;\n\t\t/**\n\t\t * A brief description of the action that you can click to see additional details.\n\t\t */\n\t\tdescription: string;\n\t\t/**\n\t\t * The data changes that have occured to a field that has been marked as audited.\n\t\t */\n\t\tpayloadChanges?: {\n\t\t\t/**\n\t\t\t * An object describing the changes that occured on record changes.\n\t\t\t */\n\t\t\tchanges: {\n\t\t\t\t/**\n\t\t\t\t * The current value of the fields that have been changed.\n\t\t\t\t */\n\t\t\t\tcurrent: any;\n\t\t\t\t/**\n\t\t\t\t * The previous value of the fields that have been changed.\n\t\t\t\t */\n\t\t\t\tprevious: any;\n\t\t\t\t/**\n\t\t\t\t * The list of fields and their types that have been changed.\n\t\t\t\t */\n\t\t\t\tfields: any;\n\t\t\t};\n\t\t\t/**\n\t\t\t * The recordId that has been edited.\n\t\t\t */\n\t\t\trid: number;\n\t\t\t/**\n\t\t\t * The change type that occured for a record. Could be one of add, edit, delete.\n\t\t\t */\n\t\t\tchangeType: string;\n\t\t\t/**\n\t\t\t * A placeholder for type changes.\n\t\t\t */\n\t\t\ttype: string;\n\t\t};\n\t}[];\n\t/**\n\t * Token to fetch the next 1000 logs.\n\t */\n\tnextToken?: string;\n};\n\nexport type QuickBaseResponsePlatformAnalyticReads = {\n\t/**\n\t * The date of the requested summary.\n\t */\n\tdate: string;\n\t/**\n\t * Total reads for the specified date.\n\t */\n\treads: {\n\t\t/**\n\t\t * Total user reads for the realm on the specified date.\n\t\t */\n\t\tuser: number;\n\t\t/**\n\t\t * Total integration reads for the realm on the specified date.\n\t\t */\n\t\tintegrations: {\n\t\t\t/**\n\t\t\t * Total reads by anonymous users for the realm on the specified date.\n\t\t\t */\n\t\t\teoti: number;\n\t\t\t/**\n\t\t\t * Total API reads for the realm on the specified date.\n\t\t\t */\n\t\t\tapi: number;\n\t\t\t/**\n\t\t\t * Total pipeline reads for the realm on the specified date.\n\t\t\t */\n\t\t\tpipelines: number;\n\t\t};\n\t};\n};\n\nexport type QuickBaseResponsePlatformAnalyticEventSummaries = {\n\t/**\n\t * The ID of the account the events are associated with.\n\t */\n\taccountId: string;\n\t/**\n\t * The start date and time of the requested summaries in ISO 8601 time format.\n\t */\n\tstart: string;\n\t/**\n\t * The end date and time of the requested summaries in ISO 8601 time format.\n\t */\n\tend: string;\n\t/**\n\t * How the events should be grouped.\n\t */\n\tgroupBy: 'app' | 'user';\n\twhere: {\n\t\t/**\n\t\t * Id of the item to filter by.\n\t\t */\n\t\tid: string;\n\t\t/**\n\t\t * The type of item to filter by.\n\t\t */\n\t\ttype: 'app' | 'user';\n\t}[];\n\t/**\n\t * An array of objects that contains Application/User information and an events object with summaries by event type.\n\t */\n\tresults: {\n\t\t/**\n\t\t * An array of events that contains specific information associated with an Application/User broken down by event type.\n\t\t */\n\t\teventTypes: {\n\t\t\t/**\n\t\t\t * Billing category of the event type.\n\t\t\t */\n\t\t\tbillingCategory: 'user' | 'integration';\n\t\t\t/**\n\t\t\t * Count of events associated with that event type and Application/User.\n\t\t\t */\n\t\t\tcount: number;\n\t\t\t/**\n\t\t\t * Event type\n\t\t\t */\n\t\t\teventType: string;\n\t\t}[];\n\t\t/**\n\t\t * Id of the Application/User.\n\t\t */\n\t\tid: string;\n\t\t/**\n\t\t * Name of the Application/User.\n\t\t */\n\t\tname: string;\n\t\t/**\n\t\t * Totals by billing category for the event grouping.\n\t\t */\n\t\ttotals: {\n\t\t\tall: number;\n\t\t\tintegration: number;\n\t\t\tuser: number;\n\t\t};\n\t}[];\n\t/**\n\t * Additional information about the results that may be helpful.\n\t */\n\tmetadata?: {\n\t\t/**\n\t\t * Supply this token in a subsequent request to fetch the next page of results.\n\t\t */\n\t\tnextToken: string;\n\t};\n\t/**\n\t * Totals by billing category for all queried events.\n\t */\n\ttotals?: {\n\t\tall: number;\n\t\tintegration: number;\n\t\tuser: number;\n\t};\n};\n\nexport type QuickBaseResponseExportSolution = any;\n\nexport type QuickBaseResponseUpdateSolution = any;\n\nexport type QuickBaseResponseCreateSolution = any;\n\n/* Export to Browser */\nif(IS_BROWSER){\n\twindow.QuickBase = exports;\n}\n"],
  "mappings": "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",
  "names": ["require_cjs", "__commonJSMin", "exports", "module", "isMergeableObject", "value", "isNonNullObject", "isSpecial", "stringValue", "isReactElement", "canUseSymbol", "REACT_ELEMENT_TYPE", "emptyTarget", "val", "cloneUnlessOtherwiseSpecified", "options", "deepmerge", "defaultArrayMerge", "target", "source", "element", "getMergeFunction", "key", "customMerge", "getEnumerableOwnPropertySymbols", "symbol", "getKeys", "propertyIsOnObject", "object", "property", "_", "propertyIsUnsafe", "mergeObject", "destination", "sourceIsArray", "targetIsArray", "sourceAndTargetTypesMatch", "array", "prev", "next", "deepmerge_1", "require_ms", "__commonJSMin", "exports", "module", "s", "m", "h", "d", "w", "y", "val", "options", "type", "parse", "fmtLong", "fmtShort", "str", "match", "n", "ms", "msAbs", "plural", "name", "isPlural", "require_common", "__commonJSMin", "exports", "module", "setup", "env", "createDebug", "coerce", "disable", "enable", "enabled", "destroy", "key", "selectColor", "namespace", "hash", "i", "prevTime", "enableOverride", "namespacesCache", "enabledCache", "debug", "args", "self", "curr", "ms", "index", "match", "format", "formatter", "val", "extend", "v", "delimiter", "newDebug", "namespaces", "split", "len", "toNamespace", "name", "regexp", "require_browser", "__commonJSMin", "exports", "module", "formatArgs", "save", "load", "useColors", "localstorage", "warned", "args", "c", "index", "lastC", "match", "namespaces", "error", "r", "formatters", "v", "require_throttle", "__commonJSMin", "exports", "__awaiter", "thisArg", "_arguments", "P", "generator", "adopt", "value", "resolve", "reject", "fulfilled", "step", "e", "rejected", "result", "__generator", "body", "_", "t", "f", "y", "g", "verb", "n", "v", "op", "Throttle", "requestsPerPeriod", "periodLength", "errorOnLimit", "PromiseImplementation", "active", "results", "_a", "err_1", "_b", "cutOff", "_this", "time", "fn", "err_2", "pending", "bind", "fn", "thisArg", "toString", "getPrototypeOf", "kindOf", "cache", "thing", "str", "kindOfTest", "type", "typeOfTest", "isArray", "isUndefined", "isBuffer", "val", "isFunction", "isArrayBuffer", "isArrayBufferView", "result", "isString", "isNumber", "isObject", "isBoolean", "isPlainObject", "prototype", "isDate", "isFile", "isBlob", "isFileList", "isStream", "isFormData", "kind", "isURLSearchParams", "trim", "forEach", "obj", "allOwnKeys", "i", "l", "keys", "len", "key", "findKey", "_key", "_global", "isContextDefined", "context", "merge", "caseless", "assignValue", "targetKey", "extend", "a", "b", "stripBOM", "content", "inherits", "constructor", "superConstructor", "props", "descriptors", "toFlatObject", "sourceObj", "destObj", "filter", "propFilter", "prop", "merged", "endsWith", "searchString", "position", "lastIndex", "toArray", "arr", "isTypedArray", "TypedArray", "forEachEntry", "iterator", "pair", "matchAll", "regExp", "matches", "isHTMLForm", "toCamelCase", "m", "p1", "p2", "hasOwnProperty", "isRegExp", "reduceDescriptors", "reducer", "reducedDescriptors", "descriptor", "name", "ret", "freezeMethods", "value", "toObjectSet", "arrayOrString", "delimiter", "define", "noop", "toFiniteNumber", "defaultValue", "ALPHA", "DIGIT", "ALPHABET", "generateString", "size", "alphabet", "length", "isSpecCompliantForm", "toJSONObject", "stack", "visit", "source", "target", "reducedValue", "isAsyncFn", "isThenable", "utils$1", "AxiosError", "message", "code", "config", "request", "response", "utils", "error", "customProps", "axiosError", "httpAdapter", "isVisitable", "removeBrackets", "renderKey", "path", "dots", "token", "isFlatArray", "predicates", "toFormData", "formData", "options", "option", "metaTokens", "visitor", "defaultVisitor", "indexes", "useBlob", "convertValue", "el", "index", "exposedHelpers", "build", "encode", "charMap", "match", "AxiosURLSearchParams", "params", "encoder", "_encode", "buildURL", "url", "serializeFn", "serializedParams", "hashmarkIndex", "InterceptorManager", "fulfilled", "rejected", "id", "h", "InterceptorManager$1", "transitionalDefaults", "URLSearchParams$1", "FormData$1", "Blob$1", "platform$1", "URLSearchParams", "FormData", "Blob", "hasBrowserEnv", "hasStandardBrowserEnv", "product", "hasStandardBrowserWebWorkerEnv", "platform", "__spreadValues", "toURLEncodedForm", "data", "helpers", "parsePropPath", "arrayToObject", "formDataToJSON", "buildPath", "isNumericKey", "isLast", "stringifySafely", "rawValue", "parser", "e", "defaults", "headers", "contentType", "hasJSONContentType", "isObjectPayload", "_FormData", "transitional", "forcedJSONParsing", "JSONRequested", "strictJSONParsing", "status", "method", "defaults$1", "ignoreDuplicateOf", "parseHeaders", "rawHeaders", "parsed", "line", "$internals", "normalizeHeader", "header", "normalizeValue", "parseTokens", "tokens", "tokensRE", "isValidHeaderName", "matchHeaderValue", "isHeaderNameFilter", "formatHeader", "w", "char", "buildAccessors", "accessorName", "methodName", "arg1", "arg2", "arg3", "AxiosHeaders", "valueOrRewrite", "rewrite", "self", "setHeader", "_value", "_header", "_rewrite", "lHeader", "setHeaders", "matcher", "deleted", "deleteHeader", "format", "normalized", "targets", "asStrings", "first", "computed", "accessors", "defineAccessor", "mapped", "headerValue", "AxiosHeaders$1", "transformData", "fns", "isCancel", "CanceledError", "settle", "resolve", "reject", "validateStatus", "cookies", "expires", "domain", "secure", "cookie", "isAbsoluteURL", "combineURLs", "baseURL", "relativeURL", "buildFullPath", "requestedURL", "isURLSameOrigin", "msie", "urlParsingNode", "originURL", "resolveURL", "href", "requestURL", "parseProtocol", "speedometer", "samplesCount", "min", "bytes", "timestamps", "head", "tail", "firstSampleTS", "chunkLength", "now", "startedAt", "bytesCount", "passed", "progressEventReducer", "listener", "isDownloadStream", "bytesNotified", "_speedometer", "loaded", "total", "progressBytes", "rate", "inRange", "isXHRAdapterSupported", "xhrAdapter", "requestData", "requestHeaders", "responseType", "withXSRFToken", "onCanceled", "done", "username", "password", "fullPath", "onloadend", "responseHeaders", "err", "timeoutErrorMessage", "xsrfValue", "cancel", "protocol", "knownAdapters", "renderReason", "reason", "isResolvedHandle", "adapter", "adapters", "nameOrAdapter", "rejectedReasons", "reasons", "state", "s", "throwIfCancellationRequested", "dispatchRequest", "headersToObject", "mergeConfig", "config1", "config2", "getMergedValue", "mergeDeepProperties", "valueFromConfig2", "defaultToConfig2", "mergeDirectKeys", "mergeMap", "configValue", "VERSION", "validators", "deprecatedWarnings", "validator", "version", "formatMessage", "opt", "desc", "opts", "assertOptions", "schema", "allowUnknown", "Axios", "instanceConfig", "configOrUrl", "__async", "dummy", "paramsSerializer", "contextHeaders", "requestInterceptorChain", "synchronousRequestInterceptors", "interceptor", "responseInterceptorChain", "promise", "chain", "newConfig", "onFulfilled", "onRejected", "generateHTTPMethod", "isForm", "Axios$1", "CancelToken", "_CancelToken", "executor", "resolvePromise", "onfulfilled", "_resolve", "c", "CancelToken$1", "spread", "callback", "isAxiosError", "payload", "HttpStatusCode", "HttpStatusCode$1", "createInstance", "defaultConfig", "instance", "axios", "promises", "require_package", "__commonJSMin", "exports", "module", "require_quickbase", "__commonJSMin", "exports", "deepmerge_1", "__importDefault", "debug_1", "generic_throttle_1", "axios_1", "debugMain", "debugRequest", "debugResponse", "VERSION", "IS_BROWSER", "delay", "time", "resolve", "getRetryDelay", "headers", "retryAfter", "retryDelay", "objKeysToLowercase", "obj", "key", "value", "QuickBaseError", "_QuickBaseError", "code", "message", "description", "rayId", "json", "QuickBase", "_QuickBase", "options", "addToken", "options_1", "attempt", "id", "_a", "results", "err", "qbErr", "delayMs", "errDescription", "actOptions", "reqOptions", "__awaiter", "dbid", "tempToken", "requestOptions", "returnAxios", "body", "__rest", "appId", "tableId", "childTableId", "skip", "relationshipId", "reportId", "top", "includeFieldPerms", "fieldId", "recordId", "versionNumber", "accountId", "shouldDeleteFromGroups", "gid", "day", "solutionId"]
}
